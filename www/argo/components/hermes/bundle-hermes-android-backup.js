require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var events = require('events');

/**
 * @class hermes
 * @singleton
 * hermes 发音为 ['ɛrmɛs]，是希腊神话中宙斯和迈亚的儿子，众神的使者，亡灵的接引神。在本框架中，我们借用此神名来命名 JavaScript 和`中间层`的通信框架。
 *
 * JavaScript 与 `中间层` 通信类。对于不需要接触到 Qt 或 Android 代码的开发人员只需要参考本类即可完成 JavaScript 插件 的开发。如果要开发 Qt 或者 Android 平台的插件，请参考相关 Guide。
 *
 * 通过 Qt 或者 Android 暴露给 JavaScript 的对象，我们称之为 `Native Object`，我们也称之为 `Native 对象`或者`本地对象`。`Native 对象`的方法称为 `Native 方法`。
 *
 */
var hermes = {
  /**
   * 用于存储 Hermes Native 插件。
   *
   * 属性名为插件名，属性值为插件对象。
   * @private
   */
  nativePlugins: {},

  /**
   * JavaScript 插件实例备忘录。
   *
   * 每个属性对应一个插件实例。
   * 对于多实例插件，属性名为每个实例唯一的 id（例如使用底层提供的实例句柄）；
   * 对于单实例插件，属性名为插件 UUID，属性值为 JavaScript 插件对象。
   *
   * @private
   */
  jsPluginInstances: {},

  /**
   * 回调备忘录。
   *
   * _id 为当前回调数。
   * @private
   */
  callbacks: {_id: 1},

  /**
   * 将 JavaScript 插件实例注册到实例备忘录中。
   *
   * @param instanceId 插件实例唯一编号。
   * @param jsPluginInstance JavaScript 插件实例。
   */
  addJsPluginInstance: function (instanceId, jsPluginInstance) {
    if (!(instanceId && jsPluginInstance)) {
      throw 'instanceId or plugin is not defined.';
    }
    this.jsPluginInstances[instanceId] = jsPluginInstance;
  },

  addCallback: function (callback) {
    if (callback === null) {
      return -1;
    }

    var callbackId;
    callbackId = this.callbacks._id;
    this.callbacks._id = callbackId + 1;

    // 备忘回调函数。
    this.callbacks[callbackId] = {
      fn: callback
    };
    return callbackId;
  },

  /**
   * 将 JavaScript 插件实例从实例备忘录中删除。
   *
   * 当一个插件对象不再被使用时，请调用此方法。
   * @param instanceId 插件实例唯一编号。
   */
  removeJsPluginInstance: function (instanceId) {
    if (!instanceId) {
      throw 'instanceId is not defined.';
    }

    if (!this.jsPluginInstances[instanceId]) {
      throw 'The plugin with the instanceId(' + instanceId + ') is not found.';
    }

    delete this.jsPluginInstances[instanceId];
  },

  /**
   * 执行指定插件的函数。
   * @method exec
   * @param {String} pluginId 插件唯一标识。
   * @param {Number} instanceId 插件实例的唯一标识。
   * @param {String} functionName 插件函数。
   * @param {Array} params 插件函数的参数。
   * @param [callback] 可选。回调函数。默认情况下，回调的作用域为`window`，可以通过‘Function.prototype.bind’方法绑定函数的作用域。
   * @param {Error} callback.err 错误。
   * @param {Array} callback.parameters 回调参数。

   * @return 插件函数返回的值。
   */
  exec: function (pluginId, instanceId, functionName, params, callback) {
    var callbackId, self = this;

    // 如果无回调，调整参数
    if (typeof params === 'function') {
      callback = params;
      params = [];
    }

    if(typeof callback === 'undefined'){
      // 同步，不用添加回调。
    }else if(callback === null){
    //  异步无回调
      callbackId = self.addCallback(null);

      // 将callbackId放在参数数组头部。
      params.unshift(callbackId);
    }else{

      // 异步有回调，备忘回调函数。
      callbackId = self.addCallback(callback);

      // 将callbackId放在参数数组头部。
      params.unshift(callbackId);
    }
    try {
      return self.callNativePluginFunction(pluginId, instanceId, functionName, params);
    } catch (err) {
      console.log('exec err = '+err.message);
//      callback.call(self, {code: 'UNKNOWN', message: err.message + ', hermes, pluginId: ' + pluginId + ', instanceId: ' + instanceId + ', functionName: ' + functionName + ', params: ' + JSON.stringify(params)});
      return err;
    }
  },

  /**
   * 调用插件的方法。
   * @private
   * @param {Object} pluginId 插件名.
   * @param {String} instanceId 插件实例的唯一标识。
   * @param {String} functionName
   * @param {Array} params 调用参数。
   * @returns {Object/String/Number} 插件方法执行的返回值。
   */
  callNativePluginFunction: function (pluginId, instanceId, functionName, params) {
    throw new Error('Must override callNativePluginFunction() in subtype');
  },

  /**
   * Native 对象 `callback` 信号的响应函数。
   *
   * 回调函数由 Native 对象产生，并绑定到本方法。
   * Native 对象产生的回调统一绑定到本方法，用 `callbackId` 来索引回调方法的实例。本方法用备忘录模式找到 `key` 所对应的实例，再触发该实例的方法。
   *
   * @private
   *
   * 当 Native 方法执行后，如果需要调用回调函数，均会调用到该函数。
   * @param callbackId 回调的备忘Id。
   * @param parameters 回调函数的参数。
   */
  onNativeCallback: function (callbackId, parameters) {
    if(callbackId === -1){
      // todo 写日志。
      console.warn('callbackId == -1');
      return;
    }

    console.log('onNativeCallback: ' + callbackId + ', params:' + JSON.stringify(parameters));
    var callback = this.callbacks[callbackId];
    if (callback) {
      // Keep reference to callback
      var callbackFn = hermes.callbacks[callbackId].fn;

      // Remove callback from the stack
      delete hermes.callbacks[callbackId];

      // Finally run the callback
      if (typeof callbackFn === 'function') {
        // callback 传入时如果使用 bind 来绑定，则作用域为 bind 传入的值，否则为 null。
        // PS：即使这里（null）传入的是 window，在回调函数中 this 也等于 null。
        callbackFn.apply(null, parameters);
      }
    } else {
      console.warn('can not find callback: ' + callbackId + ', params:' + JSON.stringify(parameters));
    }
  },

  /**
   * Native 对象 `trigger` 信号的响应函数。
   *
   * 事件由 Native 对象产生，并绑定到本方法。
   * Native 对象产生的事件统一绑定到本方法，用 `jsPluginInstanceId` 来标识目标实例。本方法用备忘录模式找到 `jsPluginInstanceId` 所对应的实例，再触发该实例的方法。
   * @private
   * @param jsPluginInstanceId JavaScript 实例标志。
   * @param eventName 事件名。
   * @param parameters 事件参数。
   */
  onNativeEvent: function (jsPluginInstanceId, eventName, parameters) {
    var jsPluginInstance = hermes.jsPluginInstances[jsPluginInstanceId];
    if (!jsPluginInstance) {
      var msg = 'The javascript instance for jsPluginInstanceId=[' + jsPluginInstanceId + '] is not found.';
      console.log(msg);
      throw msg;
    }

    if (!parameters) {
      parameters = [];
    }
    parameters.unshift(eventName);
    jsPluginInstance.emit.apply(jsPluginInstance, parameters);
  },

  mixin: function (target, source) {
    var key;
    for (key in source) {
      if (source.hasOwnProperty(key)) {
        if (target.hasOwnProperty(key)) {
          continue;
        }
        target[key] = source[key];
      }
    }
  },

  /**
   * 为任意对象增加事件机制。
   * @param target 待增加事件机制的目标对象。
   */
  addEventSupport: function (target) {
    this.mixin(target, events.EventEmitter.prototype);
  },

  NULL: -1
};

hermes.addEventSupport(hermes);
hermes.addJsPluginInstance('hermes', hermes);

module.exports = hermes;

},{"events":175}],2:[function(require,module,exports){
'use strict';

var util = require('util');

require('./packer/a');
require('./packer/an');
require('./packer/ans');
require('./packer/b');
require('./packer/bitmap');
require('./packer/llan');
require('./packer/llans');
require('./packer/lllan');
require('./packer/lllans');
require('./packer/lllb');
require('./packer/llb');
require('./packer/llln');
require('./packer/lln');
require('./packer/n');

/**
 * Requirement：
 *
 * 1. [ ] 补位字符可定制。
 * 2. [ ] 增加对齐方式。
 * 3. [ ] 实现 b 和 lllb。
 * 4. [x] 实现 lllans。

 * 5. [x] 长度（LL，LLL）计算方法可定制。
 * 6. [ ] 支持可扩展。打包解包算法可定制。
 *
 * @param packager
 * @constructor
 */

var ISO8583 = function (packager) {
  var defaultPackager = require('./packager/default');
  var lengthPacker = require('./length-packer');

  lengthPacker.packer = defaultPackager.length;

  this.packager = packager || defaultPackager;
  //this.packager = defaultPackager;

  /**
   * 解包指定域。
   * @param msg 消息内容。
   * @param id 域号。
   * @param fields 解包结果对象。
   * @returns {*} 解包结果
   */
  this._unpack = function (msg, id, fields) {
    var result;
    try {
      // 包定义
      var packager = this.packager.fields[id];

      // 用相应类型的打包器打包。
      result = require('./packer/' + packager.type).unpack(msg, packager);
      fields[id] = result.data;
    } catch (e) {
      var errMsg = 'Error unpacking data from bit ' + id + '\nPackager: ' + util.inspect(packager);
      console.error(errMsg);
      throw new Error(errMsg + ': ' + e.message);
    }
    return result;
  };

  this._pack = function (row, id) {
    var result;
    try {
      var packager = this.packager.fields[id];
      result = require('./packer/' + packager.type).pack(row, packager);
    } catch (e) {
      var errMsg = 'Error packing data from bit ' + id + '\nPackager: ' + util.inspect(packager);
      console.error(errMsg);
      throw new Error(errMsg + ': ' + e.message);
    }
    return result;
  };

  this.unpack = function (msg) {
    var result;
    var fields = {};

    // 解包第 0 域，消息类型。
    result = this._unpack(msg, 0, fields);
    fields['0'] = result.data;

    // 解包第 1 域，位图
    result = this._unpack(result.restData, 1, fields);
    fields['1'] = result.data;


    var fieldIds = result.fieldIds;

    for (var i in fieldIds) {
      result = this._unpack(result.restData, fieldIds[i], fields);
      //fields[i] = result.data;
    }

    return fields;
  };

  /**
   * 根据对象的属性名对属性从小到大排序。
   *
   * @param o
   * @returns {{}}
   * @private
   */
  this._sort = function (o) {
    var sorted = {},
      key, a = [];

    for (key in o) {
      if (o.hasOwnProperty(key)) {
        a.push(key);
      }
    }

    a.sort();

    for (key = 0; key < a.length; key++) {
      sorted[a[key]] = o[a[key]];
    }
    return sorted;
  };

  this.pack = function (data) {
    var retMsg = '', retMap = {};
    var result;

    // 如果没有 bitmap 域，自动加一个
    if (!data[1]) {
      data[1] = '';
    }

    // 根据域号从小到大排序。
    data = this._sort(data);

    // TODO 精简代码
    for (var i in data) {
      // 第一域
      if (i == 1) {
        result = this._pack(data, i);
      } else {
        // 其他域
        if (data[i] !== '' && data[i] !== undefined && data[i] !== null) {

          // 第 35 和 36 域
          if (i == 35 || i == 36) {

            // = 换成 D
            data[i] = data[i].replace(/=/g, 'D');
          }
          //非空才操作
          result = this._pack(data[i], i);
        }
      }

      //bitmap域有特别处理
      if (i == 1 || (data[i] !== '' && data[i] !== undefined && data[i] !== null)) {
        retMap[i] = result.msg;
        retMsg += result.msg;
      }
      //console.log(retMap);
    }


    return retMsg;
  };
};

module.exports = ISO8583;

},{"./length-packer":6,"./packager/default":7,"./packer/a":8,"./packer/an":9,"./packer/ans":10,"./packer/b":11,"./packer/bitmap":12,"./packer/llan":13,"./packer/llans":14,"./packer/llb":15,"./packer/lllan":16,"./packer/lllans":17,"./packer/lllb":18,"./packer/llln":19,"./packer/lln":20,"./packer/n":21,"util":277}],3:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/7.
 */
'use strict';

var converter = require('../util/converter');
var bcd = require('./bcd');

exports.pack = function (raw, packager) {
  // 域内容长度。
  var length = bcd.pack(raw, packager);
  if (packager.type.indexOf('lll') < 0) {
    // 取2个字节的长度。TODO length.substr(0, 2) === length？
    length = converter.encodeAsc(length.substr(0, 2));
  }else{
    // 长度字符串为 4，取后 3 个有效长度字符。
    length = converter.encodeAsc(length.substr(1, 3));
  }
  return length;
};

exports.unpack = function (msg, packager) {
  var length = 0;
  if (packager.type.indexOf('lll') < 0) {
    // 取2个字节的长度。
    length = msg.substr(0, 4);
  }else{
    // 取3个字节的长度。
    length = msg.substr(0, 6);
  }


  length = converter.decodeAsc(length);
  var len = parseInt(length, 10);
  if (packager.type.indexOf('b') >=0 ){
    len = len * 2;
  }
  else if (packager.content === 'asc' ){
    // type含b，就忽略content内容
    len = len * 2;
  }
  return len;
};

},{"../util/converter":23,"./bcd":4}],4:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/7.
 */
'use strict';

exports.pack = function (raw, packager) {
  var fieldLength = raw.length;
  var length = '';

  // 变长域，如果外来数据长度大于定义长度，用定义长度
  // TODO 什么情况下，定长数值会大于字符串的长度。如N6，域内容用 ASC 表示，则域内容长度为 12？
  if (raw.length > packager.length){
    fieldLength = packager.length;
  }

 /* if (packager.type.indexOf('b') >=0 ){
    //如果length是奇数
    if (fieldlength % 2 != 0){
      fieldlength += 1;
    }
    //fieldlength = fieldlength/2;
  }*/

  // 左补 0
  if (fieldLength < 10) {
    length = '000' + fieldLength;
  } else if (fieldLength < 100) {
    length = '00' + fieldLength;
  } else if (fieldLength < 999) {
    length = '0' + fieldLength;
  }

  // 2 位长度
  if (packager.type.indexOf('lll') < 0){
    length = length.substr(2, 2);
  }
  return length;
};

exports.unpack = function (msg, packager) {

  var length = 0;
  if (packager.type.indexOf('lll') < 0) {
    // 取2个字节的长度。
    length = parseInt(msg.substring(0, 2), 10);
  }else{
    // 取4个字节的长度。
    length = parseInt(msg.substring(0, 4), 10);
  }

  if (packager.type.indexOf('b') >=0 ){
    length = length * 2;
  }
  else if (packager.content === 'asc' ){
    // type含b，就忽略content内容
    length = length * 2;
  }
  return length;
};

},{}],5:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/7.
 */
'use strict';
var converter = require('../util/converter');

exports.pack = function (raw, packager) {
   return converter.intToHexStr(raw.length);
};

// TODO
exports.unpack = function (msg, packager) {
  var length = 0;

  return length;
};

},{"../util/converter":23}],6:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/7.
 */

'use strict';

require('./bcd');
require('./asc');
require('./binary');

var defaultPackager = require('./../packager/default');

exports.pack = function (raw, packager) {
  return require('./' + defaultPackager.length_type).pack(raw, packager);
};

exports.unpack = function (msg, packager) {
   return require('./' + defaultPackager.length_type).unpack(msg, packager);
};

},{"./../packager/default":7,"./asc":3,"./bcd":4,"./binary":5}],7:[function(require,module,exports){
/**
 * 默认 iso8583 配置。
 *
 * 请参考银联规范。
 *
 * @type {Object}
 */

module.exports = {
  length_type: 'bcd',

  fields: {
    '0': {
      length: 4,
      name: '消息类型',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '1': {
      length: 64,
      name: '位图',
      bitmap: true,
      type: 'bitmap',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '2': {
      length: 19,
      name: '主账号',
      type: 'lln',
      align: 'left',
      content: 'bcd',
      fill: '0'
    },
    '3': {
      length: 6,
      name: '交易处理码',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '4': {
      length: 12,
      name: '交易金额',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '11': {
      length: 6,
      name: '受卡方系统跟踪号',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '12': {
      length: 6,
      name: '受卡方所在地时间',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '13': {
      length: 4,
      name: '受卡方所在地日期',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '14': {
      length: 4,
      name: '卡有效期',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '15': {
      length: 4,
      name: '清算日期',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '22': {
      length: 3,
      name: '服务点输入方式码',
      type: 'n',
      align: 'left',
      content: 'bcd',
      fill: '0'
    },
    '23': {
      length: 3,
      name: '卡序列号',
      type: 'n',
      align: 'right',
      content: 'bcd',
      fill: '0'
    },
    '25': {
      length: 2,
      name: '服务点条件码',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: ' '
    },
    '26': {
      length: 2,
      name: '域 26 服务点 PIN 获取码',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '32': {
      length: 11,
      name: '受理机构标识码',
      type: 'lln',
      align: 'left',
      content: 'bcd',
      fill: '0'
    },
    '35': {
      length: 37,
      name: '2 磁道数据',
      type: 'llans',
      align: 'left',
      content: 'bcd',
      fill: '0'
    },
    '36': {
      length: 104,
      name: '3 磁道数据',
      type: 'lllans',
      align: 'left',
      content: 'bcd',
      fill: ' '
    },
    '37': {
      length: 12,
      name: '检索参考号',
      type: 'an',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '38': {
      length: 6,
      name: '授权标识应答码',
      type: 'an',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '39': {
      length: 2,
      name: '应答码',
      type: 'an',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '41': {
      length: 8,
      name: '受卡机终端标识码',
      type: 'ans',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '42': {
      length: 15,
      name: '受卡方标识码',
      type: 'ans',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '44': {
      length: 25,
      name: '附加响应数据',
      type: 'llan',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '48': {
      length: 322,
      name: '附加数据 - 私有',
      type: 'llln',
      content: 'bcd',
      align: 'left',
      fill: ' '
    },
    '49': {
      length: 3,
      name: '交易货币代码',
      type: 'an',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '52': {
      length: 8,
      name: '个人标识码数据',
      type: 'b',
      align: 'left',
      fill: '0'
    },
    '53': {
      length: 16,
      name: '安全控制信息',
      type: 'n',
      content: 'bcd',
      align: 'right',
      fill: '0'
    },
    '54': {
      length: 20,
      name: '余额',
      type: 'lllan',
      content: 'asc',
      align: 'left',
      fill: ' '
    },
    '55': {
      length: 255,
      name: ' IC 卡数据域',
      type: 'lllb',
      content: 'bcd',
      align: 'left',
      fill: '0'
    },
    '58': {
      length: 100,
      name: '电子钱包标准的交易信息',
      type: 'lllb',
      align: 'left',
      fill: '0'
    },
    '60': {
      length: 17,
      name: '自定义域',
      type: 'llln',
      align: 'left',
      content: 'bcd',
      fill: '0'
    },
    '61': {
      length: 29,
      name: '原始信息域',
      type: 'llln',
      align: 'left',
      content: 'bcd',
      fill: ' '
    },
    '62': {
      length: 512,
      name: '自定义域',
      type: 'lllb',
      content: 'bcd',
      align: 'left',
      fill: '0'
    },
    '63': {
      length: 163,
      name: '自定义域',
      type: 'lllb',
      content: 'bcd',
      align: 'left',
      fill: '0'
    },
    '64': {
      length: 8,
      name: '报文鉴别码',
      type: 'b',
      align: 'left',
      fill: '0'
    }
  }
};

},{}],8:[function(require,module,exports){
'use strict';

var converter = require('../util/converter');
var util = require('../util/util');
var ans = require('./ans');

exports.unpack = function (msg, packager) {
  var unpacked = ans.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  if (/[^a-zA-Z]/m.test(raw)) {
    throw new Error('\n('+ packager.name + ')打包数据错['+raw + ']\n');
  }

  var packed = ans.pack(raw, packager);
  return packed;
};


},{"../util/converter":23,"../util/util":25,"./ans":10}],9:[function(require,module,exports){
'use strict';

var converter = require('../util/converter');
var util = require('../util/util');
var ans = require('./ans');

exports.unpack = function (msg, packager) {
  var unpacked = ans.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  if (/[^0-9a-zA-Z]/m.test(raw)) {
    throw new Error('\n('+ packager.name + ')打包数据错['+raw + ']\n');
  }

  var packed = ans.pack(raw, packager);
  return packed;
};





},{"../util/converter":23,"../util/util":25,"./ans":10}],10:[function(require,module,exports){
'use strict';

var util = require('../util/util');
var converter = require('../util/converter');

exports.unpack = function (msg, packager) {
  // 解包方法ASC or BCD
  var content = packager.content;

  // 取出数据
  var data = '';

  // 定长数据长度
  var length = util.getLength(packager);

  //如果要解的数据为空
  if (msg === '') {
    return {
      data: '',
      restData: ''
    };
  }

  // 域数据内容为 bcd，长度为奇数
  if ((content === 'bcd') && (length % 2 != 0)){
    //如果length是奇数
    if (packager.align === 'right'){
      data = msg.substring(1, length + 1);
    }else{
      data = msg.substring(0, length);
    }

    // 奇数变偶，实际的 bcd 域长度。
    length += 1;

  }else{
    data = msg.substring(0, length);
  }

  // 剩余数据
  var restData = msg.substring(length);

  // 解包结果
  var unpacked = data;

  // 与类型非 b，且域内容为 asc
  if ((content === 'asc') && (packager.type.indexOf('b') < 0)) {
    unpacked = converter.decodeAsc(data);
  }

  return {
    data: unpacked,
    restData: restData
  };
};

exports.pack = function (raw, packager) {
  // 打包方法
  var content = packager.content;

  // 填充字符
  var fill = packager.fill;

  // 对齐方式
  var align = packager.align;

  if (raw !== "") {
    //if (((packager.length > row.length) && (packager.type.indexOf('ll')) < 0) || (packager.type === 'lllb')) {
    if (((packager.length > raw.length) && (packager.type.indexOf('ll')) < 0)) {
      //非ll类型需要补齐
      raw = util.str_pad(raw, packager.length - raw.length, fill, align)
    }
  }
  /*
   if ((packager.type === 'lllb') && (raw.length % 2 != 0))
   {
   raw = util.str_pad(raw, 1, fill, align)
   }
   */
  if ((content === 'bcd') && (raw.length % 2 != 0) &&(packager.type !== 'lllb')) {
    //如果length是奇数
    raw = util.str_pad(raw, 1, fill, align);
  }
  // 数据长度
  var length = util.getLength(packager);

  // 打包结果
  var packed = raw;
  if ((content === 'asc') && (packager.type.indexOf('b') < 0)) {
    packed = converter.encodeAsc(raw);
  }
  return {
    msg: packed
  };
};


},{"../util/converter":23,"../util/util":25}],11:[function(require,module,exports){
'use strict';

var converter = require('../util/converter');
var util = require('../util/util');
var ans = require('./ans');

exports.unpack = function (msg, packager) {
  var unpacked = ans.unpack(msg, packager);
  return {
    data: converter.decodeAsc(unpacked.data),
    restData: unpacked.restData
  };
};

exports.pack = function (raw, packager) {
  var rawNew = converter.encodeAsc(raw);

  // 包定义长度 >　打包数据长度，并且包类型为不是 ll，TODO lll
  if ((raw !== "") && ((packager.length * 2) > rawNew.length) && (packager.type.indexOf('ll')) < 0) {
    // 定长b类型补齐到固定长度
    rawNew = util.str_pad(rawNew, (packager.length * 2) - rawNew.length, packager.fill, packager.align);
  }

  var packed = ans.pack(rawNew, packager);
  return packed;
};

},{"../util/converter":23,"../util/util":25,"./ans":10}],12:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/2.
 */

'use strict';

var BigNumber = require('../util/bignumber');
var util = require('../util/util');

/**
 * Bitmap 解包。
 *
 * @param msg 解包数据。
 * @param packager 解包器。
 *
 * @returns {
 * { data: string 十六进制串,
 *  bitmap: string 二进制串,
 *  fieldIds: Array 对应的十进制数组,
 *  restData: string 剩余数据}}
 */
exports.unpack = function (msg, packager) {

  var chunk = msg;
  var chunkBitmap, data = '', bitmap = '', chunkLength;

  do {
    // 位图对应的字符串长度(第一个位图固定取16)
    //chunkLength = (packager.length / 8) * 2;
    chunkLength = 16;

    // 取位图数据
    chunk = msg.substring(0, chunkLength);

    // 转换为二进制
    chunkBitmap = new BigNumber(chunk, 16).toString(2);

    // 补 0 BigNumber 最前面的16进制0不显示。
    chunkBitmap = util.str_pad(chunkBitmap,64- chunkBitmap.length, '0', 'right');

    data += chunk;
    bitmap += chunkBitmap;
    //msg = msg.substr(packager.length);
    msg = msg.substr(chunkLength);

    // 如果高位是 1，表示后边还有一个包。
  } while (parseInt(chunkBitmap[0]) > 0);

  var fieldIds = [];
  for (var i in bitmap) {
    if (i > 0 && parseInt(bitmap[i]) === 1) {
      fieldIds.push(parseInt(i) + 1);
    }
  }

  return {
    data: data,
    bitmap: bitmap,
    fieldIds: fieldIds,
    restData: msg
  };
};

/**
 *
 * @param fileds 域数组。
 * @param packager 打包配置。
 *
 * @returns result.msg 位图的十六进制串。
 * @returns result.string 位图二进制串。
 * @returns {{msg: string, bitmap: string}} result
 */
exports.pack = function (fileds, packager) {
  var bitmap = '';

  packager.length = 64;
  var lastIndex = 0;

  // 根据域 ID 数据构建二进制位图串。
  for (var filedId in fileds) {
    if (filedId > 1) {
      var offset = filedId - lastIndex - 1;
      for (var j = 0; j < offset; j++) {
        bitmap += '0';
      }
      if (fileds[filedId] === "" || fileds[filedId] === undefined || fileds[filedId] === null){
       bitmap += '0';
      }else {
        bitmap += '1';
      }
      lastIndex = filedId;
    }
  }

  var blength = bitmap.length;

  if (lastIndex > 64){
    bitmap = '1' + bitmap.substr(1);
    packager.length = 128;
  }

  // 取 packager.length 的最小倍数
  var length = Math.ceil(blength / (packager.length)) * packager.length;

  // 末位补 0。
  for (var i = 0; i < length - blength; i++) {
    bitmap += '0';
  }

  var msg = new BigNumber(bitmap, 2).toString(16).toUpperCase();

  //BigNumber 最前面的16进制0不显示，补足16(32)位
  msg = util.str_pad(msg, packager.length/4 - msg.length, '0', 'right');

  return {
    msg: msg,
    bitmap: bitmap
  };
};

},{"../util/bignumber":22,"../util/util":25}],13:[function(require,module,exports){
'use strict';
var llans = require('./llans');

/**
 *
 * @param msg
 * @param packager
 *
 * @returns {
 * {data: string 该域解包后的数据,
 *  chunk: string 该域的数据,
 *  restData: string 剩余数据}}.
 */
exports.unpack = function (msg, packager) {
  var unpacked = llans.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  if (/[^0-9a-zA-Z]/m.test(raw)) {
    throw new Error('\n('+ packager.name + ')打包数据错['+raw + ']\n');
  }

  var packed = llans.pack(raw, packager);
  return packed;
};


},{"./llans":14}],14:[function(require,module,exports){
'use strict';
var converter = require('../util/converter');
var util = require('../util/util');
var lengthPacker = require('../length-packer');
var ans = require('./ans');
var defaultPackager = require('./../packager/default');

/**
 *
 * @param msg
 * @param packager
 *
 * @returns {
 * {data: string 该域解包后的数据,
 *  chunk: string 该域的数据,
 *  restData: string 剩余数据}}.
 */
exports.unpack = function (msg, packager) {
  // 计算数据长度
  var len = lengthPacker.unpack(msg, packager);

  var offset = 0; //数据长度部分所占长度
  var length_type = defaultPackager.length_type;
  if (length_type === 'bcd'){
    if (packager.type.indexOf('lll') < 0) {
      offset = 2;
    }else{
      offset = 4;
    }
  }else if (length_type === 'asc'){
    if (packager.type.indexOf('lll') < 0) {
      offset = 4;
    }else{
      offset = 6;
    }
  }
  var actualFieldLen = len;
  if ((packager.content === 'bcd')){
    //如果length是奇数
    if (len % 2 != 0){
      len += 1;
    }
  }

  // 该域的字符串长度(包括填充部分)
  var filedLength = 0;
  filedLength = len + offset;

  // 域，包括数据和长度
  var filed = msg.substring(0, filedLength);

  // 域中的数据部分
  var filedData = msg.substr(offset, actualFieldLen);

  // 剩余数据
  var restData = msg.substring(filedLength);

  // 解包结果
  var unpacked = ans.unpack(filedData, packager).data;

  var result = {
    data: unpacked,
    chunk: filed,
    restData: restData
  };

  return result;
};

exports.pack = function (raw, packager) {
  // 计算数据长度
  var len = lengthPacker.pack(raw, packager);

  // 打包内容
  var packed = ans.pack(raw, packager);

  var msg = '';
  return {
    msg: len + packed.msg
  };
};


},{"../length-packer":6,"../util/converter":23,"../util/util":25,"./../packager/default":7,"./ans":10}],15:[function(require,module,exports){
'use strict';
var lllb = require('./lllb');

exports.unpack = function (msg, packager) {
  var unpacked = lllb.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  var packed = lllb.pack(raw, packager);
  return packed;
};


},{"./lllb":18}],16:[function(require,module,exports){
'use strict';

var converter = require('../util/converter');
var util = require('../util/util');
var a = require('./llan');

exports.unpack = function (msg, packager) {
  var unpacked = a.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  var packed = a.pack(raw, packager);
  return packed;
};


},{"../util/converter":23,"../util/util":25,"./llan":13}],17:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/2.
 */
'use strict';
var llans = require('./llans');

exports.unpack = function (msg, packager) {
  var unpacked = llans.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  var packed = llans.pack(raw, packager);
  return packed;
};

},{"./llans":14}],18:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/2.
 */

'use strict';

var lengthPacker = require('../length-packer');
var defaultPackager = require('./../packager/default');
var converter = require('../util/converter');
var util = require('../util/util');
var b = require('./b');

exports.unpack = function (msg, packager) {
  //var unpacked = a.unpack(msg, packager);
  //return unpacked;

  // 计算数据长度
  var len = lengthPacker.unpack(msg, packager);

  // TODO 方法提取。
  var offset = 0;
  var length_type = defaultPackager.length_type;
  if (length_type === 'bcd'){
    if (packager.type.indexOf('lll') < 0) {
      offset = 2;
    }else{
      offset = 4;
    }
  }else if (length_type === 'asc'){
    if (packager.type.indexOf('lll') < 0) {
      offset = 4;
    }else{
      offset = 6;
    }
  }
  if ((packager.content === 'bcd')){
    //如果length是奇数
    if (len % 2 != 0){
      len += 1;
    }
  }

  // 该域的字符串长度
  var filedLength = 0;
  filedLength = len + offset;

  // 域，包括数据和长度
  var filed = msg.substring(0, filedLength);

  // 域中的数据部分
  var filedData = msg.substring(offset, filedLength);

  // 剩余数据
  var restData = msg.substring(filedLength);

  // 解包结果
  var unpacked = b.unpack(filedData, packager).data;

  var result = {
    data: unpacked,
    chunk: filed,
    restData: restData
  };

  return result;
};

exports.pack = function (raw, packager) {
  //if (/[^0-9a-fA-F]/m.test(raw)) {
  //  throw new Error('\n('+ packager.name + ')打包数据错1['+raw + ']\n');
  //}

  //var packed = a.pack(raw, packager);
  //return packed;

  // 计算数据长度
  var len = lengthPacker.pack(raw, packager);

  // 打包内容
  var packed = b.pack(raw, packager);

  var msg = '';
  return {
    msg: len + packed.msg
  };
};


},{"../length-packer":6,"../util/converter":23,"../util/util":25,"./../packager/default":7,"./b":11}],19:[function(require,module,exports){
'use strict';

var lln = require('./lln');

exports.unpack = function (msg, packager) {
  var unpacked = lln.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  var packed = lln.pack(raw, packager);
  return packed;
};

},{"./lln":20}],20:[function(require,module,exports){
'use strict';

var llan = require('./llan');

exports.unpack = function (msg, packager) {
  var unpacked = llan.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  if (!/^\d+$/.test(raw)){
    throw new Error('\n('+ packager.name + ')�������ݴ�['+raw + ']\n');
  }

  var packed = llan.pack(raw, packager);
  return packed;
};

},{"./llan":13}],21:[function(require,module,exports){
'use strict';

var ans = require('./ans');

exports.unpack = function (msg, packager) {
  var unpacked = ans.unpack(msg, packager);
  return unpacked;
};

exports.pack = function (raw, packager) {
  if (!/^\d+$/.test(raw)) {
    throw new Error('\n(' + packager.name + ')�������ݴ�[' + raw + ']\n');
  }

  var packed = ans.pack(raw, packager);
  return packed;
};


},{"./ans":10}],22:[function(require,module,exports){
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */

;(function (global) {
    'use strict';

    /*
      bignumber.js v2.0.7
      A JavaScript library for arbitrary-precision arithmetic.
      https://github.com/MikeMcl/bignumber.js
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */


    var BigNumber, crypto, parseNumeric,
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        mathceil = Math.ceil,
        mathfloor = Math.floor,
        notBool = ' not a boolean or binary digit',
        roundingMode = 'rounding mode',
        tooManyDigits = 'number type has more than 15 significant digits',
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,

        /*
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
         * exception is thrown (if ERRORS is true).
         */
        MAX = 1E9;                                   // 0 to MAX_INT32


    /*
     * Create and return a BigNumber constructor.
     */
    function another(configObj) {
        var div,

            // id tracks the caller function, so its name can be included in error messages.
            id = 0,
            P = BigNumber.prototype,
            ONE = new BigNumber(1),


            /********************************* EDITABLE DEFAULTS **********************************/


            /*
             * The default values below must be integers within the inclusive ranges stated.
             * The values can also be changed at run-time using BigNumber.config.
             */

            // The maximum number of decimal places for operations involving division.
            DECIMAL_PLACES = 20,                     // 0 to MAX

            /*
             * The rounding mode used when rounding to the above decimal places, and when using
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
             * UP         0 Away from zero.
             * DOWN       1 Towards zero.
             * CEIL       2 Towards +Infinity.
             * FLOOR      3 Towards -Infinity.
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
             */
            ROUNDING_MODE = 4,                       // 0 to 8

            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

            // The exponent value at and beneath which toString returns exponential notation.
            // Number type: -7
            TO_EXP_NEG = -7,                         // 0 to -MAX

            // The exponent value at and above which toString returns exponential notation.
            // Number type: 21
            TO_EXP_POS = 21,                         // 0 to MAX

            // RANGE : [MIN_EXP, MAX_EXP]

            // The minimum exponent value, beneath which underflow to zero occurs.
            // Number type: -324  (5e-324)
            MIN_EXP = -1e7,                          // -1 to -MAX

            // The maximum exponent value, above which overflow to Infinity occurs.
            // Number type:  308  (1.7976931348623157e+308)
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
            MAX_EXP = 1e7,                           // 1 to MAX

            // Whether BigNumber Errors are ever thrown.
            ERRORS = true,                           // true or false

            // Change to intValidatorNoErrors if ERRORS is false.
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

            // Whether to use cryptographically-secure random number generation, if available.
            CRYPTO = false,                          // true or false

            /*
             * The modulo mode used when calculating the modulus: a mod n.
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
             * The remainder (r) is calculated as: r = a - n * q.
             *
             * UP        0 The remainder is positive if the dividend is negative, else is negative.
             * DOWN      1 The remainder has the same sign as the dividend.
             *             This modulo mode is commonly known as 'truncated division' and is
             *             equivalent to (a % n) in JavaScript.
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
             *             The remainder is always positive.
             *
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
             * modes are commonly used for the modulus operation.
             * Although the other rounding modes can also be used, they may not give useful results.
             */
            MODULO_MODE = 1,                         // 0 to 9

            // The maximum number of significant digits of the result of the toPower operation.
            // If POW_PRECISION is 0, there will be unlimited significant digits.
            POW_PRECISION = 100,                     // 0 to MAX

            // The format specification used by the BigNumber.prototype.toFormat method.
            FORMAT = {
                decimalSeparator: '.',
                groupSeparator: ',',
                groupSize: 3,
                secondaryGroupSize: 0,
                fractionGroupSeparator: '\xA0',      // non-breaking space
                fractionGroupSize: 0
            };


        /******************************************************************************************/


        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */
        function BigNumber( n, b ) {
            var c, e, i, num, len, str,
                x = this;

            // Enable constructor usage without new.
            if ( !( x instanceof BigNumber ) ) {

                // 'BigNumber() constructor call without new: {n}'
                if (ERRORS) raise( 26, 'constructor call without new', n );
                return new BigNumber( n, b );
            }

            // 'new BigNumber() base not an integer: {b}'
            // 'new BigNumber() base out of range: {b}'
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

                // Duplicate.
                if ( n instanceof BigNumber ) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = ( n = n.c ) ? n.slice() : n;
                    id = 0;
                    return;
                }

                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

                    // Fast path for integers.
                    if ( n === ~~n ) {
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );
                        x.e = e;
                        x.c = [n];
                        id = 0;
                        return;
                    }

                    str = n + '';
                } else {
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
                }
            } else {
                b = b | 0;
                str = n + '';

                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                // Allow exponential notation to be used with base 10 argument.
                if ( b == 10 ) {
                    x = new BigNumber( n instanceof BigNumber ? n : str );
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
                }

                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                // Any number in exponential form will fail due to the [Ee][+-].
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
                    return parseNumeric( x, str, num, b );
                }

                if (num) {
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
                        raise( id, tooManyDigits, n );
                    }

                    // Prevent later check for length on converted number.
                    num = false;
                } else {
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
                }

                str = convertBase( str, 10, b, x.s );
            }

            // Decimal point?
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

            // Exponential form?
            if ( ( i = str.search( /e/i ) ) > 0 ) {

                // Determine exponent.
                if ( e < 0 ) e = i;
                e += +str.slice( i + 1 );
                str = str.substring( 0, i );
            } else if ( e < 0 ) {

                // Integer.
                e = str.length;
            }

            // Determine leading zeros.
            for ( i = 0; str.charCodeAt(i) === 48; i++ );

            // Determine trailing zeros.
            for ( len = str.length; str.charCodeAt(--len) === 48; );
            str = str.slice( i, len + 1 );

            if (str) {
                len = str.length;

                // Disallow numbers with over 15 significant digits if number type.
                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );

                e = e - i - 1;

                 // Overflow?
                if ( e > MAX_EXP ) {

                    // Infinity.
                    x.c = x.e = null;

                // Underflow?
                } else if ( e < MIN_EXP ) {

                    // Zero.
                    x.c = [ x.e = 0 ];
                } else {
                    x.e = e;
                    x.c = [];

                    // Transform base

                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = ( e + 1 ) % LOG_BASE;
                    if ( e < 0 ) i += LOG_BASE;

                    if ( i < len ) {
                        if (i) x.c.push( +str.slice( 0, i ) );

                        for ( len -= LOG_BASE; i < len; ) {
                            x.c.push( +str.slice( i, i += LOG_BASE ) );
                        }

                        str = str.slice(i);
                        i = LOG_BASE - str.length;
                    } else {
                        i -= len;
                    }

                    for ( ; i--; str += '0' );
                    x.c.push( +str );
                }
            } else {

                // Zero.
                x.c = [ x.e = 0 ];
            }

            id = 0;
        }


        // CONSTRUCTOR PROPERTIES


        BigNumber.another = another;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;


        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */
        BigNumber.config = function () {
            var v, p,
                i = 0,
                r = {},
                a = arguments,
                o = a[0],
                has = o && typeof o == 'object'
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
            // 'config() DECIMAL_PLACES not an integer: {v}'
            // 'config() DECIMAL_PLACES out of range: {v}'
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
                DECIMAL_PLACES = v | 0;
            }
            r[p] = DECIMAL_PLACES;

            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
            // 'config() ROUNDING_MODE not an integer: {v}'
            // 'config() ROUNDING_MODE out of range: {v}'
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
                ROUNDING_MODE = v | 0;
            }
            r[p] = ROUNDING_MODE;

            // EXPONENTIAL_AT {number|number[]}
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
            // 'config() EXPONENTIAL_AT not an integer: {v}'
            // 'config() EXPONENTIAL_AT out of range: {v}'
            if ( has( p = 'EXPONENTIAL_AT' ) ) {

                if ( isArray(v) ) {
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
                        TO_EXP_NEG = v[0] | 0;
                        TO_EXP_POS = v[1] | 0;
                    }
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
                }
            }
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
            // 'config() RANGE not an integer: {v}'
            // 'config() RANGE cannot be zero: {v}'
            // 'config() RANGE out of range: {v}'
            if ( has( p = 'RANGE' ) ) {

                if ( isArray(v) ) {
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
                        MIN_EXP = v[0] | 0;
                        MAX_EXP = v[1] | 0;
                    }
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );
                }
            }
            r[p] = [ MIN_EXP, MAX_EXP ];

            // ERRORS {boolean|number} true, false, 1 or 0.
            // 'config() ERRORS not a boolean or binary digit: {v}'
            if ( has( p = 'ERRORS' ) ) {

                if ( v === !!v || v === 1 || v === 0 ) {
                    id = 0;
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
                } else if (ERRORS) {
                    raise( 2, p + notBool, v );
                }
            }
            r[p] = ERRORS;

            // CRYPTO {boolean|number} true, false, 1 or 0.
            // 'config() CRYPTO not a boolean or binary digit: {v}'
            // 'config() crypto unavailable: {crypto}'
            if ( has( p = 'CRYPTO' ) ) {

                if ( v === !!v || v === 1 || v === 0 ) {
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );
                } else if (ERRORS) {
                    raise( 2, p + notBool, v );
                }
            }
            r[p] = CRYPTO;

            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
            // 'config() MODULO_MODE not an integer: {v}'
            // 'config() MODULO_MODE out of range: {v}'
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
                MODULO_MODE = v | 0;
            }
            r[p] = MODULO_MODE;

            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
            // 'config() POW_PRECISION not an integer: {v}'
            // 'config() POW_PRECISION out of range: {v}'
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
                POW_PRECISION = v | 0;
            }
            r[p] = POW_PRECISION;

            // FORMAT {object}
            // 'config() FORMAT not an object: {v}'
            if ( has( p = 'FORMAT' ) ) {

                if ( typeof v == 'object' ) {
                    FORMAT = v;
                } else if (ERRORS) {
                    raise( 2, p + ' not an object', v );
                }
            }
            r[p] = FORMAT;

            return r;
        };


        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */
        BigNumber.random = (function () {
            var pow2_53 = 0x20000000000000;

            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
              ? function () { return mathfloor( Math.random() * pow2_53 ); }
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                  (Math.random() * 0x800000 | 0); };

            return function (dp) {
                var a, b, e, k, v,
                    i = 0,
                    c = [],
                    rand = new BigNumber(ONE);

                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
                k = mathceil( dp / LOG_BASE );

                if (CRYPTO) {

                    // Browsers supporting crypto.getRandomValues.
                    if ( crypto && crypto.getRandomValues ) {

                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

                        for ( ; i < k; ) {

                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if ( v >= 9e15 ) {
                                b = crypto.getRandomValues( new Uint32Array(2) );
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {

                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push( v % 1e14 );
                                i += 2;
                            }
                        }
                        i = k / 2;

                    // Node.js supporting crypto.randomBytes.
                    } else if ( crypto && crypto.randomBytes ) {

                        // buffer
                        a = crypto.randomBytes( k *= 7 );

                        for ( ; i < k; ) {

                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

                            if ( v >= 9e15 ) {
                                crypto.randomBytes(7).copy( a, i );
                            } else {

                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push( v % 1e14 );
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else if (ERRORS) {
                        raise( 14, 'crypto unavailable', crypto );
                    }
                }

                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                if (!i) {

                    for ( ; i < k; ) {
                        v = random53bitInt();
                        if ( v < 9e15 ) c[i++] = v % 1e14;
                    }
                }

                k = c[--i];
                dp %= LOG_BASE;

                // Convert trailing digits to zeros according to dp.
                if ( k && dp ) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor( k / v ) * v;
                }

                // Remove trailing elements which are zero.
                for ( ; c[i] === 0; c.pop(), i-- );

                // Zero?
                if ( i < 0 ) {
                    c = [ e = 0 ];
                } else {

                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

                    // Count the digits of the first element of c to determine leading zeros, and...
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

                    // adjust the exponent accordingly.
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;
                }

                rand.e = e;
                rand.c = c;
                return rand;
            };
        })();


        // PRIVATE FUNCTIONS


        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase( str, baseOut, baseIn, sign ) {
            var d, e, k, r, x, xc, y,
                i = str.indexOf( '.' ),
                dp = DECIMAL_PLACES,
                rm = ROUNDING_MODE;

            if ( baseIn < 37 ) str = str.toLowerCase();

            // Non-integer.
            if ( i >= 0 ) {
                k = POW_PRECISION;

                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace( '.', '' );
                y = new BigNumber(baseIn);
                x = y.pow( str.length - i );
                POW_PRECISION = k;

                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
                y.e = y.c.length;
            }

            // Convert the number as integer.
            xc = toBaseOut( str, baseIn, baseOut );
            e = k = xc.length;

            // Remove trailing zeros.
            for ( ; xc[--k] == 0; xc.pop() );
            if ( !xc[0] ) return '0';

            if ( i < 0 ) {
                --e;
            } else {
                x.c = xc;
                x.e = e;

                // sign is needed for correct rounding.
                x.s = sign;
                x = div( x, y, dp, rm, baseOut );
                xc = x.c;
                r = x.r;
                e = x.e;
            }

            d = e + dp + 1;

            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;

            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                         rm == ( x.s < 0 ? 8 : 7 ) );

            if ( d < 1 || !xc[0] ) {

                // 1^-dp or 0.
                str = r ? toFixedPoint( '1', -dp ) : '0';
            } else {
                xc.length = d;

                if (r) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for ( --baseOut; ++xc[--d] > baseOut; ) {
                        xc[d] = 0;

                        if ( !d ) {
                            ++e;
                            xc.unshift(1);
                        }
                    }
                }

                // Determine trailing zeros.
                for ( k = xc.length; !xc[--k]; );

                // E.g. [4, 11, 15] becomes 4bf.
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
                str = toFixedPoint( str, e );
            }

            // The caller will add the sign.
            return str;
        }


        // Perform division in the specified base. Called by div and convertBase.
        div = (function () {

            // Assume non-zero x and k.
            function multiply( x, k, base ) {
                var m, temp, xlo, xhi,
                    carry = 0,
                    i = x.length,
                    klo = k % SQRT_BASE,
                    khi = k / SQRT_BASE | 0;

                for ( x = x.slice(); i--; ) {
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
                    x[i] = temp % base;
                }

                if (carry) x.unshift(carry);

                return x;
            }

            function compare( a, b, aL, bL ) {
                var i, cmp;

                if ( aL != bL ) {
                    cmp = aL > bL ? 1 : -1;
                } else {

                    for ( i = cmp = 0; i < aL; i++ ) {

                        if ( a[i] != b[i] ) {
                            cmp = a[i] > b[i] ? 1 : -1;
                            break;
                        }
                    }
                }
                return cmp;
            }

            function subtract( a, b, aL, base ) {
                var i = 0;

                // Subtract b from a.
                for ( ; aL--; ) {
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }

                // Remove leading zeros.
                for ( ; !a[0] && a.length > 1; a.shift() );
            }

            // x: dividend, y: divisor.
            return function ( x, y, dp, rm, base ) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                    yL, yz,
                    s = x.s == y.s ? 1 : -1,
                    xc = x.c,
                    yc = y.c;

                // Either NaN, Infinity or 0?
                if ( !xc || !xc[0] || !yc || !yc[0] ) {

                    return new BigNumber(

                      // Return NaN if either NaN, or both Infinity or 0.
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                    );
                }

                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;

                if ( !base ) {
                    base = BASE;
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
                    s = s / LOG_BASE | 0;
                }

                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
                if ( yc[i] > ( xc[i] || 0 ) ) e--;

                if ( s < 0 ) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;

                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

                    n = mathfloor( base / ( yc[0] + 1 ) );

                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                    if ( n > 1 ) {
                        yc = multiply( yc, n, base );
                        xc = multiply( xc, n, base );
                        yL = yc.length;
                        xL = xc.length;
                    }

                    xi = yL;
                    rem = xc.slice( 0, yL );
                    remL = rem.length;

                    // Add zeros to make remainder as long as divisor.
                    for ( ; remL < yL; rem[remL++] = 0 );
                    yz = yc.slice();
                    yz.unshift(0);
                    yc0 = yc[0];
                    if ( yc[1] >= base / 2 ) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                    do {
                        n = 0;

                        // Compare divisor and remainder.
                        cmp = compare( yc, rem, yL, remL );

                        // If divisor < remainder.
                        if ( cmp < 0 ) {

                            // Calculate trial digit, n.

                            rem0 = rem[0];
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor( rem0 / yc0 );

                            //  Algorithm:
                            //  1. product = divisor * trial digit (n)
                            //  2. if product > remainder: product -= divisor, n--
                            //  3. remainder -= product
                            //  4. if product was < remainder at 2:
                            //    5. compare new remainder and divisor
                            //    6. If remainder > divisor: remainder -= divisor, n++

                            if ( n > 1 ) {

                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;

                                // product = divisor * trial digit.
                                prod = multiply( yc, n, base );
                                prodL = prod.length;
                                remL = rem.length;

                                // Compare product and remainder.
                                // If product > remainder.
                                // Trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {
                                    n--;

                                    // Subtract divisor from product.
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {

                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if ( n == 0 ) {

                                    // divisor < remainder, so n must be at least 1.
                                    cmp = n = 1;
                                }

                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }

                            if ( prodL < remL ) prod.unshift(0);

                            // Subtract product from remainder.
                            subtract( rem, prod, remL, base );
                            remL = rem.length;

                             // If product was < remainder.
                            if ( cmp == -1 ) {

                                // Compare divisor and new remainder.
                                // If divisor < new remainder, subtract divisor from remainder.
                                // Trial digit n too low.
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                while ( compare( yc, rem, yL, remL ) < 1 ) {
                                    n++;

                                    // Subtract divisor from remainder.
                                    subtract( rem, yL < remL ? yz : yc, remL, base );
                                    remL = rem.length;
                                }
                            }
                        } else if ( cmp === 0 ) {
                            n++;
                            rem = [0];
                        } // else cmp === 1 and n will be 0

                        // Add the next digit, n, to the result array.
                        qc[i++] = n;

                        // Update the remainder.
                        if ( rem[0] ) {
                            rem[remL++] = xc[xi] || 0;
                        } else {
                            rem = [ xc[xi] ];
                            remL = 1;
                        }
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                    more = rem[0] != null;

                    // Leading zero?
                    if ( !qc[0] ) qc.shift();
                }

                if ( base == BASE ) {

                    // To calculate q.e, first get the number of digits of qc[0].
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }

                return q;
            };
        })();


        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */
        function format( n, i, rm, caller ) {
            var c0, e, ne, len, str;

            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
              ? rm | 0 : ROUNDING_MODE;

            if ( !n.c ) return n.toString();
            c0 = n.c[0];
            ne = n.e;

            if ( i == null ) {
                str = coeffToString( n.c );
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
                  ? toExponential( str, ne )
                  : toFixedPoint( str, ne );
            } else {
                n = round( new BigNumber(n), i, rm );

                // n.e may have changed if the value was rounded up.
                e = n.e;

                str = coeffToString( n.c );
                len = str.length;

                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.

                // Exponential notation.
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

                    // Append zeros?
                    for ( ; len < i; str += '0', len++ );
                    str = toExponential( str, e );

                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint( str, e );

                    // Append zeros?
                    if ( e + 1 > len ) {
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
                    } else {
                        i += e - len;
                        if ( i > 0 ) {
                            if ( e + 1 == len ) str += '.';
                            for ( ; i--; str += '0' );
                        }
                    }
                }
            }

            return n.s < 0 && c0 ? '-' + str : str;
        }


        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin( args, method ) {
            var m, n,
                i = 0;

            if ( isArray( args[0] ) ) args = args[0];
            m = new BigNumber( args[0] );

            for ( ; ++i < args.length; ) {
                n = new BigNumber( args[i] );

                // If any number is NaN, return NaN.
                if ( !n.s ) {
                    m = n;
                    break;
                } else if ( method.call( m, n ) ) {
                    m = n;
                }
            }

            return m;
        }


        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */
        function intValidatorWithErrors( n, min, max, caller, name ) {
            if ( n < min || n > max || n != truncate(n) ) {
                raise( caller, ( name || 'decimal places' ) +
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
            }

            return true;
        }


        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise( n, c, e ) {
            var i = 1,
                j = c.length;

             // Remove trailing zeros.
            for ( ; !c[--j]; c.pop() );

            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for ( j = c[0]; j >= 10; j /= 10, i++ );

            // Overflow?
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

                // Infinity.
                n.c = n.e = null;

            // Underflow?
            } else if ( e < MIN_EXP ) {

                // Zero.
                n.c = [ n.e = 0 ];
            } else {
                n.e = e;
                n.c = c;
            }

            return n;
        }


        // Handle values that fail the validity test in BigNumber.
        parseNumeric = (function () {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                dotAfter = /^([^.]+)\.$/,
                dotBefore = /^\.([^.]+)$/,
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

            return function ( x, str, num, b ) {
                var base,
                    s = num ? str : str.replace( whitespaceOrPlus, '' );

                // No exception on ±Infinity or NaN.
                if ( isInfinityOrNaN.test(s) ) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                } else {
                    if ( !num ) {

                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });

                        if (b) {
                            base = b;

                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
                        }

                        if ( str != s ) return new BigNumber( s, base );
                    }

                    // 'new BigNumber() not a number: {n}'
                    // 'new BigNumber() not a base {b} number: {n}'
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
                    x.s = null;
                }

                x.c = x.e = null;
                id = 0;
            }
        })();


        // Throw a BigNumber Error.
        function raise( caller, msg, val ) {
            var error = new Error( [
                'new BigNumber',     // 0
                'cmp',               // 1
                'config',            // 2
                'div',               // 3
                'divToInt',          // 4
                'eq',                // 5
                'gt',                // 6
                'gte',               // 7
                'lt',                // 8
                'lte',               // 9
                'minus',             // 10
                'mod',               // 11
                'plus',              // 12
                'precision',         // 13
                'random',            // 14
                'round',             // 15
                'shift',             // 16
                'times',             // 17
                'toDigits',          // 18
                'toExponential',     // 19
                'toFixed',           // 20
                'toFormat',          // 21
                'toFraction',        // 22
                'pow',               // 23
                'toPrecision',       // 24
                'toString',          // 25
                'BigNumber'          // 26
            ][caller] + '() ' + msg + ': ' + val );

            error.name = 'BigNumber Error';
            id = 0;
            throw error;
        }


        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round( x, sd, rm, r ) {
            var d, i, j, k, n, ni, rd,
                xc = x.c,
                pows10 = POWS_TEN;

            // if x is not Infinity or NaN...
            if (xc) {

                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {

                    // Get the number of digits of the first element of xc.
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
                    i = sd - d;

                    // If the rounding digit is in the first element of xc...
                    if ( i < 0 ) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ ni = 0 ];

                        // Get the rounding digit at index j of n.
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;
                    } else {
                        ni = mathceil( ( i + 1 ) / LOG_BASE );

                        if ( ni >= xc.length ) {

                            if (r) {

                                // Needed by sqrt.
                                for ( ; xc.length <= ni; xc.push(0) );
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else {
                                break out;
                            }
                        } else {
                            n = k = xc[ni];

                            // Get the number of digits of n.
                            for ( d = 1; k >= 10; k /= 10, d++ );

                            // Get the index of rd within n.
                            i %= LOG_BASE;

                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;

                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
                        }
                    }

                    r = r || sd < 0 ||

                    // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

                    r = rm < 4
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

                        // Check whether the digit to the left of the rounding digit is odd.
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
                          rm == ( x.s < 0 ? 8 : 7 ) );

                    if ( sd < 1 || !xc[0] ) {
                        xc.length = 0;

                        if (r) {

                            // Convert sd to decimal places.
                            sd -= x.e + 1;

                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[ sd % LOG_BASE ];
                            x.e = -sd || 0;
                        } else {

                            // Zero.
                            xc[0] = x.e = 0;
                        }

                        return x;
                    }

                    // Remove excess digits.
                    if ( i == 0 ) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[ LOG_BASE - i ];

                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
                    }

                    // Round up?
                    if (r) {

                        for ( ; ; ) {

                            // If the digit to be rounded up is in the first element of xc...
                            if ( ni == 0 ) {

                                // i will be the length of xc[0] before k is added.
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
                                j = xc[0] += k;
                                for ( k = 1; j >= 10; j /= 10, k++ );

                                // if i != k the length has increased.
                                if ( i != k ) {
                                    x.e++;
                                    if ( xc[0] == BASE ) xc[0] = 1;
                                }

                                break;
                            } else {
                                xc[ni] += k;
                                if ( xc[ni] != BASE ) break;
                                xc[ni--] = 0;
                                k = 1;
                            }
                        }
                    }

                    // Remove trailing zeros.
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );
                }

                // Overflow? Infinity.
                if ( x.e > MAX_EXP ) {
                    x.c = x.e = null;

                // Underflow? Zero.
                } else if ( x.e < MIN_EXP ) {
                    x.c = [ x.e = 0 ];
                }
            }

            return x;
        }


        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
            var x = new BigNumber(this);
            if ( x.s < 0 ) x.s = 1;
            return x;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */
        P.ceil = function () {
            return round( new BigNumber(this), this.e + 1, 2 );
        };


        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */
        P.comparedTo = P.cmp = function ( y, b ) {
            id = 1;
            return compare( this, new BigNumber( y, b ) );
        };


        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */
        P.decimalPlaces = P.dp = function () {
            var n, v,
                c = this.c;

            if ( !c ) return null;
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

            // Subtract the number of trailing zeros of the last number.
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
            if ( n < 0 ) n = 0;

            return n;
        };


        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function ( y, b ) {
            id = 3;
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
        };


        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
            id = 4;
            return div( this, new BigNumber( y, b ), 0, 1 );
        };


        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.equals = P.eq = function ( y, b ) {
            id = 5;
            return compare( this, new BigNumber( y, b ) ) === 0;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */
        P.floor = function () {
            return round( new BigNumber(this), this.e + 1, 3 );
        };


        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.greaterThan = P.gt = function ( y, b ) {
            id = 6;
            return compare( this, new BigNumber( y, b ) ) > 0;
        };


        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
            id = 7;
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

        };


        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */
        P.isFinite = function () {
            return !!this.c;
        };


        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = P.isInt = function () {
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
        };


        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */
        P.isNaN = function () {
            return !this.s;
        };


        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */
        P.isNegative = P.isNeg = function () {
            return this.s < 0;
        };


        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */
        P.isZero = function () {
            return !!this.c && this.c[0] == 0;
        };


        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.lessThan = P.lt = function ( y, b ) {
            id = 8;
            return compare( this, new BigNumber( y, b ) ) < 0;
        };


        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {
            id = 9;
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
        };


        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = P.sub = function ( y, b ) {
            var i, j, t, xLTy,
                x = this,
                a = x.s;

            id = 10;
            y = new BigNumber( y, b );
            b = y.s;

            // Either NaN?
            if ( !a || !b ) return new BigNumber(NaN);

            // Signs differ?
            if ( a != b ) {
                y.s = -b;
                return x.plus(y);
            }

            var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

            if ( !xe || !ye ) {

                // Either Infinity?
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

                // Either zero?
                if ( !xc[0] || !yc[0] ) {

                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                      ROUNDING_MODE == 3 ? -0 : 0 );
                }
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Determine which is the bigger number.
            if ( a = xe - ye ) {

                if ( xLTy = a < 0 ) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }

                t.reverse();

                // Prepend zeros to equalise exponents.
                for ( b = a; b--; t.push(0) );
                t.reverse();
            } else {

                // Exponents equal. Check digit by digit.
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

                for ( a = b = 0; b < j; b++ ) {

                    if ( xc[b] != yc[b] ) {
                        xLTy = xc[b] < yc[b];
                        break;
                    }
                }
            }

            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

            b = ( j = yc.length ) - ( i = xc.length );

            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
            b = BASE - 1;

            // Subtract yc from xc.
            for ( ; j > a; ) {

                if ( xc[--j] < yc[j] ) {
                    for ( i = j; i && !xc[--i]; xc[i] = b );
                    --xc[i];
                    xc[j] += BASE;
                }

                xc[j] -= yc[j];
            }

            // Remove leading zeros and adjust exponent accordingly.
            for ( ; xc[0] == 0; xc.shift(), --ye );

            // Zero?
            if ( !xc[0] ) {

                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [ y.e = 0 ];
                return y;
            }

            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise( y, xc, ye );
        };


        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function ( y, b ) {
            var q, s,
                x = this;

            id = 11;
            y = new BigNumber( y, b );

            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if ( !x.c || !y.s || y.c && !y.c[0] ) {
                return new BigNumber(NaN);

            // Return x if y is Infinity or x is zero.
            } else if ( !y.c || x.c && !x.c[0] ) {
                return new BigNumber(x);
            }

            if ( MODULO_MODE == 9 ) {

                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div( x, y, 0, 3 );
                y.s = s;
                q.s *= s;
            } else {
                q = div( x, y, 0, MODULO_MODE );
            }

            return x.minus( q.times(y) );
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = P.neg = function () {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };


        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = P.add = function ( y, b ) {
            var t,
                x = this,
                a = x.s;

            id = 12;
            y = new BigNumber( y, b );
            b = y.s;

            // Either NaN?
            if ( !a || !b ) return new BigNumber(NaN);

            // Signs differ?
             if ( a != b ) {
                y.s = -b;
                return x.minus(y);
            }

            var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

            if ( !xe || !ye ) {

                // Return ±Infinity if either ±Infinity.
                if ( !xc || !yc ) return new BigNumber( a / 0 );

                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if ( a = xe - ye ) {
                if ( a > 0 ) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }

                t.reverse();
                for ( ; a--; t.push(0) );
                t.reverse();
            }

            a = xc.length;
            b = yc.length;

            // Point xc to the longer array, and b to the shorter length.
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for ( a = 0; b; ) {
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
                xc[b] %= BASE;
            }

            if (a) {
                xc.unshift(a);
                ++ye;
            }

            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise( y, xc, ye );
        };


        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */
        P.precision = P.sd = function (z) {
            var n, v,
                x = this,
                c = x.c;

            // 'precision() argument not a boolean or binary digit: {z}'
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
                if (ERRORS) raise( 13, 'argument' + notBool, z );
                if ( z != !!z ) z = null;
            }

            if ( !c ) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;

            if ( v = c[v] ) {

                // Subtract the number of trailing zeros of the last element.
                for ( ; v % 10 == 0; v /= 10, n-- );

                // Add the number of digits of the first element.
                for ( v = c[0]; v >= 10; v /= 10, n++ );
            }

            if ( z && x.e + 1 > n ) n = x.e + 1;

            return n;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */
        P.round = function ( dp, rm ) {
            var n = new BigNumber(this);

            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
                round( n, ~~dp + this.e + 1, rm == null ||
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
            }

            return n;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */
        P.shift = function (k) {
            var n = this;
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

              // k < 1e+21, or truncate(k) will produce exponential notation.
              ? n.times( '1e' + truncate(k) )
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
                ? n.s * ( k < 0 ? 0 : 1 / 0 )
                : n );
        };


        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
            var m, n, r, rep, t,
                x = this,
                c = x.c,
                s = x.s,
                e = x.e,
                dp = DECIMAL_PLACES + 4,
                half = new BigNumber('0.5');

            // Negative/NaN/Infinity/zero?
            if ( s !== 1 || !c || !c[0] ) {
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
            }

            // Initial estimate.
            s = Math.sqrt( +x );

            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if ( s == 0 || s == 1 / 0 ) {
                n = coeffToString(c);
                if ( ( n.length + e ) % 2 == 0 ) n += '0';
                s = Math.sqrt(n);
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

                if ( s == 1 / 0 ) {
                    n = '1e' + e;
                } else {
                    n = s.toExponential();
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;
                }

                r = new BigNumber(n);
            } else {
                r = new BigNumber( s + '' );
            }

            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if ( r.c[0] ) {
                e = r.e;
                s = e + dp;
                if ( s < 3 ) s = 0;

                // Newton-Raphson iteration.
                for ( ; ; ) {
                    t = r;
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );

                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
                         coeffToString( r.c ) ).slice( 0, s ) ) {

                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if ( r.e < e ) --s;
                        n = n.slice( s - 3, s + 1 );

                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if ( n == '9999' || !rep && n == '4999' ) {

                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if ( !rep ) {
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );

                                if ( t.times(t).eq(x) ) {
                                    r = t;
                                    break;
                                }
                            }

                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {

                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                                // Truncate to the first rounding digit.
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );
                                m = !r.times(r).eq(x);
                            }

                            break;
                        }
                    }
                }
            }

            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
        };


        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */
        P.times = P.mul = function ( y, b ) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                base, sqrtBase,
                x = this,
                xc = x.c,
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;

            // Either NaN, ±Infinity or ±0?
            if ( !xc || !yc || !xc[0] || !yc[0] ) {

                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
                    y.c = y.e = y.s = null;
                } else {
                    y.s *= x.s;

                    // Return ±Infinity if either is ±Infinity.
                    if ( !xc || !yc ) {
                        y.c = y.e = null;

                    // Return ±0 if either is ±0.
                    } else {
                        y.c = [0];
                        y.e = 0;
                    }
                }

                return y;
            }

            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;

            // Ensure xc points to longer array and xcL to its length.
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

            // Initialise the result array with zeros.
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

            base = BASE;
            sqrtBase = SQRT_BASE;

            for ( i = ycL; --i >= 0; ) {
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;

                for ( k = xcL, j = i + k; j > i; ) {
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
                    zc[j--] = xlo % base;
                }

                zc[j] = c;
            }

            if (c) {
                ++e;
            } else {
                zc.shift();
            }

            return normalise( y, zc, e );
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */
        P.toDigits = function ( sd, rm ) {
            var n = new BigNumber(this);
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
            return sd ? round( n, sd, rm ) : n;
        };


        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */
        P.toExponential = function ( dp, rm ) {
            return format( this,
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */
        P.toFixed = function ( dp, rm ) {
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
              ? ~~dp + this.e + 1 : null, rm, 20 );
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */
        P.toFormat = function ( dp, rm ) {
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
              ? ~~dp + this.e + 1 : null, rm, 21 );

            if ( this.c ) {
                var i,
                    arr = str.split('.'),
                    g1 = +FORMAT.groupSize,
                    g2 = +FORMAT.secondaryGroupSize,
                    groupSeparator = FORMAT.groupSeparator,
                    intPart = arr[0],
                    fractionPart = arr[1],
                    isNeg = this.s < 0,
                    intDigits = isNeg ? intPart.slice(1) : intPart,
                    len = intDigits.length;

                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                if ( g1 > 0 && len > 0 ) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr( 0, i );

                    for ( ; i < len; i += g1 ) {
                        intPart += groupSeparator + intDigits.substr( i, g1 );
                    }

                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }

                str = fractionPart
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                      '$&' + FORMAT.fractionGroupSeparator )
                    : fractionPart )
                  : intPart;
            }

            return str;
        };


        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */
        P.toFraction = function (md) {
            var arr, d0, d2, e, exp, n, n0, q, s,
                k = ERRORS,
                x = this,
                xc = x.c,
                d = new BigNumber(ONE),
                n1 = d0 = new BigNumber(ONE),
                d1 = n0 = new BigNumber(ONE);

            if ( md != null ) {
                ERRORS = false;
                n = new BigNumber(md);
                ERRORS = k;

                if ( !( k = n.isInt() ) || n.lt(ONE) ) {

                    if (ERRORS) {
                        raise( 22,
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
                    }

                    // ERRORS is false:
                    // If md is a finite non-integer >= 1, round it to an integer and use it.
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
                }
            }

            if ( !xc ) return x.toString();
            s = coeffToString(xc);

            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);

            // n0 = d1 = 0
            n0.c[0] = 0;

            for ( ; ; )  {
                q = div( n, d, 0, 1 );
                d2 = d0.plus( q.times(d1) );
                if ( d2.cmp(md) == 1 ) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus( q.times( d2 = n1 ) );
                n0 = d2;
                d = n.minus( q.times( d2 = d ) );
                n = d2;
            }

            d2 = div( md.minus(d0), d1, 0, 1 );
            n0 = n0.plus( d2.times(n1) );
            d0 = d0.plus( d2.times(d1) );
            n0.s = n1.s = x.s;
            e *= 2;

            // Determine which fraction is closer to x, n0/d0 or n1/d1
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
                    ? [ n1.toString(), d1.toString() ]
                    : [ n0.toString(), d0.toString() ];

            MAX_EXP = exp;
            return arr;
        };


        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
            var x = this;

            // Ensure zero has correct sign.
            return +x || ( x.s ? x.s * 0 : NaN );
        };


        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
         *
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
         * (Performs 54 loop iterations for n of 9007199254740992.)
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         */
        P.toPower = P.pow = function (n) {
            var k, y,
                i = mathfloor( n < 0 ? -n : +n ),
                x = this;

            // Pass ±Infinity to Math.pow if exponent is out of range.
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
                parseFloat(n) != n && !( n = NaN ) ) ) {
                return new BigNumber( Math.pow( +x, n ) );
            }

            // Truncating each coefficient array to a length of k after each multiplication equates
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
            y = new BigNumber(ONE);

            for ( ; ; ) {

                if ( i % 2 ) {
                    y = y.times(x);
                    if ( !y.c ) break;
                    if ( k && y.c.length > k ) y.c.length = k;
                }

                i = mathfloor( i / 2 );
                if ( !i ) break;

                x = x.times(x);
                if ( k && x.c && x.c.length > k ) x.c.length = k;
            }

            if ( n < 0 ) y = ONE.div(y);
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
        };


        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */
        P.toPrecision = function ( sd, rm ) {
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
              ? sd | 0 : null, rm, 24 );
        };


        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */
        P.toString = function (b) {
            var str,
                n = this,
                s = n.s,
                e = n.e;

            // Infinity or NaN?
            if ( e === null ) {

                if (s) {
                    str = 'Infinity';
                    if ( s < 0 ) str = '-' + str;
                } else {
                    str = 'NaN';
                }
            } else {
                str = coeffToString( n.c );

                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                      ? toExponential( str, e )
                      : toFixedPoint( str, e );
                } else {
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
                }

                if ( s < 0 && n.c[0] ) str = '-' + str;
            }

            return str;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */
        P.truncated = P.trunc = function () {
            return round( new BigNumber(this), this.e + 1, 1 );
        };



        /*
         * Return as toString, but do not accept a base argument.
         */
        P.valueOf = P.toJSON = function () {
            return this.toString();
        };


        // Aliases for BigDecimal methods.
        //P.add = P.plus;         // P.add included above
        //P.subtract = P.minus;   // P.sub included above
        //P.multiply = P.times;   // P.mul included above
        //P.divide = P.div;
        //P.remainder = P.mod;
        //P.compareTo = P.cmp;
        //P.negate = P.neg;


        if ( configObj != null ) BigNumber.config(configObj);

        return BigNumber;
    }


    // PRIVATE HELPER FUNCTIONS


    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }


    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z,
            i = 1,
            j = a.length,
            r = a[0] + '';

        for ( ; i < j; ) {
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for ( ; z--; s = '0' + s );
            r += s;
        }

        // Determine trailing zeros.
        for ( j = r.length; r.charCodeAt(--j) === 48; );
        return r.slice( 0, j + 1 || 1 );
    }


    // Compare the value of BigNumbers x and y.
    function compare( x, y ) {
        var a, b,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

        // Either NaN?
        if ( !i || !j ) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if ( a || b ) return a ? b ? 0 : -j : i;

        // Signs differ?
        if ( i != j ) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if ( !b ) return k > l ^ a ? 1 : -1;

        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

        // Compare digit by digit.
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }


    /*
     * Return true if n is a valid number in range, otherwise false.
     * Use for argument validation when ERRORS is false.
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
     */
    function intValidatorNoErrors( n, min, max ) {
        return ( n = truncate(n) ) >= min && n <= max;
    }


    function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
    }


    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. convertBase('255', 10, 16) returns [15, 15].
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut( str, baseIn, baseOut ) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for ( ; i < len; ) {
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

            for ( ; j < arr.length; j++ ) {

                if ( arr[j] > baseOut - 1 ) {
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                }
            }
        }

        return arr.reverse();
    }


    function toExponential( str, e ) {
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
          ( e < 0 ? 'e' : 'e+' ) + e;
    }


    function toFixedPoint( str, e ) {
        var len, z;

        // Negative exponent?
        if ( e < 0 ) {

            // Prepend zeros.
            for ( z = '0.'; ++e; z += '0' );
            str = z + str;

        // Positive exponent
        } else {
            len = str.length;

            // Append zeros.
            if ( ++e > len ) {
                for ( z = '0', e -= len; --e; z += '0' );
                str += z;
            } else if ( e < len ) {
                str = str.slice( 0, e ) + '.' + str.slice(e);
            }
        }

        return str;
    }


    function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
    }


    // EXPORT


    BigNumber = another();

    // AMD.
    if ( typeof define == 'function' && define.amd ) {
        define( function () { return BigNumber; } );

    // Node and other environments that support module.exports.
    } else if ( typeof module != 'undefined' && module.exports ) {
        module.exports = BigNumber;
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}

    // Browser.
    } else {
        global.BigNumber = BigNumber;
    }
})(this);

},{"crypto":114}],23:[function(require,module,exports){
/**
 * Created by Johnny on 2015/3/31.
 */
'use strict';
var util = require('./util');

// 中文符号
var GBfh = '　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω︵︶︹︺︿﹀︽︾﹁﹂﹃﹄︻︼︷︸︱︳︴АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюяāáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑńňɡㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋';

// 汉字
var GBhz = '啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄';

/**
 * HEX 数字字符串编码为 ASC 码字符串。
 *
 * @exmpale '702406C0'-> '3730323430364330'
 * @see PubHexToAsc
 *
 * @param {String} raw
 * @returns {String}
 */
exports.encodeAsc = function (raw) {
  var compactHex = '',
    hexChar;

  if(raw ===''){
    return raw;
  }
  if (raw === undefined) {
    throw 'str was undefined.';
  }

  for (var i = 0; i < raw.length; i++) {
    hexChar = raw.charCodeAt(i).toString(16).toUpperCase();
    compactHex += (hexChar.length === 1 ? '0' + hexChar : hexChar);
  }
  return compactHex.trim();
};

/**
 * ASC 码字符串反编码为 HEX 数字字符串。
 *
 * 如：'3730323430364330' -> '702406C0'
 *
 * @see PubAscToHex
 *
 * @param str
 * @returns {Array}
 */
exports.decodeAsc = function (raw) {
  var charCode, hexChar,
    hexStr = [];

  if(raw ===''){
    return raw;
  }
  if (raw === undefined) {
    throw 'str was undefined.';
  }
  
  if (!/[0-9a-fA-F]/m.test(raw)) {
    throw new Error('Wrong Format!');
  }

  if (raw.length % 2) {
    throw new Error('Length not times to 2');
  }

  for (var i = 0; i < raw.length / 2; i++) {
    hexChar = raw.substr(i * 2, 2);
    charCode = parseInt(hexChar, 16);
    hexStr.push(charCode);
  }
  hexStr = String.fromCharCode.apply(null, hexStr);
  return hexStr;
};

/**
 * 整型数转成HEX串
 *
 * 100 -》‘64’
 *
 * @param num 需要转换的整型数
 * @returns {string}
 */
exports.intToHexStr = function (num){
  var charValue = String.fromCharCode(num);//生成Unicode字符
  var charCode = charValue.charCodeAt(0);//获取指定字符的十进制表示.
  var normalHex=charCode.toString(16).toUpperCase();//将int值转换为十六进制

  normalHex = util.str_pad(normalHex, 4-normalHex.length, '0','right');

  return normalHex;
};

/**
 * 字符串转化为 ArrayBuffer。
 *
 * @param string
 * @returns {ArrayBuffer}
 */
exports.stringToArrayBuffer = function (string) {
  var buffer = new ArrayBuffer(string.length);
  var bufView = new Uint8Array(buffer);
  for (var i = 0; i < string.length; i++) {
	bufView[i] = string.charCodeAt(i);
  }
  return buffer;
};

/**
 * ArrayBuffer 转化为字符串。
 *
 * @param buffer
 * @returns {string}
 */
exports.arrayBufferToString = function (buffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;
  function intToHex(src) {
	var hex = src.toString(16);
	if (hex.length < 2) {
	  hex = '0' + hex;
	}
	return hex.toUpperCase();
  }
  for (var i = 0; i < len; i++) {
	binary += intToHex(bytes[i]);
  }
  return binary;
}

/**
 * string转成数组
 * @param str
 * @returns {Array}
 */
exports.stringToArray = function (str){
  if (str.length %2 ){
	throw new Error('Length not times to 2');
  }
  var hexChar,charCode,hexStr = [];
  for (var i = 0; i < str.length / 2; i++) {
    hexChar = str.substr(i * 2, 2);
    charCode = parseInt(hexChar, 16);
    hexStr.push(charCode);
  }
  return hexStr;
};


/**
 * array转arrayBuffer
 * @param arr
 * @returns {ArrayBuffer}
 */
exports.arrayToArrayBuffer = function(arr) {
  var buffer = new ArrayBuffer(arr.length);
  var bufView = new Int8Array(buffer);
  for (var i = 0; i < arr.length; i++) {
	if (typeof arr[i] === 'string') {
	  bufView[i] = parseInt('0x' + arr[i]);
	} else {
	  bufView[i] = arr[i];
	}
  }
  return buffer;
};

},{"./util":25}],24:[function(require,module,exports){
(function (Buffer){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Ksenia Lebedeva
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
'use strict';
/**
 * Creates a TLV object.
 * The originalLength parameter only makes sense for values parsed from a buffer.
 *
 * @param {number} tag
 * @param {object} value
 * @param {number}
 */
exports.TLV = function(tag, value, indefiniteLength, originalLength) {
  Object.defineProperty(this, 'tag', { value: tag });
  Object.defineProperty(this, 'value', { value: value });
  Object.defineProperty(this, 'constructed', { value: value instanceof Array });

  Object.defineProperty(this, 'indefiniteLength', { value: indefiniteLength === undefined ? false : indefiniteLength });

  if (originalLength !== undefined) {
    Object.defineProperty(this, 'originalLength', { value: originalLength });
  }

  Object.defineProperty(this, 'byteLength', { get: this.getByteLength });
}

/**
 * Calculates and returns the byte length of the encoded TLV.
 * This value can be used to allocate a buffer able to contain the encoded TLV.
 *
 * @return {number}
 */
exports.TLV.prototype.getByteLength = function() {
  var lenValue = getValueLength(this.value, this.constructed);
  return getTagLength(this.tag) + getLengthOfLength(lenValue, this.indefiniteLength) + lenValue;
}

/**
 * Returns the 1st child TLV of this object with the given tag.
 * If there is no child with the given tag, returns null.
 *
 * @param {number} tagToSearch
 * @return {TLV}
 */
exports.TLV.prototype.getFirstChild = function(tagToSearch) {
  for (var i = 0; i < this.value.length; i++) {
    if (this.value[i].tag == tagToSearch) {
      return this.value[i];
    }
  }

  return null;
}

/**
 * Returns an Array of children TLV of this object with the given tag.
 * If there is no child with the given tag, returns an empty Array.
 *
 * @param {number} tagToSearch
 * @return {Array}
 */
exports.TLV.prototype.getChildren = function(tagToSearch) {
  var result = [];
  for (var i = 0; i < this.value.length; i++) {
    if (this.value[i].tag == tagToSearch) {
      result.push(this.value[i]);
    }
  }

  return result;
}

/**
 * Encodes this TLV in the given Buffer object. If no Buffer object is given
 * a new one is created. The given or created buffer is returned for convenience.
 *
 * @param  {Buffer} buf
 * @return {Buffer}
 */
exports.TLV.prototype.encode = function(buf) {
  var tagLength = getTagLength(this.tag);
  var valueLength = getValueLength(this.value, this.constructed);
  var lenOfLen = getLengthOfLength(valueLength, this.indefiniteLength);

  if (!buf) {
    buf = new Buffer(tagLength + valueLength + lenOfLen);
  }

  var index = 0;

  encodeNumber(buf, this.tag, tagLength);
  index += tagLength;

  if (this.indefiniteLength) {
    buf[index++] = 0x80;
  } else if (lenOfLen == 1) {
    buf[index++] = valueLength;
  } else {
    lenOfLen--;
    buf[index++] = 0x80 | lenOfLen;
    encodeNumber(buf.slice(index), valueLength, lenOfLen);
    index += lenOfLen;
  }

  if (this.constructed) {
    for (var i = 0; i < this.value.length; i++) {
      this.value[i].encode(buf.slice(index));
      index = index + this.value[i].byteLength;
    }

    if (this.indefiniteLength) {
      buf[index++] = 0x00;
      buf[index++] = 0x00;
    }
  } else {
    this.value.copy(buf, index);
  }

  return buf;
}

/**
 * Returns a value of this TLV object, represented as an unsigned big endian.
 * The value can not be larger than 4 bytes.
 *
 * @return {number}
 */
exports.TLV.prototype.getUIntValue = function() {
  var index = 0;
  var intValue = 0;
  var len = this.value.length;
  var msb = 0;

  if (len > 4) {
    throw new RangeError("The length of the value cannot be more than 4 bytes in this implementation");
  }

  if (len == 4) {
    msb = this.value[index++] * 0x1000000;
    len--;
  }

  while (len > 0) {
    intValue = intValue | this.value[index++];

    if (len > 1) {
      intValue = intValue << 8;
    }

    len--;
  }

  return msb + intValue;
}

/**
 * Returns a value of this TLV object, represented as an signed big endian.
 * The value can not be larger than 4 bytes.
 *
 * @return {number}
 */
exports.TLV.prototype.getIntValue = function() {
  var index = 0;
  var intValue = 0;
  var len = this.value.length;
  var signMask = 0x80 << ((len - 1) * 8);
  var signExt = 0xFFFFFFFF << (len * 8);

  if (len > 4) {
    throw new RangeError("The length of the value cannot be more than 4 bytes in this implementation");
  }

  while (len > 0) {
    intValue = intValue | this.value[index++];

    if (len > 1) {
      intValue = intValue << 8;
    }

    len--;
  }

  if ((intValue & signMask) == signMask) {
    intValue = intValue | signExt;
  }

  return intValue;
}

/**
 * Encodes the given numeric value in the value Buffer of this object.
 *
 * @param {number} intValue
 */
exports.TLV.prototype.setIntValue = function(intValue) {
  encodeNumber(this.value, intValue, this.value.length);
}

/**
 * Parses (recursively) all the TLVs in the buffer and returns them in an array.
 * The buffer is expected to only contain valid TLV values.
 *
 * @param {Buffer} buf
 * @return {Array}
 */
exports.parseAll = function(buf, stopOnEOC) {
  var tlvs = [];
  stopOnEOC = (stopOnEOC === undefined) ? false : stopOnEOC;

  for (var i = 0; i < buf.length; i += tlvs[tlvs.length - 1].originalLength) {
    var tlv = this.parse(buf.slice(i));

    if (stopOnEOC && tlv.tag == 0x00 && tlv.originalLength == 2) {
      break;
    }

    tlvs.push(tlv);
  }

  return tlvs;
}

/**
 * Parses (recursively) the first TLV in the buffer and returns it.
 * Any data after the first TLV is ignored.
 * The originalLength parameter of the returned object tells how many bytes from the buffer are part of the TLV.
 * The value of the TLV contains a copy of the data from the input buffer. Modifying the input buffer afterwards
 * does not affect the returned TLV object.
 *
 * @param {Buffer} buf
 * @return {TLV}
 */
exports.parse = function(buf) {
  var index = 0;
  var tag = parseTag(buf);
  index += tag.length;

  var len = 0;
  var value;

  if (buf[index] == 0x80) {
    index++;

    if (!tag.constructed) {
      throw new Error("Only constructed TLV can have indefinite length");
    }

    value = this.parseAll(buf.slice(index), true);
    for (var i = 0; i < value.length; i++) {
      index += value[i].originalLength;
    }

    return new this.TLV(tag.tag, value, true, index + 2);
  } else if ((buf[index] & 0x80) == 0x80) {
    var lenOfLen = buf[index++] & 0x7F;

    if (lenOfLen > 4) {
      throw new RangeError("The length of the value cannot be represented on more than 4 bytes in this implementation" + lenOfLen);
    }

    while(lenOfLen > 0) {
      len = len | buf[index++];

      if (lenOfLen > 1) {
        len = len << 8;
      }

      lenOfLen--;
    }
  } else {
    len = buf[index++];
  }

  value = buf.slice(index, len + index);
  index += len;

  //if (index < buf.length){ //SQ��������жϣ��Ͳ��жϱ�ǩVALUE���Ƿ���TAG
    if (tag.constructed) {
      value = this.parseAll(value);
    } else {
      var tmpBuffer = value;
      value = new Buffer(tmpBuffer.length);
      tmpBuffer.copy(value);
    }
  //}
  return new this.TLV(tag.tag, value, false, index);
};

/**
 * Returns the byte length of the given tag.
 *
 * @param {number} tag
 * @return {number}
 */
function getTagLength(tag) {
  var lenTag = 4;

  while(lenTag > 1) {
    var tmpTag = tag >>> ((lenTag - 1) * 8);

    if ((tmpTag & 0xFF) != 0x00) {
      break;
    }

    lenTag--;
  }

  return lenTag;
}

/**
 * Returns the byte length of the given value.
 * Value can be either a Buffer or an array of TLVs.
 *
 * @param {object} value
 * @param {boolean} constructed
 * @return {number}
 */
function getValueLength(value, constructed) {
  var lenValue = 0;

  if (constructed) {
    for (var i = 0; i < value.length; i++) {
      lenValue = lenValue + value[i].byteLength;
    }
  } else {
    lenValue = value.length;
  }

  return lenValue;
}

/**
 * Returns the number of bytes needed to encode the given length.
 * If the length is indefinite, this value takes in account the bytes needed to encode the EOC tag.
 *
 * @param {number} lenValue
 * @param {boolean} indefiniteLength
 * @return {number}
 */
function getLengthOfLength(lenValue, indefiniteLength) {
  var lenOfLen;

  if (indefiniteLength) {
    lenOfLen = 3;
  } else if (lenValue > 0x00FFFFFF) {
    lenOfLen = 5;
  } else if (lenValue > 0x0000FFFF) {
    lenOfLen = 4;
  } else if (lenValue > 0x000000FF) {
    lenOfLen = 3;
  } else if (lenValue > 0x0000007F) {
    lenOfLen = 2;
  } else {
    lenOfLen = 1;
  }

  return lenOfLen
}

/**
 * Encodes the given numeric value in the given Buffer, using the specified number of bytes.
 *
 * @param {Buffer} buf
 * @param {number} value
 * @param {number} len
 */
function encodeNumber(buf, value, len) {
  var index = 0;

  while (len > 0) {
    var tmpValue = value >>> ((len - 1) * 8);
    buf[index++] = tmpValue & 0xFF;
    len--;
  }
}

/**
 * Parses the first bytes of the given Buffer as a TLV tag. The tag is returned as an object
 * containing the tag, its length in bytes and whether it is constructed or not.
 *
 * @param {Buffer} buf
 * @return {object}
 */
function parseTag(buf) {
  var index = 0;
  var tag = buf[index++];
  var constructed = (tag & 0x20) == 0x20;

  constructed = false;
  if ((tag & 0x1F) == 0x1F || (tag & 0xF0) == 0xE0) { //ȫ�񸶱�ǩ����׼��ֻ����ΪEX XXҲ��˫�ֽڱ�ǩSQ
    do {
      tag = tag << 8;
      tag = tag | buf[index++];
    } while((tag & 0x80) == 0x80);

    if (index > 4) {
      throw new RangeError("The length of the tag cannot be more than 4 bytes in this implementation");
    }
  }
  return { tag: tag, length: index, constructed: constructed };
}

/**
 * Parses the entire Buffer as a sequence of TLV tags.
 * The tags are returned in an array, containing their numeric values.
 *
 * @param {Buffer} buf
 * @return {Array}
 */
function parseAllTags(buf) {
  var result = [];
  var element;

  while (buf.length > 0) {
    element = parseTag(buf);
    buf = buf.slice(element.length);
    result.push(element.tag);
  }

  return result;
}

/**
 * Encodes an array of tags in a new Buffer.
 *
 * @param {Array} tags
 * @return {Buffer}
 */
function encodeTags(tags) {
  var bufLength = 0;
  var tagLengths = []

  for (var i = 0; i < tags.length; i++) {
    var tagLength = getTagLength(tags[i]);
    tagLengths.push(tagLength);
    bufLength += tagLength;
  }

  var buf = new Buffer(bufLength);
  var slicedBuf = buf;

  for (var i = 0; i < tags.length; i++) {
    encodeNumber(slicedBuf, tags[i], tagLengths[i]);
    slicedBuf = slicedBuf.slice(tagLengths[i]);
  }

  return buf;
}

exports.encodeTags = encodeTags;
exports.parseAllTags = parseAllTags;
exports.parseTag = parseTag;
exports.getTagLength = getTagLength;
exports.getValueLength = getValueLength;
exports.getLengthOfLength = getLengthOfLength;

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],25:[function(require,module,exports){
/**
 * Created by Johnny on 2015/4/2.
 */
'use strict';

/**
 * 取定长的数据长度。
 *
 * @param packager 包定义。
 * @returns {number} 域长度。
 */
exports.getLength = function (packager) {
  var length = packager.length;
  if (packager.type.indexOf('b') >=0 ){
    length *= 2;
    return length;
  }

  if (packager.content === 'asc') {
    length *= 2;
  }

  return length;
};

/**
 * 数字填充。
 *
 * @param number 需要填充的数字。
 * @param width 要求的长度。
 * @param factor 填充因子。
 * @returns {string} 填充结果。
 */
/*function pad(number, width, factor) {
  factor = factor || '0';
  number = number + '';
  return number.length >= width ? number : new Array(width - number.length + 1).join(factor) + number;
}*/

/**
 *@param str            初始字符串
 *@param length         重复长度
 *@param factor         填充字符
 *@param align          对齐类型'left' or 'right'
 *@return str
 */
exports.str_pad = function (str, length, factor, align){
  if(isNaN(length)) {
    length = 0;
  }

   var padStr = new Array(length+1).join(factor);
  if(align === 'right'){
       str = padStr + str;
  }else {
       str += padStr;
  }
/*
  var i;
  if(align === 'right'){
    for(i=0;i<length;i++){
      str = factor + str;
    }
  }else {
    for(i=0;i<length;i++){
      str += factor;
    }
  }
  */
  return str;
};



},{}],26:[function(require,module,exports){
'use strict';

/**
 * # Ethernet Adapter
 * @class nymph.comm.ethernet.ethernetAdapter
 * @singleton
 * 本模块为以太网适配器，是 JS 层与 java 层之间的以太网链路操作的桥梁。
 * 以太网接口需要os版本3.9.0以上支持
 */

// 引用外部模块。
var when = require('when'),
    nymphError = require('error'),
    hermes = require('hermes');


var ethernetAdapter = {

  /**
   * 单实例对象没有实例 ID
   */
  instanceId: hermes.NULL,

  /**
   * 插件名称。
   */
  PLUGINID: '133e282e8b01e15b2d006a5399d96476',

  /**
   * @method isEthernetEnable
   * 判断当前以太网开关是否开启
   *
   * @return {Boolean} true:开启，false: 关闭
   */
  isEthernetEnable: function () {
    var self = this, result, errorCode;
    result = hermes.exec(self.PLUGINID, self.instanceId, 'isEthernetEnable');
    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.message) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to invoke isEthernetEnable', innerCode: result.innerCode};
      }
    }

    return result.data;
  },

  /**
   * @method isEthernetExist
   * 判断当前以太网网卡是否存在
   *
   * @return {Boolean} true:存在，false: 不存在
   */
  isEthernetExist: function () {
    var self = this, result, errorCode;
    result = hermes.exec(self.PLUGINID, self.instanceId, 'isEthnetExist');
    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.message) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to invoke isEthnetExist', innerCode: result.innerCode};
      }
    }

    return result.data;
  },

  /**
   * @method getInfo
   * 获取以太网模块的相关信息。
   * @return {Object} info 以太网模块的相关信息。
   * @return {String} info.localIp 本机IP地址。
   * @return {String} info.gateway 网关。
   * @return {String} info.dns1 DNS1。
   * @return {String} info.dns2 dns2。
   * @return {String} info.mask 掩码地址。
   * @return {String} info.mac 物理地址。
   * @return {Boolean} info.isDhcp 是否使用 DHCP 服务。
   */
  getInfo: function () {
    // 一些获取以太网模块相关信息的操作。
    var self = this,result, errorCode, info;
    var result =  hermes.exec(self.PLUGINID, self.instanceId, 'getNetworkInfo');
    errorCode = errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.message) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get LAN info.', innerCode: result.innerCode};
      }
    }
    info = result.data;
    return info;
  },

  /**
   * @method getConfigInfo
   * 获取以太网模块的相关配置信息。
   * @return {Object} info 以太网模块的相关信息。
   * @return {String} info.localIp 本机IP地址。
   * @return {String} info.gateway 网关。
   * @return {String} info.dns1 DNS1。
   * @return {String} info.dns2 dns2。
   * @return {String} info.mask 掩码地址。
   * @return {Boolean} info.isDhcp 是否使用 DHCP 服务。
   */
  getConfigInfo: function () {
    // 一些获取以太网模块相关信息的操作。
    var self = this,result, errorCode, info;
    var result =  hermes.exec(self.PLUGINID, self.instanceId, 'getConfigInfo');
    errorCode = errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.message) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get Config info.', innerCode: result.innerCode};
      }
    }
    info = result.data;
    return info;
  },

  /**
   * @method config
   * 设置以太网模块相关配置。
   * @param {Object} param 通讯参数。
   * @param {String} param.dns1 DNS 地址
   * @param {String} param.dns2 DNS 地址
   * @param {String} param.gateway 网关地址
   * @param {String} param.localIp 本地 IP
   * @param {String} param.mask 网络掩码
   * @param {Boolean} param.isDhcp 是否使用 DHCP 服务（如果设置成true，就不会去配置静态IP、网关、掩码、dns这些参数）
   *
   * 值|描述
   * -|-
   * true|激活
   * false|非激活
   *
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
  config: function (param, callback) {
    var self = this;

    hermes.exec(self.PLUGINID, self.instanceId, 'config', [param], function (err) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        callback.call(self, null);
      }
    });
  },



  getError: function (innerCode) {
    // todo 完善 error。
    switch (innerCode) {
      case -9000:
      case -9001:
        return nymphError.ERROR;
      case -9002:
        return ErrorCode.CABLE_NOT_INSERTED;
      case -9003:
        return nymphError.PARAM_ERR;
      case -9007:
        return ErrorCode.LAN_NOT_OPEN;
      case -9999:
        return nymphError.OTHER_ERR;
      default:
        return nymphError.getError(innerCode);
    }
  },

};

var ErrorCode = {
  /**
   * 网线没有插入
   */
  CABLE_NOT_INSERTED: 'CABLE_NOT_INSERTED',

  /**
   * 以太网开关没开
   */
  LAN_NOT_OPEN: 'LAN_NOT_OPEN'
};
hermes.addJsPluginInstance(ethernetAdapter.PLUGINID, ethernetAdapter);
hermes.addEventSupport(ethernetAdapter);
module.exports = ethernetAdapter;

},{"error":"error","hermes":"hermes","when":296}],27:[function(require,module,exports){
'use strict';

/**
 * # Gprs Adapter
 * @class nymph.comm.gprs.gprsManager
 * @singleton
 * 本模块为 Gprs 管理器，提供了 Gprs 特有的操作。
 */
// 引用外部模块
var when = require('when'),
    nymphError = require('error'),
    hermes = require('hermes');

var gprsAdapter = {
    /**
     * 单实例对象没有实例 ID
     */
    instanceId: hermes.NULL,

    /**
     * 插件名称。
     */
    PLUGINID: 'cd3e78298b01e10bed206aa339c9840f',

    /**
     * @method isGprsEnable
     * 判断当前GPRS是否开启
     *
     * @return {Boolean} true:开启，false: 关闭
     */
    isGprsEnable: function () {
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'isGprsEnable');
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            if (result.message) {
                throw {code: errorCode, message: result.message, innerCode: result.innerCode};
            } else {
                throw {code: errorCode, message: 'Failed to invoke isGprsEnable', innerCode: result.innerCode};
            }
        }

        return result.data;
    },

    /**
     * @method setDefaultAPN
     * 设置 APN , 只支持私网卡的配置
     *
     * @param {Object} options 配置参数
     * @param {String} options.name 配置名称
     * @param {String} options.apn  APN
     * @param {String} options.user 用户名，可选
     * @param {String} options.password 密码，可选
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     */
    setDefaultAPN: function (options, callback){
        var self = this;

        if (typeof callback !== 'function') {
            if (typeof options === 'function') {
                callback = options;
                callback.call(self, {
                    code: nymphError.PARAM_ERR,
                    message: 'Invalid configuration, and the second parameter should be a callback function.'
                });
                return;
            }
            throw {code: nymphError.PARAM_ERR, message: 'The second parameter should be a callback function.'};
        } else {
            if(!options){
                callback.call(self, {
                    code: nymphError.PARAM_ERR,
                    message: 'Invalid configuration, and the first parameter error '
                });
                return;
            }

            if(!options.name || typeof  options.name !== 'string'){
                callback.call(self, {
                    code: nymphError.PARAM_ERR,
                    message: 'Invalid configuration, and the first parameter error '
                });
                return;
            }

            if(!options.apn || typeof  options.apn !== 'string'){
                callback.call(self, {
                    code: nymphError.PARAM_ERR,
                    message: 'Invalid configuration, and the first parameter error '
                });
                return;
            }

            if(options.hasOwnProperty('user')){
                if(!options.user || typeof  options.user !== 'string'){
                    callback.call(self, {
                        code: nymphError.PARAM_ERR,
                        message: 'Invalid configuration, and the first parameter error '
                    });
                    return;
                }
            }

            if(options.hasOwnProperty('password')){
                if(!options.password || typeof  options.password !== 'string'){
                    callback.call(self, {
                        code: nymphError.PARAM_ERR,
                        message: 'Invalid configuration, and the first parameter error '
                    });
                    return;
                }
            }
        }

        hermes.exec(self.PLUGINID, self.instanceId, 'setDefaultAPN', [options], function(err){
            if(err){
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {
                callback.call(self, null);
            }
        });
    },
    /**
     * @method getDefaultAPN
     *
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {Object} callback.result 配置参数
     * @param {String} callback.result.name
     * @param {String} callback.result.apn
     * @param {String} callback.result.user
     * @param {String} callback.result.password
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     */
    getDefaultAPN: function (callback){
        var self = this;

        if (typeof callback !== 'function') {
            throw {code: nymphError.PARAM_ERR, message: 'The parameter should be a callback function.'};
        }

        hermes.exec(self.PLUGINID, self.instanceId, 'getDefaultAPN', [], function(err, result){
            if(err){
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {
                callback.call(self, null, result);
            }
        });
    },

    getError: function (innerCode) {
        var ErrorCode = this.ErrorCode;
        switch (innerCode) {
            case -9000:
            case -9001:
                return nymphError.ERROR;
            case -9003:
                return nymphError.PARAM_ERR;
            case -9004:
                return ErrorCode.APN_ERR;
            case -9005:
                return ErrorCode.NO_SIM;
            case -9999:
                return nymphError.OTHER_ERR;
            default:
                return nymphError.getError(innerCode);
        }
    }
};
var ErrorCode = {
    /**
     * APN 错误
     */
    APN_ERR: 'APN_ERR',

    /**
     * 没有 sim 卡
     */
    NO_SIM: 'NO_SIM'
};

/**
 * @property {nymph.comm.gprs.gprsManager.ErrorCode} ErrorCode 错误码。
 * @member nymph.comm.gprs.gprsManager
 */
gprsAdapter.ErrorCode = ErrorCode;

hermes.addJsPluginInstance(gprsAdapter.PLUGINID, gprsAdapter);
hermes.addEventSupport(gprsAdapter);
module.exports = gprsAdapter;

},{"error":"error","hermes":"hermes","when":296}],28:[function(require,module,exports){
'use strict';

/**
 * # Wifi Adapter
 * @class nymph.comm.wifi.wifiManager
 * @singleton
 * 本模块为 WIFI 管理器，提供了 WIFI 特有的操作。
 */
// 引用外部模块
var when = require('when'),
    nymphError = require('error'),
    hermes = require('hermes');

var wifiAdapter = {
  /**
   * 单实例对象没有实例 ID
   */
  instanceId: hermes.NULL,

  /**
   * 插件名称。
   */
  PLUGINID: '9fcfc516319ce05fc4904fc214271b9a',

  /**
   * @method isWifiEnable
   * 判断当前wifi是否开启
   *
   * @return {Boolean} true:开启，false: 关闭
   */
  isWifiEnable: function () {
      var self = this, result, errorCode;
      result = hermes.exec(self.PLUGINID, self.instanceId, 'isWifiEnable');
      errorCode = self.getError(result.innerCode);
      if (errorCode !== nymphError.SUCCESS) {
          if (result.message) {
              throw {code: errorCode, message: result.message, innerCode: result.innerCode};
          } else {
              throw {code: errorCode, message: 'Failed to invoke isWifiEnable', innerCode: result.innerCode};
          }
      }

      return result.data;
    },


  /**
   * @method getWifiList
   * 获取 WIFI 列表。
   *
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   * @param {nymph.comm.wifi.ScanResult[]} wifiList WIFI 列表。
   */
  getWifiList: function (callback) {
      var wifiList = [], i, tempWifiList, tempWifi, self = this;
      hermes.exec(this.PLUGINID, this.instanceId, 'getWifiList', function (err, result) {
          if (err) {
              err.code = self.getError(err.innerCode);
              callback.call(self, err);
          } else {
              tempWifiList = result.data;

              for (i = 0; i < tempWifiList.length; i++) {
                  tempWifi = tempWifiList[i];
                  var wifi = {};
                  for (var key in tempWifi) {
                      if (tempWifi.hasOwnProperty(key)) {
                          wifi[key] = tempWifi[key];
                      }
                  }
                  wifiList.push(wifi);
              }
              callback.call(self, null, wifiList);
          }
      });
  },

  /**
   * @method connect
   * 连接一个网络。
   *
   * @param {Object} options 网络连接参数。
   * @param {String} options.ssid 要连接的网络名称。
   * @param {nymph.comm.wifiManager.WifiEncryption} options.encryption 加密方式。
   * @param {String} [options.password] 密码。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
  connect: function (options, callback) {
    var self = this;
    if (typeof callback !== 'function') {
        if (typeof options === 'function') {
            callback = options;
            callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid options, and the second parameter should be a callback function.'});
            return;
        }
        throw {code: nymphError.PARAM_ERR, message: 'The second parameter should be a callback function.'};
    } else {
        if (options) {
            if (!options.hasOwnProperty('ssid') || !options.hasOwnProperty('encryption')) {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Options should have ssid and encryption.'});
                return;
            }
        }
    }
      hermes.exec(self.PLUGINID, self.instanceId, 'connect', [options], function (err) {
          if (err) {
              err.code = self.getError(err.innerCode);
              callback.call(self, err);
          } else {
              callback.call(self, null);
          }
      });
  },

  /**
   * @method disconnect
   * 断开当前连接的网络。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
  disconnect: function (callback) {
    var self = this;
    hermes.exec(self.PLUGINID, self.instanceId, 'disconnect', function (err) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        callback.call(self, null);
      }
    });
  },

  /**
   * @method remove
   * 将指定网络从已配置列表移除。
   *
   * 此方法使用场景：
   * 当一个网络连接成功一次后，会被添加到已配置网络列表中，之后再连接这个网络时，不用再输入密码。
   * 而如果这个网络的密码被修改了，再连接此网络时，还是用旧配置连接就会失败。此时就需要调用此方法，先将这个网络从已配置列表中移除。
   * 然后再连接这个网络时，就会提示输入密码了。
   * 
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  remove: function (networkId) {
      var self = this, result, errorCode;
      result = hermes.exec(self.PLUGINID, self.instanceId, 'remove', [networkId]);
      errorCode = self.getError(result.innerCode);
      if (errorCode !== nymphError.SUCCESS) {
          if (result.message) {
              throw {code: errorCode, message: result.message, innerCode: result.innerCode};
          } else {
              throw {code: errorCode, message: 'Failed to remove network', innerCode: result.innerCode};
          }
      }
  },

  /**
   * @method getInfo
   * 获取 WIFI 模块的相关信息。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   * @param {Object} callback.info WIFI 模块的相关信息。
   * @param {String} callback.info.ssid 网络名称。
   * @param {String} callback.info.bssid BSSID。
   * @param {String} callback.info.mac MAC 地址。
   * @param {Number} callback.info.networkId 网络 ID。
   * @param {Number} callback.info.rssi 信号值。
   * @param {Number} callback.info.speed 链路速度，单位为 Mbps。
   * @param {String} callback.info.ipAssignment IP 分配方式
   *
   * 值|描述
   * -|-
   * DHCP|动态分配 IP
   * STATIC|静态分配 IP
   *
   * @param {String} callback.info.ip IP。
   * @param {String} callback.info.netmask 子网掩码。
   * @param {String} callback.info.gateway 网关。
   * @param {String} callback.info.dns1 DNS1。
   * @param {String} callback.info.dns2 DNS2。
   * @param {Number} callback.info.channel 信道。
   * @param {String} callback.info.encryption 加密方式。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  getInfo: function () {
    // 一些获取 WIFI 模块相关信息的操作。
    var self = this, result, errorCode, info, key;
    result = hermes.exec(self.PLUGINID, self.instanceId, 'getWifiInfo');
    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
        if (result.message) {
            throw {code: errorCode, message: result.message, innerCode: result.innerCode};
        } else {
            throw {code: errorCode, message: 'Failed to get WIFI info.', innerCode: result.innerCode};
        }
    }
    info = result.data;

    if (info.networkId === -1) {
        return null;
    } else {
        return info;
    }
  },

  /**
   * @method config
   * 设置 WIFI 模块相关配置。
   *
   * @param {Object} cfg WIFI 模块的相关配置。
   * @param {Boolean} cfg.dhcp 设置当前连接的网络使用动态分配 IP。
   * @param {Boolean} cfg.staticIpConfiguration 设置当前连接的网络的静态 IP。
   * @param {String} cfg.staticIpConfiguration.ip 静态 IP
   * @param {String} cfg.staticIpConfiguration.gateway 网关
   * @param {String} cfg.staticIpConfiguration.netmask 子网掩码。默认子网掩码为 255.255.255.0。
   * @param {String} cfg.staticIpConfiguration.dns1 DNS1
   * @param {String} cfg.staticIpConfiguration.dns2 DNS2
   *
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
  config: function (cfg, callback) {
      var self = this;
      if (typeof callback !== 'function') {
          if (typeof cfg === 'function') {
              callback = cfg;
              callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid configuration, and the second parameter should be a callback function.'});
              return;
          }
          throw {code: nymphError.PARAM_ERR, message: 'The second parameter should be a callback function.'};
      } else {
          if (!cfg) {
              callback.call(self, {code: nymphError.PARAM_ERR, message: 'Configuration is required.'});
              return;
          }
          if (cfg.hasOwnProperty('staticIpConfiguration')) {
              if (cfg.staticIpConfiguration.hasOwnProperty('netmask')) {
                  switch (cfg.staticIpConfiguration.netmask) {
                      case '255.255.255.255':
                          cfg.staticIpConfiguration.networkPrefixLength = 0;
                          break;
                      case '255.255.255.0':
                          cfg.staticIpConfiguration.networkPrefixLength = 24;
                          break;
                      case '255.255.0.0':
                          cfg.staticIpConfiguration.networkPrefixLength = 16;
                          break;
                      case '255.0.0.0':
                          cfg.staticIpConfiguration.networkPrefixLength = 8;
                          break;
                      default:
                          callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid netmask'});
                          return;
                  }
              } else {
                  // 默认子网掩码为 255.255.255.0
                  cfg.staticIpConfiguration.networkPrefixLength = 24;
              }
          }
      }
      hermes.exec(self.PLUGINID, self.instanceId, 'config', [cfg], function (err) {
          if (err) {
              err.code = self.getError(err.innerCode);
              callback.call(self, err);
          } else {
              callback.call(self, null);
          }
      });
  },
  /**
   * @method getConfigList
   * 获取已保存的wifi配置列表
   *
   * @return {Array} array 配置列表数组
   * @return {Object} array[0]
   * @return {String} array[0].ssid
   * @return {String} array[0].networkId
   * @return {String} array[0].encryption
   */
  getConfigList: function(){
      var self = this, result, info, errorCode;
      result = hermes.exec(self.PLUGINID, self.instanceId, 'getConfigList');
      errorCode = self.getError(result.innerCode);
      if (errorCode !== nymphError.SUCCESS) {
          if (result.message) {
              throw {code: errorCode, message: result.message, innerCode: result.innerCode};
          } else {
              throw {code: errorCode, message: 'Failed to get config list.', innerCode: result.innerCode};
          }
      }
      return result.data;
  },
  /**
   * @method isConfigExist
   * 判断当前wifi是否已保存配置
   *
   *
   * @param {String} ssid
   * @return {Object} data
   * @return {String} data.ssid
   * @return {String} data.networkId
   * @return {String} array[0].encryption
   */
  isConfigExist: function(ssid){
      var self = this, result, info, errorCode;
      result = hermes.exec(self.PLUGINID, self.instanceId, 'isConfigExist', [ssid]);
      errorCode = self.getError(result.innerCode);
      if (errorCode !== nymphError.SUCCESS) {
          if (result.message) {
              throw {code: errorCode, message: result.message, innerCode: result.innerCode};
          } else {
              throw {code: errorCode, message: 'Failed to get config list.', innerCode: result.innerCode};
          }
      }
      if(result.data.ssid && result.data.networkId){
          return result.data;
      } else {
          return null;
      }
  },

  getError: function (innerCode) {
    switch (innerCode) {
        case -9006:
            return ErrorCode.WIFI_NOT_OPENED;
        default:
            return nymphError.getError(innerCode);
    }
  }
};

var ErrorCode = {
    /**
     * WIFI 未打开
     */
    WIFI_NOT_OPENED: 'WIFI_NOT_OPENED'
};

/**
 * WIFI 加密方式
 * @class nymph.comm.wifiManager.WifiEncryption
 */
var WifiEncryption = {
    /**
     * OPEN
     */
    OPEN: 'OPEN',

    /**
     * WEP
     */
    WEP: 'WEP',

    /**
     * EAP
     */
    EAP: 'EAP',

    /**
     * PSK
     */
    PSK: 'PSK'
};

/**
 * @property {nymph.comm.wifiManager.WifiEncryption} WifiEncryption WIFI 加密方式。
 * @member nymph.comm.connectivityManager
 */
wifiAdapter.WifiEncryption = WifiEncryption;

hermes.addJsPluginInstance(wifiAdapter.PLUGINID, wifiAdapter);
hermes.addEventSupport(wifiAdapter);
module.exports = wifiAdapter;

},{"error":"error","hermes":"hermes","when":296}],29:[function(require,module,exports){
'use strict';

/**
 * # 卡槽类型
 * @class nymph.dev.cardReader.SlotType
 */
var SlotType = {
  /**
   * @property {String} [SWIPE='SWIPE'] 刷卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  SWIPE: 'SWIPE',

  /**
   * @property {String} [ICC1='ICC1'] IC 卡插卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  ICC1: 'ICC1',

  /**
   * @property {String} [ICC2='ICC2'] IC 卡插卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  ICC2: 'ICC2',

  /**
   * @property {String} [ICC3='ICC3'] IC 卡插卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  ICC3: 'ICC3',

  /**
   * @property {String} [PSAM1='PSAM1'] PSAM 卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  PSAM1: 'PSAM1',

  /**
   * @property {String} [PSAM2='PSAM2'] PSAM 卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  PSAM2: 'PSAM2',

  /**
   * @property {String} [PSAM3='PSAM3'] PSAM 卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  PSAM3: 'PSAM3',

  /**
   * @property {String} [RF='RF'] 内置非接卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  RF: 'RF',

  /**
   * @property {String} [RF_EX='RF_EX'] 外置非接卡卡槽。
   * @member nymph.dev.cardReader.SlotType
   */
  RF_EX: 'RF_EX'
};

module.exports = SlotType;

},{}],30:[function(require,module,exports){
'use strict';

/**
 * # 卡类型
 * @class nymph.dev.cardReader.CardType
 */
var CardType = {
  /**
   * @property {String} [MAGCARD='MAGCARD'] 磁条卡。
   * @member nymph.dev.cardReader.CardType
   */
  MAGCARD: 'MAGCARD',

  /**
   * @property {String} [CPUCARD='CPUCARD'] 接触式/非接触式 CPU 卡。
   * @member nymph.dev.cardReader.CardType
   */
  CPUCARD: 'CPUCARD',

  /**
   * @property {String} [M1CARD='M1CARD'] M1 卡。
   * @member nymph.dev.cardReader.CardType
   */
  M1CARD: 'M1CARD',

  /**
   * @property {String} [ACARD='ACARD']
   * @member nymph.dev.cardReader.CardType
   */
  ACARD: 'ACARD',

  /**
   * @property {String} [BCARD='BCARD']
   * @member nymph.dev.cardReader.CardType
   */
  BCARD: 'BCARD',

  /**
   * @property {String} [SLE44X2='SLE44X2']
   * @member nymph.dev.cardReader.CardType
   */
  SLE44X2: 'SLE44X2',

  /**
   * @property {String} [SLE44X8='SLE44X8']
   * @member nymph.dev.cardReader.CardType
   */
  SLE44X8: 'SLE44X8',

  /**
   * @property {String} [AT24CXX='AT24CXX']
   * @member nymph.dev.cardReader.CardType
   */
  AT24CXX: 'AT24CXX',

  /**
   * @property {String} [AT88SC102='AT88SC102']
   * @member nymph.dev.cardReader.CardType
   */
  AT88SC102: 'AT88SC102',

  /**
   * @property {String} [AT88SC1604='AT88SC1604']
   * @member nymph.dev.cardReader.CardType
   */
  AT88SC1604: 'AT88SC1604',

  /**
   * @property {String} [AT88SC1608='AT88SC1608']
   * @member nymph.dev.cardReader.CardType
   */
  AT88SC1608: 'AT88SC1608'
};

module.exports = CardType;

},{}],31:[function(require,module,exports){
'use strict';

/**
 * #  At1608 卡
 *
 * @class nymph.dev.cardReader.ic.At1608card
 *
 * 本模块介绍了 At1608 卡提供的 API。
 *
 * @experimental
 */
var At1608Card;
module.exports = At1608Card;

},{}],32:[function(require,module,exports){
/**
 * #  CPU 卡
 *
 * @class nymph.dev.cardReader.ic.CpuCard
 *
 * 本模块提供了 CPU 卡（包括接触和非接的）的 API。具体 CPU 卡操作请参见[“CPU 卡开发指南”](#!/guide/cpu)。
 *
 * @constructor
 * @private
 * 创建一个新的 CPU 卡实例。
 *
 * **此构造函数不提供给用户调用，仅由 nymph.dev.cardReader 负责调用来创建新的 CPU 卡实例。**
 * @param {Object} cardInfo 创建一个 CPU 卡实例需要的卡片信息。
 * @param {nymph.dev.cardReader.CardType} cardInfo.type 卡片类型。
 * @param {nymph.dev.cardReader.SlotType} cardInfo.slot 卡槽类型。
 * @param {Boolean} cardInfo.isInitialized 卡片是否已被初始化。
 * @param {Object} cardInfo.powerUpData 如果卡片已被初始化，则有上电数据。数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
 */

'use strict';

var hermes = require('hermes'),
    Buffer = require('buffer').Buffer,
    nymphError = require('error'),
    tools = require('tools'),
    icError = require('./ic-error'),
    encoding = require('nymph-encoding');

var CpuCard = function (cardInfo) {
    /**
     * @property {nymph.dev.cardReader.CardType} type 卡片类型。
     * @member nymph.dev.cardReader.ic.CpuCard
     */
    this.type = cardInfo.type;

    /**
     * @property {nymph.dev.cardReader.SlotType} slot 卡槽类型。
     * @member nymph.dev.cardReader.ic.CpuCard
     */
    this.slot = cardInfo.slot;

    if (cardInfo.options === null || typeof cardInfo.options === 'undefined') {
        this.options = {};
    } else {
        this.options = cardInfo.options;
    }

    if (cardInfo.isInitialized) {
        /**
         * @property {Boolean} isInitialized 卡片是否已经初始化。
         * @member nymph.dev.cardReader.ic.CpuCard
         */
        this.isInitialized = cardInfo.isInitialized;
        this.instanceId = cardInfo.instanceId;

        /**
         * @property {Object} powerUpData 如果卡片已被初始化，则有上电数据。数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
         * @member nymph.dev.cardReader.ic.CpuCard
         */
        this.powerUpData = new Buffer(cardInfo.data, 'base64');

    } else {
        this.isInitialized = false;
        this.instanceId = hermes.NULL;
    }
};

CpuCard.prototype = {
    constructor: CpuCard,

    PLUGINID: '4f3bcf0994854dafd7c4164e37d855de',

    /**
     * @ignore
     * 此接口不暴露给用户调用，由 cardReader 的 waitForCard 和 getFixedCards 在创建卡实例的时候调用。
     */
    init: function (callback) {
        var self = this;

        if (!self.isInitialized) {
            hermes.exec(this.PLUGINID, this.instanceId, 'init', [this.type, this.slot, this.options], function (err, result) {
                if (err) {
                    err.code = self.getError(err.innerCode);
                    callback.call(self, err);
                } else {
                    self.instanceId = result.instanceId;
                    self.powerUpData = new Buffer(result.data, 'base64');

                    self.isInitialized = true;
                    callback.call(self, null);
                }
            });
        } else {
            callback.call(self, null);
        }
    },

    /**
     * @method release
     * 释放卡片。当使用完卡实例后调用此接口释放卡实例。
     *
     *     try {
     *         // cpuCard 为 cardReader 的 {@link nymph.dev.cardReader#waitForCard waitForCard} 接口回调返回的卡实例
     *         cpuCard.release();
     *     } catch (err) {
     *         // 异常处理
     *     }
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.CpuCard
     */
    release: function () {
        var result, errorCode;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'release');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Release card failed.', innerCode: result.innerCode};
        }
    },

    /**
     * @method communicate
     * 与 CPU 卡片进行通讯。
     *
     *     // cpuCard 为 cardReader 的 {@link nymph.dev.cardReader#waitForCard waitForCard} 接口回调返回的卡实例
     *     cpuCard.communicate([0x01, 0x02], function (err, result) {
   *       if (err) {
   *         // 通讯失败的处理。
   *       } else {
   *         // 通讯成功
   *         // result：{Buffer} 执行 APDU 返回的数据。
   *
   *         // 可继续进行多次 APDU 通讯。
   *         cpuCard.communicate([0x03, 0x04], function(err, result){
   *           // APDU 通讯结果处理。
   *         })
   *       }
   *     });
     *
     * @param {Object/String/Array} apdu 要执行的 APDU，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.result APDU 响应数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。内容为：数据 + 结果（2 字节）
     * @member nymph.dev.cardReader.ic.CpuCard
     */
    communicate: function (apdu, callback) {
        // 一些通讯操作。
        var self = this, apduBase64 = null;

        if(typeof callback !== 'function') {
            if (typeof apdu === 'function') {
                callback = apdu;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please make sure that callback is the last parameter!'});
                return;
            } else {
                throw {code: nymphError.PARAM_ERR, message: 'Please make sure you have passed in callback!'};
            }
        }

        try {
            apduBase64 = tools.toBase64(apdu);
        } catch (err){
            callback.call(self, err);
            return;
        }

        hermes.exec(self.PLUGINID, self.instanceId, 'communicate', [apduBase64], function (err, result) {
            if (err) {
                err.code = self.getError(err.innerCode);
                if (err.code === nymphError.SUCCESS) {
                    if (err.innerCode === 0xE6) {
                        // 如果返回码是 0xE6，卡片返回的状态字节SW1,SW2为62XX或者63XX, 这时要求应用程序收到这个状态时，继续发出Le=0的get_response命令，以取回后续的内容
                        callback.call(self, null, encoding.hexStringToBuffer('6200'));
                    } else{
                        if(result) {
                            callback.call(self, null, new Buffer(result, 'base64'));
                        } else {
                            callback.call(self, null, null);
                        }
                    }
                } else {
                    callback.call(self, err);
                }
            } else {
                callback.call(self, null, new Buffer(result, 'base64'));
            }
        });
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @return {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        var self = this;
        switch (innerCode) {
            case 0xE7:// SW1!=0X90或者SW2!=0X00
            case 0xE6:// 表示在调用选择文件命令时（CLA=00，INS=A4）时卡片返回的状态字节SW1,SW2为62XX或者63XX, 这时要求应用程序收到这个状态时，继续发出Le=0的get_response命令，以取回后续的内容
                return nymphError.SUCCESS;
            case 0xA7:
                return nymphError.TIMEOUT;
            default:
                var code = icError.getError(innerCode);
                if (code !== nymphError.UNKNOWN) {
                    return code;
                }
                return nymphError.getError(innerCode);
        }
    }
};

module.exports = CpuCard;

},{"./ic-error":34,"buffer":"buffer","error":"error","hermes":"hermes","nymph-encoding":"nymph-encoding","tools":"tools"}],33:[function(require,module,exports){
'use strict';

/**
 * # IC 卡模块
 * 包含所有与 IC 相关的类和对象，通过 `card-reader` 来获取，如下：
 *
 *     var ic = require('card-reader').ic;
 *
 * @class nymph.dev.cardReader.ic
 * @singleton
 *
 */
var ic = {}, icError =  require('./ic-error');

/**
 * @property {nymph.dev.cardReader.ic.error} icError 提供 IC 卡模块的公共错误码。
 * @member nymph.dev.cardReader.ic
 */
ic.ErrorCode = icError;

/**
 * @property {nymph.dev.cardReader.ic.M1Card} M1Card M1 卡类，提供该卡类相关的操作接口。
 * @member nymph.dev.cardReader.ic
 */
ic.M1Card = require('./m1-card');

/**
 * @property {nymph.dev.cardReader.ic.CpuCard} CpuCard CPU 卡类，提供该卡类相关的操作接口。
 * @member nymph.dev.cardReader.ic
 */
ic.CpuCard = require('./cpu-card');

/**
 * @property {nymph.dev.cardReader.ic.Sim4428Card} Sim4428Card Sim4428 卡类，提供该卡类相关的操作接口。
 * @member nymph.dev.cardReader.ic
 */
ic.Sim4428Card = require('./sim4428-card');

/**
 * @property {nymph.dev.cardReader.ic.Sim4442Card} Sim4442Card Sim4442 卡类，提供该卡类相关的操作接口。
 * @member nymph.dev.cardReader.ic
 */
ic.Sim4442Card = require('./sim4442-card');

/**
 * @property {nymph.dev.cardReader.ic.At1608card} At1608Card At1608 卡类，提供该卡类相关的操作接口。
 * @member nymph.dev.cardReader.ic
 */
ic.At1608Card = require('./at1608-card');

/**
 * @property {nymph.dev.cardReader.ic.VolMode} VolMode 电压模式。
 * @member nymph.dev.cardReader.ic
 */
ic.VolMode = require('./vol-mode');

/**
 * @property {nymph.dev.cardReader.ic.PowerMode} PowerMode 上电模式。
 * @member nymph.dev.cardReader.ic
 */
ic.PowerMode = require('./power-mode');

module.exports = ic;

},{"./at1608-card":31,"./cpu-card":32,"./ic-error":34,"./m1-card":35,"./power-mode":36,"./sim4428-card":37,"./sim4442-card":38,"./vol-mode":39}],34:[function(require,module,exports){
'use strict';
var nymphError = require('error');
/**
 * # IC 卡模块公共错误码
 * @class nymph.dev.cardReader.ic.ErrorCode
 * @singleton
 */
var icError = {
    /**
     * @property {String} [ICC_BASE_ERR='ICC_BASE_ERR'] IC 卡基础错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_BASE_ERR: 'ICC_BASE_ERR',

    /**
     * @property {String} [ICC_CARD_PULLED_OUT='ICC_CARD_PULLED_OUT'] 交易中卡被拨出。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_CARD_PULLED_OUT: 'ICC_CARD_PULLED_OUT',

    /**
     * @property {String} [ICC_PARITY_ERR='ICC_PARITY_ERR'] 奇偶错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_PARITY_ERR: 'ICC_PARITY_ERR',

    /**
     * @property {String} [ICC_CHANNEL_ERR='ICC_CHANNEL_ERR'] 选择通道错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_CHANNEL_ERR: 'ICC_CHANNEL_ERR',

    /**
     * @property {String} [ICC_DATA_LEN_TOO_LONG='ICC_DATA_LEN_TOO_LONG'] 发送数据太长(LC)。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_DATA_LEN_TOO_LONG: 'ICC_DATA_LEN_TOO_LONG',

    /**
     * @property {String} [ICC_PROTOCOL_ERR='ICC_PROTOCOL_ERR'] 卡片协议错误（不为 T＝0 或 T＝1）。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_PROTOCOL_ERR: 'ICC_PROTOCOL_ERR',

    /**
     * @property {String} [ICC_NEED_RESET='ICC_NEED_RESET'] 没有复位卡片/ic卡模块工作异常。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_NEED_RESET: 'ICC_NEED_RESET',

    /**
     * @property {String} [ICC_NOT_CALL='ICC_NOT_CALL'] 不能通信或没上电/卡未上电。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_NOT_CALL: 'ICC_NOT_CALL',

    /**
     * @property {String} [ICC_TYPE_ERR='ICC_TYPE_ERR'] 卡类型错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_TYPE_ERR: 'ICC_TYPE_ERR',

    /**
     * @property {String} [ICC_NO_CARD='ICC_NO_CARD'] 缺卡（SAM卡无此返回，半埋卡座仅在社保模式下有此返回）。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_NO_CARD: 'ICC_NO_CARD',

    /**
     * @property {String} [ICC_OTHER_ERR='ICC_OTHER_ERR'] 其他异常错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    ICC_OTHER_ERR: 'ICC_OTHER_ERR',

    /**
     * @property {String} [RF_BASE_ERR='RF_BASE_ERR'] 非接 IC 卡基础错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_BASE_ERR: 'RF_BASE_ERR',

    /**
     * @property {String} [RF_NOT_OPENED='RF_NOT_OPENED'] 射频模块未开启。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_NOT_OPENED: 'RF_NOT_OPENED',

    /**
     * @property {String} [RF_NO_CARD='RF_NO_CARD'] 未搜寻到卡片（感应区内无指定类型的卡片）/感应区内无卡。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_NO_CARD: 'RF_NO_CARD',

    /**
     * @property {String} [RF_CARD_TOO_MANY='RF_CARD_TOO_MANY'] 感应区内卡片过多（出现通讯冲突）。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_CARD_TOO_MANY: 'RF_CARD_TOO_MANY',

    /**
     * @property {String} [RF_PROTOCOL_DATA_ERR='RF_PROTOCOL_DATA_ERR'] 协议错误（卡片应答中出现违反协议规定的数据）/卡片返回数据不符合规范要求。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_PROTOCOL_DATA_ERR: 'RF_PROTOCOL_DATA_ERR',

    /**
     * @property {String} [RF_CARD_NOT_ACTIVATED='RF_CARD_NOT_ACTIVATED'] 卡片未激活。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_CARD_NOT_ACTIVATED: 'RF_CARD_NOT_ACTIVATED',

    /**
     * @property {String} [RF_MUTI_CARD='RF_MUTI_CARD'] 多卡冲突。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_MUTI_CARD: 'RF_MUTI_CARD',

    /**
     * @property {String} [RF_PROTOCOL_ERR='RF_PROTOCOL_ERR'] 协议错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_PROTOCOL_ERR: 'RF_PROTOCOL_ERR',

    /**
     * @property {String} [RF_IO_ERR='RF_IO_ERR'] 通信传输错误。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_IO_ERR: 'RF_IO_ERR',

    /**
     * @property {String} [RF_CARD_STILL_EXIST='RF_CARD_STILL_EXIST'] 卡片仍在感应区内。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_CARD_STILL_EXIST: 'RF_CARD_STILL_EXIST',

    /**
     * @property {String} [RF_CARD_STATUS_ERR='RF_CARD_STATUS_ERR'] 卡片状态错误（如 A/B 卡调用 M1 卡接口，或 M1 卡调用 PiccIsoCommand 接口）。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_CARD_STATUS_ERR: 'RF_CARD_STATUS_ERR',

    /**
     * @property {String} [RF_NOT_CALL='RF_NOT_CALL'] 接口芯片不存在或异常/操作范围内无卡或者卡片未响应。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_NOT_CALL: 'RF_NOT_CALL',

    /**
     * @property {String} [RF_OTHER_ERR='RF_OTHER_ERR'] 非接其他错误异常。
     * nymph.dev.cardReader.ic.ErrorCode
     */
    RF_OTHER_ERR: 'RF_OTHER_ERR',
};

/**
 * @ignore
 * @param {Number} innerCode 底层上传的返回码
 * @returns {String} 返回码对应的字符串
 */
icError.getError = function (innerCode) {
    var self = this;
    switch (innerCode) {
        case -10100: // 接触式 IC 卡基础错误码
            return self.ICC_BASE_ERR;
        case -10101: // 交易中卡被拨出
            return self.ICC_CARD_PULLED_OUT;
        case -10102: // 奇偶错误
            return self.ICC_PARITY_ERR;
        case -10103: // 选择通道错误
            return self.ICC_CHANNEL_ERR;
        case -10104: // 发送数据太长(LC)
            return self.ICC_DATA_LEN_TOO_LONG;
        case -10105: // 卡片协议错误（不为 T＝0 或 T＝1）
            return self.ICC_PROTOCOL_ERR;
        case -10106: // 没有复位卡片
        case 0XC1: // EM_ic_NEEDRESET ic卡模块工作异常
            return self.ICC_NEED_RESET;
        case -10107: // 不能通信或没上电
        case 0xE3: // EM_ic_NOPOWER 卡未上电
            return self.ICC_NOT_CALL;
        case 0xFB: // EM_ic_NOCARD：缺卡（SAM卡无此返回，半埋卡座仅在社保模式下有此返回）
            return self.ICC_NO_CARD;
        case 0xC2: // EM_ic_ERRTYPE：卡类型错误
            return self.ICC_TYPE_ERR;
        case -10199: // 其他异常错误
        case 0xF2: // EM_ic_ATRERR：上电时读卡片回送ATR错误
        case 0xE2: // EM_ic_DATAERR：读卡片回送数据错
        case 0xB2: // EM_ic_TIMEOUT：社保模式上电时卡片回送ATR错
            return self.ICC_OTHER_ERR;
        case -10200: // 非接 IC 卡基础错误
            return self.RF_BASE_ERR;
        case -10201: // 射频模块未开启
            return self.RF_NOT_OPENED;
        case -10202: // 未搜寻到卡片（感应区内无指定类型的卡片）
        case 0xA5: // EM_mifs_NOCARD 感应区内无卡
            return self.RF_NO_CARD;
        case -10203: // 感应区内卡片过多（出现通讯冲突）
            return self.RF_CARD_TOO_MANY;
        case -10204: // 协议错误（卡片应答中出现违反协议规定的数据）
        case 0xA3: // EM_mifs_PROTERR 卡片返回数据不符合规范要求
            return self.RF_PROTOCOL_DATA_ERR;
        case -10205: // 卡片未激活
        case 0xB3: // EM_mifs_CARDNOACT
            return self.RF_CARD_NOT_ACTIVATED;
        case -10206: // 多卡冲突
        case 0xA4: // EM_mifs_MULTIERR
            return self.RF_MUTI_CARD;
        case -10207: // 协议错误
            return self.RF_PROTOCOL_ERR;
        case -10208: // 通信传输错误
        case 0xA2: // EM_mifs_TRANSERR
            return self.RF_IO_ERR;
        case -10209: // 卡片仍在感应区内
        case 0xA6: // EM_mifs_CARDEXIST
            return self.RF_CARD_STILL_EXIST;
        case -10210: // 卡片状态错误（如 A/B 卡调用 M1 卡接口，或 M1 卡调用 PiccIsoCommand 接口）
            return self.RF_CARD_STATUS_ERR;
        case -10211: // 接口芯片不存在或异常
        case 0x02: // 操作范围内无卡或者卡片未响应
            return self.RF_NOT_CALL;
        case -10299: // 非接其他错误异常
        case 0x03: // EM_mifs_CRCERR：数据CRC校验错误
        case 0x05: // EM_mifs_PARITYERR：从卡中收到错误的PARITY
        case 0x06: // EM_mifs_CODEERR：卡片回送数据内容错误
        case 0x07: // EM_mifs_SERNRERR：防冲突过程中数据错误
        case 0x09: // EM_mifs_BITCOUNTERR：卡片回送数据位数错误
        case 0x0A: // EM_mifs_BYTECOUNTERR：卡片回送数据字节数错误
        case 0x11: // EM_mifs_OVFLERR：卡片回送数据溢出
        case 0x12: // EM_mifs_FRAMINGERR：数据帧错误
        case 0x13: // EM_mifs_UNKNOWN_COMMAND：设备发送非法命令
        case 0x16: // EM_mifs_INTERFACEERR：射频卡模块接口错误
        case 0x17: // EM_mifs_RECBUF_OVERFLOW：存放回送数据的接收缓冲区溢出
        case 0xA7: // EM_mifs_CARDTIMEOUT：超时无响应
            return self.RF_OTHER_ERR;
        default:
            return nymphError.getError(innerCode);}
};

module.exports = icError;
},{"error":"error"}],35:[function(require,module,exports){
/**
 * #  M1 卡
 *
 * @class nymph.dev.cardReader.ic.M1Card
 *
 * 本模块介绍了 M1 卡提供的 API。
 *
 * Mifare卡是一种带安全机制的存储卡。它基于TYPE A模式并符合ISO/IEC 14443-3协议。
 * 卡规格，其根据容量大小，又可以分为S50结构卡片和S70结构卡片。
 * Mifare S50结构的卡容量为8Kbit。分为16个扇区，每个扇区分为4块，每块大小为16字节。
 * Mifare S70结构的卡容量为32Kbit。分为40个扇区，其中前面的32个扇区分为4块，每块大小为16字节，后面的8个扇区分为16个块，每个块大小为16字节。
 *
 * 安全机制
 * Mifare卡每个扇区的密钥分为A、B两套，可以设置成不同的访问权限。只有密钥认证成功后才能对该扇区进行操作。扇区最后1块存放密钥。
 * Mifare卡同时只能有一个扇区通过认证。一个扇区一旦通过认证，先前通过认证的其他扇区将不能进行访问，除非重新进行认证。
 *
 * 数据块
 * Mifare卡的块可以用于下面两个功能中的一个：
 * 存储块：存储通用数据
 * 数值块：每个块以数值块方式存放一个32位整数，可以通过加、减命令进行操作。该功能可用于电子钱包。
 *
 * @constructor
 * @private
 * 创建一个新的 M1 卡实例。
 *
 * 此构造函数不提供给用户调用，仅由 nymph.dev.cardReader 负责调用来创建新的 M1 卡示例。**
 * @param {Object} cardInfo 创建一个 M1 卡实例需要的卡片信息。
 * @param {nymph.dev.cardReader.CardType} cardInfo.type 卡片类型。
 * @param {nymph.dev.cardReader.SlotType} cardInfo.slot 卡槽类型。
 * @param {String} cardInfo.cardSn 卡片序列号。
 * @param {Boolean} cardInfo.isInitialized 卡片是否已被初始化。
 */

'use strict';

var hermes = require('hermes'),
    Buffer = require('buffer').Buffer,
    nymphError = require('error'),
    tools = require('tools'),
    encoding = require('nymph-encoding'),
    icError = require('./ic-error');

var M1Card = function (cardInfo) {
    /**
     * @property {nymph.dev.cardReader.CardType} type 卡片类型。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    this.type = cardInfo.type;

    /**
     * @property {nymph.dev.cardReader.SlotType} slot 卡槽类型。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    this.slot = cardInfo.slot;

    /**
     * @property {String} cardSn 卡片序列号。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    this.cardSn = cardInfo.data;

    if (cardInfo.options === null || typeof cardInfo.options === 'undefined') {
        this.options = {};
    } else {
        this.options = cardInfo.options;
    }
    if (cardInfo.isInitialized) {
        /**
         * @property {Boolean} isInitialized 卡片是否已经初始化。
         * @member nymph.dev.cardReader.ic.M1Card
         */
        this.isInitialized = cardInfo.isInitialized;
        this.instanceId = cardInfo.instanceId;

    } else {
        this.isInitialized = false;
        this.instanceId = hermes.NULL;
    }
};

M1Card.prototype = {
    constructor: M1Card,

    PLUGINID: '4f3bcf0994854dafd7c4164e37d855de',

    /**
     * @ignore
     * 此接口不暴露给用户调用，由 cardReader 的 waitForCard 在创建卡实例的时候调用。
     */
    init: function (callback) {
        var self = this;
        if (!self.isInitialized) {
            hermes.exec(this.PLUGINID, this.instanceId, 'init', [this.type, this.slot, this.options], function (err, result) {
                if (err) {
                    err.code = self.getError(err.innerCode);
                    callback.call(self, err);
                } else {
                    self.instanceId = result.instanceId;
                    self.isInitialized = true;
                    callback.call(self, null);
                }
            });
        } else {
            callback.call(self, null);
        }

    },

    /**
     * @method release
     * 释放卡片。当使用完卡实例后调用此接口释放卡实例。
     *
     *     // m1Card 为 cardReader 的 waitForCard 接口回调返回的卡实例
     *     try {
     *         m1Card.release();
     *     } catch (err) {
     *         // 异常处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    release: function () {
        var result, errorCode;

        result = hermes.exec(this.PLUGINID, this.instanceId, 'release');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to release card.', innerCode: result.innerCode};
        }
    },

    /**
     * @method authority
     * 对 M1 卡指定的扇区进行认证。
     *
     *     try {
     *       var key = new Buffer([0x01, 0x02, 0x03, 0x04, 0x05, 0x06]);
     *       // m1Card 为 cardReader 的 waitForCard 接口回调返回的卡实例
     *       m1Card.authority(m1Card.KeyType.TYPEA, 10, key);
     *     } catch (err) {
     *       // 扇区认证失败的处理。
     *     }
     *
     * @param {nymph.dev.cardReader.ic.M1Card.KeyType} keyType 进行 M1 卡认证时所需指定的密钥类型。
     * @param {Number} sectorNum 要进行认证的扇区号。
     * @param {Object/String/Array} key 用来进行认证的密钥，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    authority: function (keyType, sectorNum, key) {
        // 一些通讯操作。
        var result, errorCode, keyBase64;
        if(!keyType || !sectorNum || !key) {
            throw {code: nymphError.PARAM_ERR, message: 'Please make sure you have passed in every parameter.'};
        }
        if(keyType !== KeyType.TYPEA && keyType !== KeyType.TYPEB) {
            throw {code: nymphError.PARAM_ERR, message: 'keyType is invalid.'};
        }
        if (typeof sectorNum !== 'number') {
            throw {code: nymphError.PARAM_ERR, message: 'sectorNum is invalid.'};
        }

        try {
            keyBase64 = tools.toBase64(key);
        } catch (err) {
            throw {code: nymphError.PARAM_ERR, message: 'key is invalid.'};
        }

        result = hermes.exec(this.PLUGINID, this.instanceId, 'authority', [this.cardSn, keyType, sectorNum,keyBase64]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to authorize the sector.', innerCode: result.innerCode};
        }
    },

    /**
     * @method readBlock
     * 读取 M1 卡中指定的数据块。
     *
     *     try {
     *       // m1Card 为 cardReader 的 waitForCard 接口回调返回的卡实例
     *       var data = m1Card.readBlock(14);
     *     } catch (err) {
     *       // 读取数据块失败的处理。
     *     }
     *
     * @param {Number} blockNum 要读取的数据块号。
     * @return {Object} 读取出来的数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    readBlock: function (blockNum) {
        var result, errorCode;
        if (typeof blockNum !== 'number') {
            throw {code: nymphError.PARAM_ERR, message: 'blockNum is invalid.'};
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'readBlock', [blockNum]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to read data from M1 card.', innerCode: result.innerCode};
        }

        if (result.data) {
            return new Buffer(result.data, 'base64');
        }
        return null;
    },

    /**
     * @method writeBlock
     * 写入数据到 M1 卡中指定的数据块。
     *
     *     try {
     *       var data = new Buffer([0x00, 0x01, 0x02, 0x03, ...]);
     *       // m1Card 为 cardReader 的 waitForCard 接口回调返回的卡实例
     *       m1Card.writeBlock(14, data);
     *     } catch (err) {
     *       // 写入数据块失败的处理。
     *     }
     *
     * @param {Number} blockNum 要写入的数据块号。
     * @param {Object/String/Array} data 要写入数据块的数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    writeBlock: function (blockNum, data) {
        var result, errorCode, dataBase64;
        if(!blockNum || !data) {
            throw {code: nymphError.PARAM_ERR, message: 'Please make sure you have passed in every parameter.'};
        }
        if (typeof blockNum !== 'number') {
            throw {code: nymphError.PARAM_ERR, message: 'blockNum is invalid.'};
        }
        try {
            dataBase64 = tools.toBase64(data);
        } catch (err) {
            throw {code: nymphError.PARAM_ERR, message: 'data is invalid.'};
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'writeBlock', [blockNum, dataBase64]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to write data to M1 card.', innerCode: result.innerCode};
        }
    },

    /**
     * @method operateBlock
     * 对指定数据块进行充、减值、备份操作，将操作后的值更新到另一指定的数据块。
     *
     *     // 将 13 块的数据加 20 后写入 14 块。
     *     try {
     *       // m1Card 为 cardReader 的 waitForCard 接口回调返回的卡实例
     *       m1Card.operateBlock(m1Card.Operation.INCREMENT, 13, 14, 20);
     *     } catch (err) {
     *       // 写入数据块失败的处理。
     *     }
     *
     * @param {nymph.dev.cardReader.ic.M1Card.Operation} operation 要执行的操作。
     * @param {Number} srcBlock 要操作的数据块号。
     * @param {Number} desBlock 要更新的数据块号。
     * @param {Number} value 待操作的数据值。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.M1Card
     */
    operateBlock: function (operation, srcBlock, desBlock, value) {
        var result, errorCode, actualValue;
        if(!operation || !srcBlock) {
            throw {code: nymphError.PARAM_ERR, message: 'Please make sure you have passed in required parameters.'};
        }
        if(operation !== Operation.DECREMENT && operation !== Operation.INCREMENT && operation !== Operation.RESTORE) {
            throw {code: nymphError.PARAM_ERR, message: 'Please make sure you have pass in a valid operation.'};
        }
        if (typeof srcBlock !== 'number') {
            throw {code: nymphError.PARAM_ERR, message: 'srcBlock should be a number.'};
        }

        if (operation !== Operation.RESTORE && ( !desBlock || !value)) {
            throw {code: nymphError.PARAM_ERR, message: 'You should pass in desBlock and value when operation is INCREMENT or DECREMENT.'};
        }

        if (value) {
            if (typeof value !== 'number') {
                throw {code: nymphError.PARAM_ERR, message: 'value should be a number.'};
            }
            var valueBuf = encoding.hexStringToBuffer(tools.padStr(value.toString(16), 8, '0', 'left'));
            actualValue = valueBuf.toString('base64');
        } else {
            actualValue = null;
        }

        result = hermes.exec(this.PLUGINID, this.instanceId, 'operateBlock', [operation, srcBlock, desBlock, actualValue]);
        console.log('operateBlock 结果：' + JSON.stringify(result));
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to operate M1 card.', innerCode: result.innerCode};
        }
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @return {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        var self = this;
        switch (innerCode) {
            case -10300: // M1 卡基础错误码
                return ErrorCode.M1_CARD_BASE_ERR;
            case -10301: // M1卡认证失败
            case 0x04: // EM_mifs_AUTHERR
                return ErrorCode.M1_CARD_AUTH_ERR;
            case -10302: // 扇区未认证
            case 0x08: // EM_mifs_NOTAUTHERR：卡片未认证
                return ErrorCode.M1_CARD_NOT_AUTH;
            case -10303: // 数值块数据格式有误
            case 0x18: // EM_mifs_VALERR：对 Mifare 卡进行数值块操作时数值块值错误
                return ErrorCode.M1_CARD_DATA_BLOCK_ERR;
            case -10304: // 模块未开启
                return ErrorCode.M1_CARD_NOT_OPENED;
            case -10305: // 卡片未激活
            case 0xB3: // EM_mifs_CARDNOACT：卡片未激活
                return ErrorCode.M1_CARD_NOT_ACTIVATED;
            case -10306: // 卡片操作类型错
            case 0x19: // EM_mifs_ERRTYPE：错误的卡类型
                return ErrorCode.M1_CARD_TYPE_ERR;
            case -10399:
                return ErrorCode.M1_CARD_OTHER_ERR; // 其他异常错误
            default:
                var code = icError.getError(innerCode);
                if (code !== nymphError.UNKNOWN) {
                    return code;
                }
                return nymphError.getError(innerCode);
        }
    }
};

/**
 * # M1 卡错误码
 * @class nymph.dev.cardReader.ic.M1Card.ErrorCode
 */
var ErrorCode = {
    /**
     * @property {String} [M1_CARD_BASE_ERR='M1_CARD_BASE_ERR'] M1 卡基础错误
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_BASE_ERR: 'M1_CARD_BASE_ERR',

    /**
     * @property {String} [M1_CARD_AUTH_ERR='M1_CARD_AUTH_ERR'] M1 卡认证失败
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_AUTH_ERR: 'M1_CARD_AUTH_ERR',

    /**
     * @property {String} [M1_CARD_NOT_AUTH='M1_CARD_NOT_AUTH'] 扇区未认证/卡片未认证
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_NOT_AUTH: 'M1_CARD_NOT_AUTH',

    /**
     * @property {String} [M1_CARD_DATA_BLOCK_ERR='M1_CARD_DATA_BLOCK_ERR'] 数值块数据格式有误/对 Mifare 卡进行数值块操作时数值块值错误
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_DATA_BLOCK_ERR: 'M1_CARD_DATA_BLOCK_ERR',

    /**
     * @property {String} [M1_CARD_NOT_OPENED='M1_CARD_NOT_OPENED'] 模块未开启
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_NOT_OPENED: 'M1_CARD_NOT_OPENED',

    /**
     * @property {String} [M1_CARD_NOT_ACTIVATED='M1_CARD_NOT_ACTIVATED'] 卡片未激活
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_NOT_ACTIVATED: 'M1_CARD_NOT_ACTIVATED',

    /**
     * @property {String} [M1_CARD_TYPE_ERR='M1_CARD_TYPE_ERR'] 卡片操作类型错/错误的卡类
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_TYPE_ERR: 'M1_CARD_TYPE_ERR',

    /**
     * @property {String} [M1_CARD_OTHER_ERR='M1_CARD_OTHER_ERR'] 其他错误异常
     * @member nymph.dev.cardReader.ic.M1Card.ErrorCode
     */
    M1_CARD_OTHER_ERR: 'M1_CARD_OTHER_ERR',
};

/**
 * @property {nymph.dev.cardReader.ic.M1Card.ErrorCode} ErrorCode M1 卡错误码
 * @member nymph.dev.cardReader.ic.M1Card
 */
M1Card.ErrorCode = ErrorCode;

/**
 * 进行 M1 卡认证时所需指定的密钥类型
 * @class nymph.dev.cardReader.ic.M1Card.KeyType
 * @member nymph.dev.cardReader.ic.M1Card
 */
var KeyType = {
    /**
     * @property {String} [TYPEA='TYPEA'] A 套密钥。
     */
    TYPEA: 'TYPEA',

    /**
     * @property {String} [TYPEB='TYPEB'] B 套密钥。
     */
    TYPEB: 'TYPEB'
};

/**
 * @property {nymph.dev.cardReader.ic.M1Card.KeyType} KeyType 进行 M1 卡认证时所需指定的密钥类型。
 * @member nymph.dev.cardReader.ic.M1Card
 */
M1Card.KeyType = KeyType;

/**
 * M1 卡在做操作的时候的处理方式。
 * @class nymph.dev.cardReader.ic.M1Card.Operation
 */
var Operation = {
    /**
     * @property {String} [INCREMENT='INCREMENT'] 把指定的值加至一数值块中。
     */
    INCREMENT: 'INCREMENT',

    /**
     *  @property {String} [DECREMENT='DECREMENT'] 从一数值块中减去指定的值。
     */
    DECREMENT: 'DECREMENT',

    /**
     * @property {String} [RESTORE='RESTORE'] 拷贝指定数值块的内容到卡的 RAM 寄存器。
     */
    RESTORE: 'RESTORE'
};

/**
 * @property {nymph.dev.cardReader.ic.M1Card.Operation} Operation M1 卡在做操作的时候的处理方式。
 * @member nymph.dev.cardReader.ic.M1Card
 */
M1Card.Operation = Operation;

module.exports = M1Card;

},{"./ic-error":34,"buffer":"buffer","error":"error","hermes":"hermes","nymph-encoding":"nymph-encoding","tools":"tools"}],36:[function(require,module,exports){
'use strict';

/**
 * # 上电模式
 * @class nymph.dev.cardReader.ic.PowerMode
 */
var PowerMode = {
  /**
   * @property {Number} [EMVMODE=0x00] 按照 EMV2000 规范上电（默认模式）。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  EMVMODE: 0x00,

  /**
   * @property {Number} [MODE384=0x01] 按照 38400BPS 速率上电。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  MODE384: 0x01,

  /**
   * @property {Number} [MODE192=0x02] 按照 19200BPS 速率上电。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  MODE192: 0x02,

  /**
   * @property {Number} [ISOMODE=0x03] 按照 ISO 规范上电（有 PPS 协议）。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  ISOMODE: 0x03,

  /**
   * @property {Number} [SHRMODE=0x04] 按照社保卡规范上电。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  SHBMODE: 0x04,

  /**
   * @property {Number} [MODE576=0x05] 按照 57600BPS 速率上电。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  MODE576: 0x05,

  /**
   * @property {Number} [TCRMODE=0x06] 按照 9600，ISO 规范上电，不支持 PPS。
   * @member nymph.dev.cardReader.ic.PowerMode
   */
  TCRMODE: 0x06
};

module.exports = PowerMode;

},{}],37:[function(require,module,exports){
'use strict';

/**
 * #  SIM4428 卡
 *
 * @class nymph.dev.cardReader.ic.Sim4428Card
 *
 * 本模块介绍了 SIM4428 卡提供的 API。
 *
 * @experimental 规范尚未制定完成！
 */
var Sim4428Card;
module.exports = Sim4428Card;

},{}],38:[function(require,module,exports){
'use strict';

/**
 * #  SIM4442 卡
 *
 * @class nymph.dev.cardReader.ic.Sim4442Card
 *
 * 本模块介绍了 SIM4442 卡提供的 API。
 *
 * @constructor
 * @private
 * 创建一个新的 SIM4442 卡实例。
 *
 * **此构造函数不提供给用户调用，仅由 nymph.dev.cardReader 负责调用来创建新的 SIM4442 卡实例。**
 * @param {Object} cardInfo 创建一个 SIM4442 卡实例需要的卡片信息。
 * @param {nymph.dev.cardReader.CardType} cardInfo.type 卡片类型。
 * @param {nymph.dev.cardReader.SlotType} cardInfo.slot 卡槽类型。
 * @param {Boolean} cardInfo.isInitialized 卡片是否已被初始化。
 * @param {Object} cardInfo.powerUpData 如果卡片已被初始化，则有上电数据。数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
 */
var hermes = require('hermes'),
    Buffer = require('buffer').Buffer,
    nymphError = require('error'),
    tools = require('tools'),
    icError = require('./ic-error');

var Sim4442Card = function(cardInfo){
    /**
     * @property {nymph.dev.cardReader.CardType} type 卡片类型。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    this.type = cardInfo.type;

    /**
     * @property {nymph.dev.cardReader.SlotType} slot 卡槽类型。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    this.slot = cardInfo.slot;

    if (cardInfo.options === null || typeof cardInfo.options === 'undefined') {
        this.options = {};
    } else {
        this.options = cardInfo.options;
    }

    if (cardInfo.isInitialized) {
        /**
         * @property {Boolean} isInitialized 卡片是否已经初始化。
         * @member nymph.dev.cardReader.ic.Sim4442Card
         */
        this.isInitialized = cardInfo.isInitialized;
        this.instanceId = cardInfo.instanceId;

        /**
         * @property {Object} powerUpData 如果卡片已被初始化，则有上电数据。数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
         * @member nymph.dev.cardReader.ic.Sim4442Card
         */
        this.powerUpData = new Buffer(cardInfo.data, 'base64');

    } else {
        this.isInitialized = false;
        this.instanceId = hermes.NULL;
    }
};
Sim4442Card.prototype = {

    constructor: Sim4442Card,

    PLUGINID: '4f3bcf0994854dafd7c4164e37d855de',

    /**
     * @ignore
     * 此接口不暴露给用户调用，由 cardReader 的 waitForCard 在创建卡实例的时候调用。
     */
    init:function(callback){
        var self = this;
        if(!self.isInitialized){
            hermes.exec(self.PLUGINID, self.instanceId, 'init', [self.type, self.slot, self.options], function (err, result){
                if(err){
                    err.code = self.getError(err.innerCode);
                    callback.call(self, err);
                } else {
                    self.instanceId = result.instanceId;
                    self.powerUpData = new Buffer(result.data, 'base64');
                    self.isInitialized = true;
                    callback.call(self, null);
                }
            });
        }
    },
    /**
     * @method release
     * 释放卡片。当使用完卡实例后调用此接口释放卡实例。
     *
     *     //sim4442 为 cardReader 的 waitForCard 接口回调返回的卡实例
     *     try {
     *         sim4442.release();
     *     } catch (err) {
     *         // 异常处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    release: function () {
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'release');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Release card failed.', innerCode: result.innerCode};
        }
    },
    /**
     * @method verify
     *  校验4442卡密码，最多允许校验错误两次，三次则锁定卡片。 校验正确后，已检验错误的次数会清零，可调用readErrorCount查询错误次数。
     *
     *     try {
     *          var password = 'FFFFFF';
     *          sim4442.verify(password);
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @param {Object/String/Array} password 4442卡密码，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    verify:function(password){
        var self = this, result, errorCode, passwordBase64;
        if(password){
            passwordBase64 = tools.toBase64(password);
        }
        result = hermes.exec(self.PLUGINID, self.instanceId, 'verify', [passwordBase64]);
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'verify password failed.', innerCode: result.innerCode};
        }
    },
    /**
     * @method changeKey
     * 修改4442卡操作密码。只有校验密码后才能修改密码，否则返回“密码未校验”。
     *
     *     try {
     *          var password = 'FFFFFF';
     *          sim4442.changeKey(password);
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @param {Object/String/Array} changePassword 要修改的新密码，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    changeKey:function(changePassword){
        var self = this, result, errorCode, changePasswordBase64;
        if(changePassword){
            changePasswordBase64 = tools.toBase64(changePassword);
        }
        result = hermes.exec(self.PLUGINID, self.instanceId, 'changeKey', [changePasswordBase64]);
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'change password failed.', innerCode: result.innerCode};
        }
    },

    /**
     * @method unchangeWithCheck
     * 检查4442卡指定地址的数据内容，成功后设置为写保护状态
     * 1.要求输入的数据必须和指定地址的原有数据相同，否则不会改变该地址数据的写保护状态。
     * 2.写保护设置后不可逆，因此每设置一个地址的写保护后，存储器可用的空间就少一个字节。此功能一般用于将固化不需改变的内容写入卡片。
     * 3.如果所设置的地址事先已经被设置为写保护状态，则本次设置总是返回成功。
     *
     *     try {
     *          var checkAddress = 31,checkData = [0x55];
     *          sim4442.unchangeWithCheck(checkAddress, checkData);
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @param {Number} address 指定地址，取值范围[0,31]
     * @param {Object/String/Array} data 与指定地址相同的数据，占一个字节，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     *
     */
    unchangeWithCheck:function(address, data){
        var self = this, result, errorCode, dataBase64;
        if(data){
            dataBase64 = tools.toBase64(data);
        }
        result = hermes.exec(self.PLUGINID, self.instanceId, 'unchangeWithCheck', [address, dataBase64]);
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'check data failed.', innerCode: result.innerCode};
        }
    },
    /**
     * @method readErrorCount
     * 读取密码校验已错误的个数
     *
     *     try {
     *          var errCount = sim4442.readErrorCount();
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @return {Number} 校验密码错误的次数，范围[0,3]，0表示之前密码校验成功了，没有出错；3表示已经校验错误3次，卡片已经锁定。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    readErrorCount:function(){
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'readErrorCount');
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'read error count failed.', innerCode: result.innerCode};
        } else {
            return result.data;
        }
    },
    /**
     * @method readStatus
     * 读取4442卡保护区指定地址的写保护状态 该内容用于指示主存储器前32字节中对应地址处数据的写保护状态
     *
     *     try {
     *          var address = 0;
     *          var status = sim4442.readStatus(address);
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @param {Number} address 要读取的地址，范围[0,31]
     * @return {Boolean} 该地址是否可修改，true表示该地址数据为可修改, false表示该地址数据为不可修改
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    readStatus:function(address){
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'readStatus',[address]);
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'read status failed.', innerCode: result.innerCode};
        } else {
            return result.data;
        }
    },
    /**
     * @method read
     * 从4442卡指定地址开始读取指定长度的数据
     * 由于4442卡片的存储空间有限，读取的数据起始地址和长度之和不能超过存储器的末尾，即最大不超过第256字节。
     *
     *     try {
     *           var readAddress = 0,readLength=40,
     *           var readBuffer = sim4442.read(readAddress, readLength);
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @param {Number} address 读取数据的起始地址,范围[0,255]
     * @param {Number} length 读取数据的长度，范围[1,256]
     * @return {Object} 读取到的数据，数据类型[Buffer](https://nodejs.org/api/buffer.html)
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    read:function(address, length){
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'read', [address, length]);
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'read data failed.', innerCode: result.innerCode};
        } else {
            return new Buffer(result.data, 'base64');
        }
    },
    /**
     * @method write
     * 向4442卡指定地址开始写入指定长度的数据
     * 由于4442卡片的存储空间有限，此函数写入的数据起始地址和长度之和不能超过存储器的末尾，即最大不超过第256字节。
     * 写入成功不表示将数据写入指定地址，要执行读取数据操作确认数据是否写入。
     *
     *     try {
     *           var writeAddress = 6, writeData = [0xaa, 0xbb, 0xcc];
     *           sim4442.write(writeAddress, writeData);
     *     } catch(err){
     *          // 异常处理
     *     }
     *
     * @param {Number} address 要写入数据的起始地址，范围[0,255]
     * @param {Object/String/Array} data 要写入的数据，数据长度[1,256]，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader.ic.Sim4442Card
     */
    write:function(address, data){
        var self = this, result, errorCode, dataBase64;
        if(data){
            dataBase64 = tools.toBase64(data);
        }
        result = hermes.exec(self.PLUGINID, self.instanceId, 'write', [address, dataBase64]);
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'read data failed.', innerCode: result.innerCode};
        }
    },
    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @return {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        var self = this;
        switch (innerCode) {
            case -10400: // SIM4442 卡基础错误码
                return ErrorCode.SIM4442_CARD_BASE_ERR;
            case 0x44:
                return ErrorCode.SIM4442_CARD_CHGDISABLE;
            case 0xe7:
                return ErrorCode.SIM4442_CARD_NOVERIFY;
            case -10499:
                return ErrorCode.SIM4442_CARD_OTHER_ERR; // 其他异常错误
            default:
                var code = icError.getError(innerCode);
                if (code !== nymphError.UNKNOWN) {
                    return code;
                }
                return nymphError.getError(innerCode);
        }
    },
};

/**
 * # Sim4442 卡错误码
 * @class nymph.dev.cardReader.ic.Sim4442Card.ErrorCode
 */
var ErrorCode = {
    /**
     * @property {String} [SIM4442_CARD_BASE_ERR='SIM4442_CARD_BASE_ERR'] SIM4442 卡基础错误
     * @member nymph.dev.cardReader.ic.Sim4442Card.ErrorCode
     */
    SIM4442_CARD_BASE_ERR: 'SIM4442_CARD_BASE_ERR',

    /**
     * @property {String} [SIM4442_CARD_CHGDISABLE='SIM4442_CARD_CHGDISABLE'] 地址已被事先设置为不可修改。
     * @member nymph.dev.cardReader.ic.Sim4442Card.ErrorCode
     */
    SIM4442_CARD_CHGDISABLE:'SIM4442_CARD_CHGDISABLE',

    /**
     * @property {String} [SIM4442_CARD_NOVERIFY='SIM4442_CARD_NOVERIFY'] 卡未校验。
     * @member nymph.dev.cardReader.ic.Sim4442Card.ErrorCode
     */
    SIM4442_CARD_NOVERIFY:'SIM4442_CARD_NOVERIFY',

    /**
     * @property {String} [SIM4442_CARD_OTHER_ERR='SIM4442_CARD_OTHER_ERR'] 其他错误异常
     * @member nymph.dev.cardReader.ic.Sim4442Card.ErrorCode
     */
    SIM4442_CARD_OTHER_ERR: 'SIM4442_CARD_OTHER_ERR',
};

/**
 * @property {nymph.dev.cardReader.ic.Sim4442Card.ErrorCode} ErrorCode 错误码
 * @member nymph.dev.cardReader.ic.Sim4442Card
 */
Sim4442Card.ErrorCode = ErrorCode;

module.exports = Sim4442Card;

},{"./ic-error":34,"buffer":"buffer","error":"error","hermes":"hermes","tools":"tools"}],39:[function(require,module,exports){
'use strict';

/**
 * # 电压模式
 * @class nymph.dev.cardReader.ic.VolMode
 */
var VolMode = {
  /**
   * @property {Number} [VOL18=0x02] 1.8V 卡系统。
   * @member nymph.dev.cardReader.ic.VolMode
   */
  VOL18: 0x02,

  /**
   * @property {Number} [VOL3=0x01] 3V 卡系统。
   * @member nymph.dev.cardReader.ic.VolMode
   */
  VOL3: 0x01,

  /**
   * @property {Number} [VOL5=0x00] 5V 卡系统（默认模式）。
   * @member nymph.dev.cardReader.ic.VolMode
   */
  VOL5: 0x00
};

module.exports = VolMode;

},{}],40:[function(require,module,exports){
'use strict';

/**
 * # 磁条卡模块，包含以下两部分内容：
 *
 * - 磁条卡类：用来创建磁条卡对象。
 * - 所有与磁条卡相关的类和对象。
 *
 * 此模块通过 `card-reader` 来获取，如下：
 *
 *     var magcard = require('card-reader').magcard;
 *
 * @class nymph.dev.cardReader.magcard
 * @singleton
 */

/**
 * # 磁条卡类
 *
 * @class nymph.dev.cardReader.magcard.Magcard
 * 磁条卡的具体操作流程及代码示例请参见[“磁条卡开发指南”](#!/guide/magcard)。
 * @constructor
 * @private
 * 创建一个新的磁条卡实例。
 *
 * **此构造函数不提供给用户调用，仅由 {@link nymph.dev.cardReader cardReader} 负责调用来创建新的 M1 卡示例。**
 * @param {Object} cardInfo 创建一个 CPU 卡实例需要的卡片信息。
 * @param {nymph.dev.cardReader.CardType} cardInfo.type 卡片类型。
 * @param {nymph.dev.cardReader.SlotType} cardInfo.slot 卡槽类型。
 * @param {Boolean} cardInfo.isInitialized 卡片是否已被初始化。
 * @param {Object} cardInfo.data 磁道数据。
 * @param {nymph.dev.cardReader.magcard.Track} cardInfo.data.track1 一磁道数据。
 * @param {nymph.dev.cardReader.magcard.Track} cardInfo.data.track2 二磁道数据。
 * @param {nymph.dev.cardReader.magcard.Track} cardInfo.data.track3 三磁道数据。
 */
// 引用模块内部部件。
var magcard = {},
    Track = require('./track'),

// 引用外部模块。
    hermes = require('hermes'),
    nymphError = require('error');

var Magcard = function (cardInfo) {
  var self = this, tracks = cardInfo.data;
  /**
   * @property {nymph.dev.cardReader.CardType} type 卡片类型。
   * @member nymph.dev.cardReader.magcard.Magcard
   */
  self.type = cardInfo.type;

  /**
   * @property {nymph.dev.cardReader.SlotType} slot 卡槽类型。
   * @member nymph.dev.cardReader.magcard.Magcard
   */
  self.slot = cardInfo.slot;

  if (cardInfo.options === null || typeof cardInfo.options === 'undefined') {
      self.options = {};
  } else {
      self.options = cardInfo.options;
  }

  self.instanceId = cardInfo.instanceId;

  /**
   * @property {Boolean} isInitialized 卡片是否已经初始化。
   * @member nymph.dev.cardReader.magcard.Magcard
   */
  self.isInitialized = cardInfo.isInitialized;

  /**
   * @property {nymph.dev.cardReader.magcard.Track[]} [tracks=[]] 磁道数据。
   * @member nymph.dev.cardReader.magcard.Magcard
   */
  self.tracks = [];

  if (tracks.track1) {
    var track1 = tracks.track1;
    self.tracks[0] = new Track(track1.flag, track1.data, track1.errMsg);
  } else {
    self.tracks[0] = new Track('NULL', null, 'null');
  }

  if (tracks.track2) {
    var track2 = tracks.track2;
    self.tracks[1] = new Track(track2.flag, track2.data, track2.errMsg);
  } else {
    self.tracks[1] = new Track('NULL', null, 'null');
  }

  if (tracks.track3) {
    var track3 = tracks.track3;
    self.tracks[2] = new Track(track3.flag, track3.data, track3.errMsg);
  } else {
    self.tracks[2] = new Track('NULL', null, 'null');
  }
};

Magcard.prototype = {
  constructor: Magcard,

  PLUGINID: '4f3bcf0994854dafd7c4164e37d855de',

  /**
   * @ignore
   * 此接口不暴露给用户调用，由 cardReader 的 waitForCard 和 getCards 在创建卡实例的时候调用。
   */
  init: function (callback) {
    var self = this;

    if (!self.isInitialized) {
      hermes.exec(this.PLUGINID, this.instanceId, 'init', [this.type, this.slot, this.options], function (err, result) {
        if (err) {
          err.code = self.getError(err.innerCode);
          callback.call(self, err);
        } else {
          self.instanceId = result.instanceId;
          self.isInitialized = result.isInitialized;
          callback.call(self, null);
        }
      });
    } else {
      callback.call(self, null);
    }
  },

  /**
   * @method release
   * 释放卡片。当使用完卡实例后调用此接口释放卡实例。
   *
   *     try {
   *         // magcard 为 cardReader 的 {@link nymph.dev.cardReader#waitForCard waitForCard} 接口回调返回的卡实例
   *         magcard.release();
   *     } catch {err} {
   *         // 异常处理
   *     }
   * @member nymph.dev.cardReader.magcard.Magcard
   */
  release: function () {
    var result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'release');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: 'Release card failed.', innerCode: result.innerCode};
    }
  },

  /**
   * @ignore
   * @param {Number} innerCode 底层上传的返回码
   * @returns {String} 返回码对应的字符串
   */
  getError: function (innerCode) {
    switch (innerCode) {
      case -5001:// 无刷卡
        return ErrorCode.MAGCARD_NO_SWIPED;
      case -5999:// 磁卡其他异常错误
      case 0x02: // EM_mag_NODATA，无数据
      case 0x03:// EM_mag_NEEDSTART，未启动刷卡
      case 0x74: // EM_mag_MANUALEXP，手动刷卡
        return ErrorCode.MAGCARD_OTHER_ERR;
      case 65281: // 主控在磁道状态出错的时候返回的错误值
        return ErrorCode.MAGCARD_TRACK_FLAG_ERR;
      case -5000:// 磁卡基础错误码
        return ErrorCode.MAGCARD_BASE_ERR;
      default:
        return nymphError.getError(innerCode);
    }
  },
};

/**
 * # 磁卡错误码
 * @class nymph.dev.cardReader.magcard.Magcard.ErrorCode
 */
var ErrorCode = {
  /**
   * @property {String} [MAGCARD_BASE_ERR='MAGCARD_BASE_ERR'] 磁卡基础错误。
   * @member nymph.dev.cardReader.magcard.Magcard.ErrorCode
   */
  MAGCARD_BASE_ERR: 'MAGCARD_BASE_ERR',

  /**
   * @property {String} [MAGCARD_NO_SWIPED='MAGCARD_NO_SWIPED'] 缺卡。
   * @member nymph.dev.cardReader.magcard.Magcard.ErrorCode
   */
  MAGCARD_NO_SWIPED: 'MAGCARD_NO_SWIPED',

  /**
   * @property {String} [MAGCARD_TRACK_FLAG_ERR='MAGCARD_TRACK_FLAG_ERR'] 磁道状态出错。
   * @member nymph.dev.cardReader.magcard.Magcard.ErrorCode
   */
  MAGCARD_TRACK_FLAG_ERR: 'MAGCARD_TRACK_FLAG_ERR',

  /**
   * @property {String} [MAGCARD_OTHER_ERR='MAGCARD_OTHER_ERR'] 磁卡其他异常错误。
   * @member nymph.dev.cardReader.magcard.Magcard.ErrorCode
   */
  MAGCARD_OTHER_ERR: 'MAGCARD_OTHER_ERR',
};

/**
 * # 磁道标识
 * @class nymph.dev.cardReader.magcard.TrackFlag
 */
var TrackFlag = {
    /**
     * @property {String} SUCCESS 正确
     */
    SUCCESS: 'SUCCESS',

    /**
     * @property {String} NULL 磁道数据为空
     */
    NULL: 'NULL',

    /**
     * @property {String} HEAD_ERR 未找到起始
     */
    HEAD_ERR: 'HEAD_ERR',

    /**
     * @property {String} PARERR 某字节校验错
     */
    PARERR: 'PARERR',

    /**
     * @property {String} TAIL_ERR 未找到结束
     */
    TAIL_ERR: 'TAIL_ERR',

    /**
     * @property {String} LRC_ERR 总校验错
     */
    LRC_ERR: 'LRC_ERR',

    /**
     * @property {String} END_ERR LRC 后不是后导零
     */
    END_ERR: 'END_ERR'
};

/**
 * @property {nymph.dev.cardReader.magcard.Magcard.ErrorCode} ErrorCode 错误码。
 * @member nymph.dev.cardReader.magcard.Magcard
 */
Magcard.ErrorCode = ErrorCode;

/**
 * @property {nymph.dev.cardReader.magcard.Magcard} Magcard 磁条卡类，用来创建该类的实例。
 * @member nymph.dev.cardReader.magcard
 */
magcard.Magcard = Magcard;

/**
 * @property {nymph.dev.cardReader.magcard.Track} Track 磁道类。
 * @member nymph.dev.cardReader.magcard
 */
magcard.Track = Track;

/**
 * @property {nymph.dev.cardReader.magcard.TrackFlag} TrackFlag 磁道标识。
 * @member nymph.dev.cardReader.magcard
 */
magcard.TrackFlag = TrackFlag;

module.exports = magcard;

},{"./track":41,"error":"error","hermes":"hermes"}],41:[function(require,module,exports){
'use strict';

// 引用外部模块。
var Buffer = require('buffer').Buffer,
    encoding = require('nymph-encoding');

/**
 * # 磁道
 * @class nymph.dev.cardReader.magcard.Track
 *
 * @constructor
 *
 * 创建一个新的磁道实例。
 *
 * @param {nymph.dev.cardReader.magcard.TrackFlag} flag 表示此磁道的状态。
 * @param {String} data 磁道数据，从底层读出来的 base64 字符串。
 * @param {String} errMsg 错误信息。
 */
var Track = function (flag, data, errMsg) {

  /**
   * @property {String} flag 表示此磁道的状态。
   * @member nymph.dev.cardReader.magcard.Track
   *
   */
  this.flag = flag;

  /**
   * @property {Object} data 磁道数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。只有当该磁道的 flag 为“SUCCESS”时，data 才有数据，否则 data 为 `null`。
   * @member nymph.dev.cardReader.magcard.Track
   */
  if (flag === 'SUCCESS') {
    if (data) {
      this.data = new Buffer(data, 'base64');
    } else {
      this.data = null;
      this.flag = 'NULL';
    }
  } else {
    this.data = null;
  }

  /**
   * @property {String} errMsg 错误信息。当该磁道的 flag 不为“SUCCESS”时，errMsg 为相对应的错误信息，否则 errMsg 为 `null`。
   * @member nymph.dev.cardReader.magcard.Track
   */
  this.errMsg = errMsg;
};

module.exports = Track;

},{"buffer":"buffer","nymph-encoding":"nymph-encoding"}],42:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],43:[function(require,module,exports){
'use strict';

// 引用外部模块。
var hermes = require('hermes');

/**
 * # 密码键盘 KAP（密钥存储区） 类。
 *
 * KAP 是整个密码键盘操作的核心。一个支付应用对应一个 KAP。
 *
 * @class nymph.dev.pinPad.Kap
 *
 * @constructor 初始化一个 KAP 实例。
 *
 * @param {Number} instanceId 密码键盘设备标识。
 * @param {Number} managerId 管理者的唯一标号。
 * @param {Number} groupId KAP 组的唯一标识。
 * @param {Number} index 某机构下对应的密钥存储区索引。
 */
var Kap = function (instanceId, managerId, groupId, index) {
    this.instanceId = instanceId;
    this.managerId = managerId;
    this.groupId = groupId;
    this.index = index;
};

/**
 * @method exist
 * KAP 是否存在。
 *
 * @return {Boolean} KAP 是否存在。
 * @member nymph.dev.pinPad.Kap
 */
Kap.prototype.exist = function () {

};

/**
 * @method create
 * 创建 KAP。
 *
 * 新创建的 KAP 处于 {@link nymph.dev.pinPad.KapMode#LOADPLIANKEYMODE KapMode.LOADPLIANKEYMODE} 模式。
 *
 * @param {String} [name=null] 该 KAP 的名称。最大为 15 个字符。
 * @param options KAP 配置。
 * @param {nymph.dev.pinPad.KeyFormat} options.format 密钥格式。<font color="red">EA_pinpad_ucCreateKap() 中 Format 中 ET_MkSkCfg, ET_DukptCfg, ET_FixedKeyCfg的配置是否需要透到应用层。 </font>
 * @param {nymph.dev.pinPad.Passport} options.passport 认证数据。
 * @member nymph.dev.pinPad.Kap
 */
Kap.prototype.create = function (name, options) {

};

/**
 * @method modify
 * 修改 KAP。
 *
 * @param options KAP 配置。
 * @param {nymph.dev.pinPad.KeyFormat} options.format 密钥格式。<font color="red">EA_pinpad_ucCreateKap() 中 Format 中 ET_MkSkCfg, ET_DukptCfg, ET_FixedKeyCfg的配置是否需要透到应用层。 </font>
 * @param {nymph.dev.pinPad.Passport} options.oldPassport 旧的认证数据。若 KAP 中无认证数据，则该参数被忽略；若 KAP 中已有认证数据，则需要和已经存在的认证数据项匹配。
 * @param {nymph.dev.pinPad.Passport} options.newPassport 新的认证数据。
 * @member nymph.dev.pinPad.Kap
 */
Kap.prototype.modify = function (options) {

};

/**
 * @method format
 * 格式化指定 KAP。
 *
 * 删除指定 KAP 中的所有密钥数据，重置配置，重置认证数据，调用该接口后 KAP 将切换到 {@link nymph.dev.pinPad.KapMode#LOADPLIANKEYMODE} 模式。
 *
 * @param {nymph.dev.pinPad.KeyFormat} [format=NORMAL] 密钥格式。
 * @member nymph.dev.pinPad.Kap
 */
Kap.prototype.format = function (format) {
};

/**
 * @method getInfo
 * 获取 KAP 信息。
 *
 * @return {Object} KAP 信息。
 * @return {nymph.dev.pinPad.KeyFormat} return.format 密钥格式。
 * @return {nymph.dev.pinPad.KapMode} return.mode KAP 的当前模式。
 * @return {Number} return.keyCount KAP 中存在的密钥总数。
 * @member nymph.dev.pinPad.Kap
 */
Kap.prototype.getInfo = function () {

};

/**
 * @method switchToWorkMode
 * 切换到工作模式。
 *
 * 从 {@link nymph.dev.pinPad.KapMode#LOADPLIANKEYMODE KapMode.LOADPLIANKEYMODE} 模式切换到 {@link nymph.dev.pinPad.KapMode#WORKMODE} 模式。
 * @member nymph.dev.pinPad.Kap
 */
Kap.prototype.switchToWorkMode = function () {

};

/**
 * # KAP 认证数据。
 *
 * @class nymph.dev.pinPad.Passport
 *
 * @cfg {String} password1 认证口令1。长度范围为：[8，23]。
 * @cfg {String} password2 认证口令2。长度范围为：[8，23]。
 */
Kap.Passport = function (cfg) {
    if (cfg) {
        this.password1 = cfg.password1;
        this.password2 = cfg.password2;
    }
};

/**
 * # KAP 模式。
 *
 * 主要用来实现明文密钥的安全策略，只有 MK/SK, DUKPT, Fixed Key 有 状态模式。
 *
 * @class nymph.dev.pinPad.KapMode
 *
 */
Kap.KapMode = {
    /**
     * @property {Number} [LOADPLIANKEYMODE=0] 加载明文密钥模式。
     * @member nymph.dev.pinPad.KapMode
     */
    LOADPLIANKEYMODE: 0,

    /**
     * @property {Number} [WORKMODE=1]
     * 工作模式。
     *
     * 在该模式下禁止直接下载明文密钥。
     * @member nymph.dev.pinPad.KapMode
     */
    WORKMODE: 1
};

module.exports = Kap;

},{"hermes":"hermes"}],44:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  EMV 交易基本参数
 * @class nymph.pay.emv.BasicParams
 */
var BasicParams = function () {
    /**
     * @property {Number} [termType=0x22] 终端类型（9F35），缺省 0x22
     * @member nymph.pay.emv.BasicParams
     */
    this.termType = 0x22;

    /**
     * @property {Object/String/Array} termCap 终端性能（9F33），数据类型为 16 进制字符串或者 [Buffer](https://nodejs.org/api/buffer.html)，缺省: [0xE0, 0xF1, 0xC8]
     * @member nymph.pay.emv.BasicParams
     */
    this.termCap = new Buffer([0xE0, 0xF1, 0xC8]);

    /**
     * @property {Object/String/Array} additionalTermCap 终端附加性能，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，缺省: [0x6F, 0x00, 0xF0, 0xF0, 0x01]
     * @member nymph.pay.emv.BasicParams
     */
    this.additionalTermCap = new Buffer([0x6F, 0x00, 0xF0, 0xF0, 0x01]);

    /**
     * @property {Object/String/Array} countryCode 国家代码（9F1A），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，缺省: [0x01, 0x56]
     * @member nymph.pay.emv.BasicParams
     */
    this.countryCode = new Buffer([0x01, 0x56]);

    /**
     * @property {Object/String/Array} curCode 货币代码（5F2A），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，缺省: [0x01, 0x56]
     * @member nymph.pay.emv.BasicParams
     */
    this.curCode = new Buffer([0x01, 0x56]);

    /**
     * @property {Object/String/Array} tacDefault TAC 缺省，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，5 个字节。缺省: [0x00, 0x00, 0x00, 0x00, 0x00]
     * @member nymph.pay.emv.BasicParams
     */
    this.tacDefault = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00]);

    /**
     * @property {Object/String/Array} tacDenial TAC 拒绝，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，5 个字节。缺省:[0x00, 0x00, 0x00, 0x00, 0x00]
     * @member nymph.pay.emv.BasicParams
     */
    this.tacDenial = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00]);

    /**
     * @property {Object/String/Array} tacOnline TAC 联机，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，5 个字节。缺省: [0x00, 0x00, 0x00, 0x00, 0x00]
     * @member nymph.pay.emv.BasicParams
     */
    this.tacOnline = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00]);

    /**
     * @property {Number} floorLimit 最低限额，以分为单位的整数，如 1111 表示 11.11 元。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Number} randomLimit 随机选择阈值，以分为单位的整数，如 1111 表示 11.11 元。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Number} randomPercent 随机选择目标百分数(10 进制 0-99)。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Number} randomPercentMax 随机选择最大目标百分数(10 进制 0-99)。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Object/String/Array} ddol 终端缺省 DDOL（[0-100]个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Object/String/Array} tdol 终端缺省 TDOL（[0-100]个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Object/String/Array} udol 终端缺省 UDOL（[0-100]个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @member nymph.pay.emv.BasicParams
     */

    /**
     * @property {Object/String/Array} tlv 保留域（其它终端数据元），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @member nymph.pay.emv.BasicParams
     */
};

BasicParams.prototype = {
    constructor: BasicParams,

    toString: function () {
        var s = '';
        for (var key in this) {
            if (this.hasOwnProperty(key)) {
                var temp = this[key];
                if (Buffer.isBuffer(temp)) {
                    s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
                } else {
                    if (typeof temp === 'object') {
                        s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
                    } else {
                        s = s + '[' + key + ']' + temp + '  ';
                    }
                }
            }
        }
        return s;
    }
};
/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.BasicParams
 */
BasicParams.pack = function (param){
    var tempCfg = new BasicParams();
    for (var k in param) {
        if (param.hasOwnProperty(k)) {
            tempCfg[k] = param[k];
        }
    }
    for (var key in tempCfg) {
        if (tempCfg.hasOwnProperty(key)) {
            switch (key) {
                case 'termType':
                    if (typeof tempCfg[key] !== 'number' || tempCfg[key] > 255 || tempCfg[key] < 0) {
                        throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should between [0x00 - 0xFF]!'};
                    }
                    break;
                case 'termCap':
                case 'additionalTermCap':
                case 'countryCode':
                case 'curCode':
                case 'tacDefault':
                case 'tacDenial':
                case 'tacOnline':
                case 'tlv':
                    tempCfg[key] = tools.toBase64(tempCfg[key]);
                    break;
                case 'ddol':
                case 'tdol':
                case 'udol':
                    if (tempCfg[key]) {
                        tempCfg[key] = tools.toBase64(tempCfg[key]);
                    } else {
                        if (tempCfg[key] === '') {
                            tempCfg[key] = null;
                        } else {
                            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should not be null or undefined!'};
                        }
                    }
                    break;
                case 'floorLimit':
                case 'randomLimit':
                    if (typeof tempCfg[key] !== 'number' || tempCfg[key] < 0) {
                        throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number above 0!'};
                    }
                    break;
                case 'randomPercent':
                case 'randomPercentMax':
                    if (typeof tempCfg[key] !== 'number' || tempCfg[key] < 0 || tempCfg[key] > 99) {
                        throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should between [0-99]!'};
                    }
                    break;
                default:
                    break;
            }
        }
    }

    return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.BasicParams
 */
BasicParams.unpack = function (param){
    var tempCfg = new BasicParams();
    for (var key in param) {
        if (param.hasOwnProperty(key)) {
            switch (key) {
                case 'termCap':
                case 'additionalTermCap':
                case 'countryCode':
                case 'curCode':
                case 'tacDefault':
                case 'tacDenial':
                case 'tacOnline':
                case 'tlv':
                case 'ddol':
                case 'tdol':
                case 'udol':
                    try {
                        tempCfg[key] = new Buffer(param[key], 'base64');
                    } catch (e) {
                        throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
                    }
                    break;
                default:
                    tempCfg[key] = param[key];
                    break;
            }
        }
    }
    return tempCfg;
};
module.exports = BasicParams;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],45:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  AID 候选项
 * @class nymph.pay.emv.CandidateAid
 */
var CandidateAid = function () {
  /**
   * @property {Object/String/Array} aid AID，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.CandidateAid
   */

  /**
   * @property {String} appLabel 应用标签
   * @member nymph.pay.emv.CandidateAid
   */

  /**
   * @property {String} appName 应用首选名
   * @member nymph.pay.emv.CandidateAid
   */

  /**
   * @property {Object/String/Array} langPref 首选语言，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.CandidateAid
   */

  /**
   * @property {Object/String/Array} kernel kernel ID及预留部分，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.CandidateAid
   */

  /**
   * @property {Number} issCTIndex 发卡行代码表索引，一个字节 hex
   * @member nymph.pay.emv.CandidateAid
   */

  /**
   * @property {String} displayName 用于显示给用户选择。优先级如下：
   *
   * - 应用首选名：如果有应用首选名，此项为应用首选名
   * - 应用标签：没有应用首选名，但是有应用标签的情况下，此项为应用标签
   * - AID：没有应用首选名，也没有应用标签时，此项为 aid
   *
   * @member nymph.pay.emv.CandidateAid
   */
};

CandidateAid.prototype = {
  constructor: CandidateAid,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.CandidateAid
 */
CandidateAid.pack = function(param){
  var tempBuf, tempCfg = new CandidateAid();
  for (var key in param) {
    if (this.hasOwnProperty(key)) {
      switch (key) {
        case 'aid':
        case 'langPref':
        case 'kernel':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        case 'issCTIndex':
          if (typeof param[key] !== 'number' || param[key] < 0 || param[key] > 255) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should between [0-255]!'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.CandidateAid
 */
CandidateAid.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new CandidateAid();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'aid':
        case 'langPref':
        case 'kernel':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  if (tempCfg.hasOwnProperty('appName')) {
    tempCfg.displayName = tempCfg.appName;
  } else if (tempCfg.hasOwnProperty('appLabel')) {
    tempCfg.displayName = tempCfg.appLabel;
  } else {
    tempCfg.displayName = encoding.bufferToHexString(tempCfg.aid);
  }
  return tempCfg;
};

module.exports = CandidateAid;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],46:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  IC 卡片圈存日志
 * @class nymph.pay.emv.EcLog
 */
var EcLog = function () {
  /**
   * @property {Object/String/Array} ecTag 卡片余额对应的标签。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {Number} preAmt 修改前金额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {Number} aftAmt 修改后金额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {String} transDate 交易日期 (YYMMDD)
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {String} transTime 交易时间（hhmmss）
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {Object/String/Array} cntCode 国家代码 (9F1A)，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {Number} atc 交易计数器 (9F36)
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {String} merName 商户名称 (9F4E)
   * @member nymph.pay.emv.EcLog
   */

  /**
   * @property {Object/String/Array} tlv 本结构中未定义的其它数据元按照 TLV 列表的格式保存在 TLV 中。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.EcLog
   */
};

EcLog.prototype = {
  constructor: EcLog,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.EcLog
 */
EcLog.pack = function(param){
  var tempBuf, tempString, tempCfg = new EcLog();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'ecTag':
        case 'cntCode':
        case 'tlv':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        case 'preAmt':
        case 'aftAmt':
        case 'atc':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.EcLog
 */
EcLog.unpack = function(param){
  var tempBuf, tempString, tempCfg = new EcLog();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'ecTag':
        case 'cntCode':
        case 'tlv':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = EcLog;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],47:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  GPO 参数
 * @class nymph.pay.emv.Gpo
 */
var Gpo = function () {
  /**
   * @property {Number} amount 交易金额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.Gpo
   */

  /**
   * @property {Number} otherAmount 其他金额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.Gpo
   */

  /**
   * @property {String} transDate 交易日期 (YYMMDD)
   * @member nymph.pay.emv.Gpo
   */

  /**
   * @property {String} transTime 交易时间 (hhmmss)
   * @member nymph.pay.emv.Gpo
   */

  /**
   * @property {Number} trace 交易流水号
   * @member nymph.pay.emv.Gpo
   */

  /**
   * @property {nymph.pay.emv.ServiceType} serviceType 服务类型
   * @member nymph.pay.emv.Gpo
   */

  /**
   * @property {nymph.pay.emv.GacFlag} gacFlag GAC 控制标识
   * @member nymph.pay.emv.Gpo
   */
};

Gpo.prototype = {
  constructor: Gpo,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * # 服务类型
 * @class nymph.pay.emv.ServiceType
 */
var ServiceType = {
  /**
   * @property {String} [GOOD='GOOD'] 商品
   * @member nymph.pay.emv.ServiceType
   */
  GOOD: 'GOOD',

  /**
   * @property {String} [SERVICE='SERVICE'] 服务
   * @member nymph.pay.emv.ServiceType
   */
  SERVICE: 'SERVICE',

  /**
   * @property {String} [CASH='CASH'] 现金
   * @member nymph.pay.emv.ServiceType
   */
  CASH: 'CASH',

  /**
   * @property {String} [CASHBACK='CASHBACK'] 返现
   * @member nymph.pay.emv.ServiceType
   */
  CASHBACK: 'CASHBACK',

  /**
   * @property {String} [REFUND='REFUND'] 退款
   * @member nymph.pay.emv.ServiceType
   */
  REFUND: 'REFUND'
};

/**
 * # GAC 控制标识
 * @class nymph.pay.emv.GacFlag
 */
var GacFlag = {
  /**
   * @property {String} [NON='NON'] 无特殊处理
   * @member nymph.pay.emv.GacFlag
   */
  NON: 'NON',

  /**
   * @property {String} [FORCE_OFFLINE='FORCE_OFFLINE'] 强制脱机（对于可脱机终端有效，接触式交易设置强制联机）
   * @member nymph.pay.emv.GacFlag
   */
  FORCE_OFFLINE: 'FORCE_OFFLINE',

  /**
   * @property {String} [FORCE_ONLINE='FORCE_ONLINE'] 强制联机（对于可联机终端有效）
   * @member nymph.pay.emv.GacFlag
   */
  FORCE_ONLINE: 'FORCE_ONLINE',

  /**
   * @property {String} [FORCE_DENIAL='FORCE_DENIAL'] 强制拒绝（对所有终端有效）
   * @member nymph.pay.emv.GacFlag
   */
  FORCE_DENIAL: 'FORCE_DENIAL'
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.Gpo
 */
Gpo.pack = function (param){
  var tempBuf, tempString,
      isServiceTypeValid = false,
      isGacFlagValid = false,
      tempCfg = new Gpo();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'amount':
        case 'otherAmount':
        case 'trace':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number above 0!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'transDate':
          if (typeof param[key] !== 'string') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYMMDD!'};
          }
          if(!/^\d{6}/.test(param[key])){
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYMMDD!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'transTime':
          if (typeof param[key] !== 'string') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of HHMMSS!'};
          }
          if(!/^\d{6}/.test(param[key])){
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of HHMMSS!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'serviceType':
          for (var type in ServiceType) {
            if (param[key] === ServiceType[type]) {
              isServiceTypeValid = true;
              break;
            }
          }
          if (!isServiceTypeValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of ServiceType.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'gacFlag':
          for (var flag in GacFlag) {
            if (param[key] === GacFlag[flag]) {
              isGacFlagValid = true;
              break;
            }
          }
          if (!isGacFlagValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of GacFlag.'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.Gpo
 */
Gpo.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new Gpo();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

Gpo.ServiceType = ServiceType;
Gpo.GacFlag = GacFlag;

module.exports = Gpo;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],48:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * # 主机响应数据
 * @class nymph.pay.emv.HostData
 */
var HostData = function () {
  /**
   * @property {String} state 联机状态
   *
   * - 'SUCCESS'：联机成功
   * - 'FAILED'：联机失败
   * @member nymph.pay.emv.HostData
   */

  /**
   * @property {Object/String/Array} arc 授权响应码，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.HostData
   */

  /**
   * @property {Boolean} authFlag 授权标识。true-批准交易，false-拒绝交易
   * @member nymph.pay.emv.HostData
   */

  /**
   * @property {Object/String/Array} iac 发卡行授权码，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.HostData
   */

  /**
   * @property {Object/String/Array} field55 联机响应芯片数据（55域数据），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.HostData
   */
};

HostData.prototype = {
  constructor: HostData,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.HostData
 */
HostData.pack = function (param) {
  var tempBuf, tempCfg = new HostData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'state':
          if (param[key] !== 'SUCCESS' && param[key] !== 'FAILED') {
            throw {
              code: nymphErr.PARAM_ERR,
              message: 'The value of ' + key + 'should be a string of SUCCESS or FAILED!'
            };
          }
          tempCfg[key] = param[key];
          break;
        case 'authFlag':
          if (typeof param[key] !== 'boolean') {
            throw {
              code: nymphErr.PARAM_ERR,
              message: 'The value of ' + key + 'should be a boolean!'
            };
          }
          tempCfg[key] = param[key];
          break;  
        case 'arc':
        case 'iac':
        case 'field55':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.HostData
 */
HostData.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new HostData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'arc':
        case 'iac':
        case 'field55':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};
module.exports = HostData;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],49:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  IC 卡片交易日志
 * @class nymph.pay.emv.IcLog
 */
var IcLog = function () {
  /**
   * @property {Number} amt 交易金额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {Number} otherAmt 其它金额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {String} transDate 交易日期 (YYMMDD)
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {String} transTime 交易时间（hhmmss）
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {Object/String/Array} cntCode 国家代码 (9F1A)，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {Object/String/Array} curCode 货币代码 (5F2A)，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {Number} atc 交易计数器 (9F36)
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {nymph.pay.emv.ServiceType} serveType 服务类型 (9C)
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {String} merName 商户名称 (9F4E)
   * @member nymph.pay.emv.IcLog
   */

  /**
   * @property {Object/String/Array} tlv 本结构中未定义的其它数据元按照 TLV 列表的格式保存在 auTLV 中。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.IcLog
   */
};

IcLog.prototype = {
  constructor: IcLog,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.IcLog
 */
IcLog.pack = function (param) {
  var tempBuf, tempString, tempCfg = new IcLog();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'cntCode':
        case 'curCode':
        case 'tlv':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.IcLog
 */
IcLog.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new IcLog();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'cntCode':
        case 'curCode':
        case 'tlv':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = IcLog;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],50:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  EMV 终端初始化参数
 * @class nymph.pay.emv.InitialData
 */
var InitialData = function () {

};

InitialData.prototype = {
  constructor: InitialData,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)) {
        var temp = this[key];
        if (Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.InitialData
 */
InitialData.pack = function (param) {
  var tempBuf, tempCfg = new InitialData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.InitialData
 */
InitialData.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new InitialData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = InitialData;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],51:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  MASTER 交易参数
 * @class nymph.pay.emv.MasterParams
 */
var MasterParams = function () {
  /**
   * @property {nymph.pay.emv.MasterMode} mode 流程类型。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {nymph.pay.emv.MasterBalanceFlag} balanceFlag 读取余额标识。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Boolean} recovery 是否支持闪卡恢复。true-支持，false-不支持
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Boolean} cdv 是否支持持卡人设备验证。true-支持，false-不支持
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} rfTransLimit 非接触交易限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} rfCvmLimit 非接 CVM 限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} rfFloorLimit 非接联机限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} rfTransLimitCdv 当交易支持 CDV 验证时采用的非接交易限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} cvmCapReq 当前交易为 MChip，且交易请求 CVM 时所采用的 CVM 性能。取值范围 0x00~0xFF。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} cvmCapNoReq 当前交易为 MChip，且交易未请求 CVM 时所采用的 CVM 性能。取值范围 0x00~0xFF。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} cvmCapMagReq 当前交易为 MStripe，且交易请求 CVM 时所采用的 CVM 性能。取值范围 0x00~0xFF。
   * @member nymph.pay.emv.MasterParams
   */

  /**
   * @property {Number} cvmCapMagNoReq 当前交易为 MStripe，且交易未请求 CVM 时所采用的 CVM 性能。取值范围 0x00~0xFF。
   * @member nymph.pay.emv.MasterParams
   */
};

MasterParams.prototype = {
  constructor: MasterParams,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * # Master 流程类型
 * @class nymph.pay.emv.MasterMode
 */
var MasterMode = {
  /**
   * @property {String} [MAG='MAG'] 磁条卡流程
   * @member nymph.pay.emv.MasterMode
   */
  MAG: 'MAG',

  /**
   * @property {String} [EMV='EMV'] EMV 流程
   * @member nymph.pay.emv.MasterMode
   */
  EMV: 'EMV',

  /**
   * @property {String} [MAG_EMV='MAG_EMV'] 支持磁条卡和 EMV 流程
   * @member nymph.pay.emv.MasterMode
   */
  MAG_EMV: 'MAG_EMV'
};

/**
 * # Master 读取余额标识
 * @class nymph.pay.emv.MasterBalanceFlag
 */
var MasterBalanceFlag = {
  /**
   * @property {String} [UNSUPPORT='UNSUPPORT'] 不支持读取余额
   * @member nymph.pay.emv.MasterBalanceFlag
   */
  UNSUPPORT: 'UNSUPPORT',

  /**
   * @property {String} [PRE_GAC='PRE_GOTHER='OTHER'AC'] 仅支持在 GAC 之前读取余额
   * @member nymph.pay.emv.MasterBalanceFlag
   */
  PRE_GAC: 'PRE_GAC',

  /**
   * @property {String} [POST_GAC='POST_GAC'] 仅支持在 GAC 之后读取余额
   * @member nymph.pay.emv.MasterBalanceFlag
   */
  POST_GAC: 'POST_GAC',

  /**
   * @property {String} [BOTH='BOTH'] 支持在 GAC 之前和之后读取余额
   * @member nymph.pay.emv.MasterBalanceFlag
   */
  BOTH: 'BOTH'
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.MasterParams
 */
MasterParams.pack = function (param) {
  var isModeValid = false,
      isBalanceFlagValid = false,
      tempCfg = new MasterParams();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'mode':
          for (var mode in MasterMode) {
            if (param[key] === MasterMode[mode]) {
              isModeValid = true;
              break;
            }
          }
          if (!isModeValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of MasterMode.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'balanceFlag':
          for(var flag in MasterBalanceFlag) {
            if (param[key] === MasterBalanceFlag[flag]) {
              isBalanceFlagValid = true;
              break;
            }
          }
          if (!isBalanceFlagValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of MasterBalanceFlag.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'recovery':
        case 'cdv':
          if (typeof param[key] !== 'boolean') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'rfTransLimit':
        case 'rfCvmLimit':
        case 'rfFloorLimit':
        case 'rfTransLimitCdv':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'cvmCapReq':
        case 'cvmCapNoReq':
        case 'cvmCapMagReq':
        case 'cvmCapMagNoReq':
          if (typeof param[key] !== 'number' || param[key] > 255 || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should between [0x00 - 0xFF]!'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.MasterParams
 */
MasterParams.unpack = function (param) {
  var tempCfg = new MasterParams();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

MasterParams.MasterMode = MasterMode;
MasterParams.MasterBalanceFlag = MasterBalanceFlag;

module.exports = MasterParams;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],52:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  PBOC 接触与非接交易参数
 * @class nymph.pay.emv.PbocParams
 */
var PbocParams = function () {
  /**
   * @property {Boolean} isSupportECash [接触]电子现金支持标识。
   *
   * - true：支持
   * - false：不支持
   *
   * @member nymph.pay.emv.PbocParams
   */

  /**
   * @property {Boolean} isSupportSM  [接触与非接]国密算法支持标识。
   *
   * - true：支持
   * - false：不支持
   *
   * @member nymph.pay.emv.PbocParams
   */

  /**
   * @property {Object/String/Array} transProp [非接]终端交易属性 (9F66)，缺省值为：[0x26, 0x00, 0x00, 0x80]。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PbocParams
   */
  this.transProp = new Buffer([0x26, 0x00, 0x00, 0x80]);

  /**
   * @property {Number} ecLimit [接触]电子现金交易限额 (9F7B)，超过此限额，需要联机，不能做脱机交易，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.PbocParams
   */

  /**
   * @property {Number} rfTransLimit 非接触交易限额，超过此限额，不能做非接交易，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.PbocParams
   */

  /**
   * @property {Number} rfCvmLimit 非接 CVM 限额，超过此限额，需要持卡人验证，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.PbocParams
   */

  /**
   * @property {Number} rfFloorLimit 非接联机限额，超过此限额，需要联机，不能做脱机交易，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.PbocParams
   */
};

PbocParams.prototype = {
  constructor: PbocParams,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.PbocParams
 */
PbocParams.pack = function (param) {
  var tempBuf, tempCfg = new PbocParams();
  for (var k in param) {
    if (param.hasOwnProperty(k)) {
      tempCfg[k] = param[k];
    }
  }
  for (var key in tempCfg) {
    if (tempCfg.hasOwnProperty(key)) {
      switch (key) {
        case 'isSupportECash':
        case 'isSupportSM':
          if (typeof tempCfg[key] !== 'boolean') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          break;
        case 'ecLimit':
        case 'rfTransLimit':
        case 'rfCvmLimit':
        case 'rfFloorLimit':
          if (typeof tempCfg[key] !== 'number' || tempCfg[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          break;
        case 'transProp':
          tempCfg[key] = tools.toBase64(tempCfg[key]);
          break;
        default:
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.PbocParams
 */
PbocParams.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new PbocParams();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'transProp':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = PbocParams;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],53:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  RSA 算法公钥
 * @class nymph.pay.emv.PubKeyRsa
 */
var PubKeyRsa = function () {
  /**
   * @property {Object/String/Array} rid RID（5 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeyRsa
   */

  /**
   * @property {Number} index 公钥索引
   * @member nymph.pay.emv.PubKeyRsa
   */

  /**
   * @property {Object/String/Array} mod 公钥模（不超过 256 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeyRsa
   */

  /**
   * @property {Object/String/Array} exponent（[0x03] 或 [0x01, 0x00, 0x01]） 公钥指数，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @member nymph.pay.emv.PubKeyRsa
   */

  /**
   * @property {String} expDate 公钥失效期，格式为 YYYYMMDD 的字符串。
   * @member nymph.pay.emv.PubKeyRsa
   */

  /**
   * @property {Object/String/Array} hash 公钥校验和，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @member nymph.pay.emv.PubKeyRsa
   */
};

PubKeyRsa.prototype = {
  constructor: PubKeyRsa,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.PubKeyRsa
 */
PubKeyRsa.pack = function (param) {
  var tempBuf, tempCfg = new PubKeyRsa();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rid':
        case 'mod':
        case 'exponent':
        case 'hash':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        case 'index':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'expDate':
          if (typeof param[key] !== 'string') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYYYMMDD!'};
          }
          if(!/^\d{8}/.test(param[key])){
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYYYMMDD!'};
          }
          tempCfg[key] = param[key];
          break; 
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.PubKeyRsa
 */
PubKeyRsa.unpack = function (param) {
  var tempCfg = new PubKeyRsa();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rid':
        case 'mod':
        case 'exponent':
        case 'hash':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = PubKeyRsa;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],54:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * # 椭圆曲线参数
 * @class nymph.pay.emv.PubKeySmGroup
 */
var PubKeySmGroup = function () {
  /**
   * @property {Number} groupBits
   * @member nymph.pay.emv.PubKeySmGroup
   */

  /**
   * @property {Object/String/Array} p P，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySmGroup
   */

  /**
   * @property {Object/String/Array} a A，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySmGroup
   */

  /**
   * @property {Object/String/Array} b B，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySmGroup
   */

  /**
   * @property {Object/String/Array} x X，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySmGroup
   */

  /**
   * @property {Object/String/Array} y Y，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySmGroup
   */

  /**
   * @property {Object/String/Array} n N，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySmGroup
   */
};

PubKeySmGroup.prototype = {
  constructor: PubKeySmGroup,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.PubKeySmGroup
 */
PubKeySmGroup.pack = function (param) {
  var tempBuf, tempCfg = new PubKeySmGroup();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'p':
        case 'a':
        case 'b':
        case 'x':
        case 'y':
        case 'n':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.PubKeySmGroup
 */
PubKeySmGroup.unpack = function (param) {
  var tempCfg = new PubKeySmGroup();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'p':
        case 'a':
        case 'b':
        case 'x':
        case 'y':
        case 'n':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = PubKeySmGroup;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],55:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #   SM 算法公钥
 * @class nymph.pay.emv.PubKeySm
 */
var PubKeySm = function () {
  /**
   * @property {Object/String/Array} rid RID（5 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySm
   */

  /**
   * @property {Number} index 公钥索引
   * @member nymph.pay.emv.PubKeySm
   */

  /**
   * @property {Object/String/Array} mod 公钥模（不超过 256 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.PubKeySm
   */

  /**
   * @property {String} expDate 公钥失效期，YYYYMMDD
   * @member nymph.pay.emv.PubKeySm
   */

  /**
   * @property {nymph.pay.emv.PubKeySmGroup} groupParam 椭圆曲线参数。目前无需设置。
   * @member nymph.pay.emv.PubKeySm
   */
};

PubKeySm.prototype = {
  constructor: PubKeySm,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.PubKeySm
 */
PubKeySm.pack = function (param) {
  var tempBuf, tempCfg = new PubKeySm();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rid':
        case 'mod':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        case 'index':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'expDate':
          if (typeof param[key] !== 'string') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYYYMMDD!'};
          }
          if(!/^\d{8}/.test(param[key])){
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYYYMMDD!'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.PubKeySm
 */
PubKeySm.unpack = function (param) {
  var tempCfg = new PubKeySm();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rid':
        case 'mod':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = PubKeySm;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],56:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  回收公钥证书
 * @class nymph.pay.emv.RecCert
 */
var RecCert = function () {
  /**
   * @property {Object/String/Array} rid RID（5 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.RecCert
   */

  /**
   * @property {Number} index 公钥索引。
   * @member nymph.pay.emv.RecCert
   */

  /**
   * @property {Object/String/Array} sn 证书序列号（3 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.RecCert
   */
};

RecCert.prototype = {
  constructor: RecCert,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.RecCert
 */
RecCert.pack = function (param) {
  var tempBuf, tempCfg = new RecCert();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rid':
        case 'sn':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        case 'index':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.RecCert
 */
RecCert.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new RecCert();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rid':
        case 'sn':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

module.exports = RecCert;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],57:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  读卡片记录返回数据
 * @class nymph.pay.emv.Record
 */
var Record = function () {
  /**
   * @property {Object/String/Array} aid AID，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {String} pan 主账号
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {Number} panSn 主账号序列号，一个字节 hex
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {String} expDate 失效日期，YYYYMMDD
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {String} algorithm 算法
   *
   * - 'RSA'
   * - 'SM'
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {Number} pubKeyIndex 公钥索引，一个字节 hex
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {nymph.pay.emv.FlowType} flowType 交易流程类型
   * @member nymph.pay.emv.Record
   */

  /**
   * @property {Object} ecIac 电子现金发卡行授权码(9F74),数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
   * @member nymph.pay.emv.Record
   */
};

Record.prototype = {
  constructor: Record,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.Record
 */
Record.pack = function (param) {
  var tempBuf, tempCfg = new Record();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'aid':
        case 'ecIac':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }

  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.Record
 */
Record.unpack = function (param) {
  var tempBuf, tempCfg = new Record();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'aid':
        case 'ecIac':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        case 'pan':
          if (/^(\d)*[a-zA-Z]/.test(param[key])) {
            tempCfg[key] = param[key].substring(0, param[key].length - 1);
          } else {
            tempCfg[key] = param[key];
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};
module.exports = Record;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],58:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer,
    encoding = require('nymph-encoding'),
    nymphErr = require('error'),
    Gpo = require('./gpo'),
    tools = require('tools');

/**
 * # 流程启动目的
 * @class nymph.pay.emv.StartPurpose
 */
var StartPurpose = {
  /**
   * @property {String} [NORMAL='NORMAL']正常交易（缺省）
   * @member nymph.pay.emv.StartPurpose
   */
  NORMAL: 'NORMAL',

  /**
   * @property {String} [ECLOG='ECLOG'] 查询卡片交易日志
   * @member nymph.pay.emv.StartPurpose
   */
  ECLOG: 'ECLOG',

  /**
   * @property {String} [ICLOG='ICLOG'] 查询卡片交易日志
   * @member nymph.pay.emv.StartPurpose
   */
  ICLOG: 'ICLOG',

  /**
   * @property {String} [RECOVERY='RECOVERY'] 闪卡恢复
   * @member nymph.pay.emv.StartPurpose
   */
  RECOVERY: 'RECOVERY',

  /**
   * @property {String} [BALANCE='BALANCE'] 查询余额
   * @member nymph.pay.emv.StartPurpose
   */
  BALANCE: 'BALANCE'
};

/**
 * #  EMV 流程启动数据
 * @class nymph.pay.emv.StartData
 */
var StartData = function () {
  /**
   * @property {nymph.pay.emv.PseFlag} pseFlag 应用选择路径
   * @member nymph.pay.emv.StartData
   */

  /**
   * @property {nymph.pay.emv.Gpo} gpo GPO 参数。
   * @member nymph.pay.emv.StartData
   */

  /**
   * @property {nymph.pay.emv.Interface} interface 交互界面。
   * @member nymph.pay.emv.StartData
   */

  /**
   * @property {Object} otherParams 其他交易参数。
   * @property {Boolean} otherParams.rfTransLimitCheck 是否检查非接交易限额。如果超限，直接结束流程，返回 `EMV_OTHER_INTERFACE`。
   * @property {Boolean} otherParams.rfForceOnline 非接强制联机。
   * @property {Boolean} otherParams.rfQPbocFlag QPOBC。
   * @property {Boolean} otherParams.rfDebitCreditFlag 非接借贷记。
   * @property {Boolean} otherParams.rfNeedInputAmount 非接需要在寻卡之后输入金额。
   * @property {Object/String/Array} otherParams.tlvData TLV 数据
   * @member nymph.pay.emv.StartData
   */

  /**
   * @property {nymph.pay.emv.StartPurpose} purpose 交易目的，表示此次交易是做什么的。默认为 `NORMAL`
   * @member nymph.pay.emv.StartData
   */
  this.purpose = 'NORMAL';
};

StartData.prototype = {
  constructor: StartData,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * # 应用选择路径
 * @class nymph.pay.emv.PseFlag
 */
var PseFlag = {
  /**
   * @property {String} [PSE_AID='PSE_AID'] 先走 PSE 选择,若 PSE 失败再执行 AID 选择
   * @member nymph.pay.emv.PseFlag
   */
  PSE_AID: 'PSE_AID',

  /**
   * @property {String} [PSE='PSE'] PSE 选择
   * @member nymph.pay.emv.PseFlag
   */
  PSE: 'PSE',

  /**
   * @property {String} [AID='AID'] AID 选择
   * @member nymph.pay.emv.PseFlag
   */
  AID: 'AID'
};

/**
 * # 交互界面
 * @class nymph.pay.emv.Interface
 */
var Interface = {
  /**
   * @property {String} [CONTACT='CONTACT'] 接触
   * @member nymph.pay.emv.Interface
   */
  CONTACT: 'CONTACT',

  /**
   * @property {String} [CONTACTLESS_INTER='CONTACTLESS_INTER'] 非接（内置）
   * @member nymph.pay.emv.Interface
   */
  CONTACTLESS_INTER: 'CONTACTLESS_INTER',

  /**
   * @property {String} [CONTACTLESS_EXTER='CONTACTLESS_EXTER'] 非接（外置）
   * @member nymph.pay.emv.Interface
   */
  CONTACTLESS_EXTER: 'CONTACTLESS_EXTER'
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @member nymph.pay.emv.StartData
 */
StartData.pack = function (param) {
  var tempBuf,
      isPurposeValid = false,
      isInterfaceValid = false,
      isPseFlagValid = false,
      tempCfg = new StartData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'pseFlag':
          for (var flag in PseFlag) {
            if (param[key] === PseFlag[flag]) {
              isPseFlagValid = true;
              break;
            }
          }
          if (!isPseFlagValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of PseFlag.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'interface':
          for (var i in Interface) {
            if (param[key] === Interface[i]) {
              isPseFlagValid = true;
              break;
            }
          }
          if (!isInterfaceValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of Interface.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'gpo':
          tempCfg[key] = Gpo.pack(param[key]);
          break;
        case 'otherParams':
          for (var k in param[key]) {
            if (param[key].hasOwnProperty(k)) {
              if (k === 'tlvData') {
                param[key][k] = tools.toBase64(param[key][k]);
              }
              if (k !== 'tlvData' && typeof param[key][k] !== 'boolean') {
                throw {code: nymphErr.PARAM_ERR, message: k + ' of otherParams should be a boolean.'};
              }
            }
          }
          tempCfg[key] = param[key];
          break;
        case 'purpose':
          for (var p in StartPurpose) {
            if (param[key] === StartPurpose[p]) {
              isPurposeValid = true;
              break;
            }
          }
          if (!isPurposeValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of StartPurpose.'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.StartData
 */
StartData.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new StartData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

StartData.PseFlag = PseFlag;
StartData.Interface = Interface;
StartData.StartPurpose = StartPurpose;
module.exports = StartData;

},{"./gpo":47,"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],59:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  EMV 交易数据
 * @class nymph.pay.emv.TransData
 */
var TransData = function () {
  /**
   * @property {nymph.pay.emv.AcType} acType 交易结果
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {nymph.pay.emv.Cvm} cvm CVM 标识
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {String} pan 主账号
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Number} panSn 主账号序列号
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {String} expiry 应用失效日期 (YYMMDD)
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {nymph.pay.emv.FlowType} flowType 交易流程标识
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Object/String/Array} ecIac 电子现金发卡行授权码(9F74)，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Number} balance 余额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Number} cid 密文信息数据，一个字节 hex
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Object/String/Array} scriptResult 脚本执行结果，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Object/String/Array} msdT1Data MSD 交易一磁道模拟数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Object/String/Array} msdT2Data MSD 交易二磁道模拟数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.TransData
   */

  /**
   * @property {Object/String/Array} tlv TLV 数据元，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @member nymph.pay.emv.TransData
   */
};

TransData.prototype = {
  constructor: TransData,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * # 交易结果
 * @class nymph.pay.emv.AcType
 */
var AcType = {
  /**
   * @property {String} [DENIED='DENIED'] 拒绝
   * @member nymph.pay.emv.AcType
   */
  DENIED: 'DENIED',

  /**
   * @property {String} [APPROVED='APPROVED'] 批准
   * @member nymph.pay.emv.AcType
   */
  APPROVED: 'APPROVED',

  /**
   * @property {String} [ONLINE='ONLINE'] 联机请求
   * @member nymph.pay.emv.AcType
   */
  ONLINE: 'ONLINE',

  /**
   * @property {String} [CHANGE_INTERFACE='CHANGE_INTERFACE'] 非接交易拒绝需转接触方式，或接触交易拒绝需转其它交易界面
   * @member nymph.pay.emv.AcType
   */
  CHANGE_INTERFACE: 'CHANGE_INTERFACE',

  /**
   * @property {String} [EC_LOAD='EC_LOAD'] 请求联机并请求联机PIN（电子现金余额不足请求圈存）
   * @member nymph.pay.emv.AcType
   */
  EC_LOAD: 'EC_LOAD'
};

/**
 * # 持卡人验证类型
 * @class nymph.pay.emv.Cvm
 */
var Cvm = {
  /**
   * @property {String} [NO_CVM='NO_CVM'] 无需 CVM 验证
   * @member nymph.pay.emv.Cvm
   */
  NO_CVM: 'NO_CVM',

  /**
   * @property {String} [OFFLINE_PIN='OFFLINE_PIN'] 脱机 PIN
   * @member nymph.pay.emv.Cvm
   */
  OFFLINE_PIN: 'OFFLINE_PIN',

  /**
   * @property {String} [ONLINE_PIN='ONLINE_PIN'] 联机 PIN
   * @member nymph.pay.emv.Cvm
   */
  ONLINE_PIN: 'ONLINE_PIN',

  /**
   * @property {String} [SIGNATURE='SIGNATURE'] 签名
   * @member nymph.pay.emv.Cvm
   */
  SIGNATURE: 'SIGNATURE',

  /**
   * @property {String} [ONLINE_PIN_SIGN='ONLINE_PIN_SIGN'] 联机 PIN 加签名
   * @member nymph.pay.emv.Cvm
   */
  ONLINE_PIN_SIGN: 'ONLINE_PIN_SIGN',

  /**
   * @property {String} [CDV='CDV'] Consumer Device Verification (qVSDC)
   * @member nymph.pay.emv.Cvm
   */
  CDV: 'CDV',

  /**
   * @property {String} [CCV='CCV'] Confirmation Code Verified (PayPass)
   * @member nymph.pay.emv.Cvm
   */
  CCV: 'CCV',

  /**
   * @property {String} [CERTIFICATE='CERTIFICATE'] 证件验证
   * @member nymph.pay.emv.Cvm
   */
  CERTIFICATE: 'CERTIFICATE',

  /**
   * @property {String} [MAG_REQ='MAG_REQ'] PayPass: Mag-stripe CVM Capability – CVM Required
   * @member nymph.pay.emv.Cvm
   */
  MAG_REQ: 'MAG_REQ',

  /**
   * @property {String} [ECASHPIN='ECASHPIN'] 电子现金充值PIN
   * @member nymph.pay.emv.Cvm
   */
  ECASHPIN: 'ECASHPIN'
};

/**
 * # 交易流程类型
 * @class nymph.pay.emv.FlowType
 */
var FlowType = {
  /**
   * @property {String} [ EMV='EMV'] EMV/PBOC 标准借贷记
   * @member nymph.pay.emv.FlowType
   */
  EMV: 'EMV',

  /**
   * @property {String} [ECASH='ECASH'] 接触式小额支付（电子现金）
   * @member nymph.pay.emv.FlowType
   */
  ECASH: 'ECASH',

  /**
   * @property {String} [QPBOC='QPBOC'] 非接小额支付 (qPBOC)
   * @member nymph.pay.emv.FlowType
   */
  QPBOC: 'QPBOC',

  /**
   * @property {String} [PBOC_CTLESS='PBOC_CTLESS'] 非接标准借贷记
   * @member nymph.pay.emv.FlowType
   */
  PBOC_CTLESS: 'PBOC_CTLESS',

  /**
   * @property {String} [MSD='MSD'] MSD 交易
   * @member nymph.pay.emv.FlowType
   */
  MSD: 'MSD',

  /**
   * @property {String} [MSD_LEGACY='MSD_LEGACY'] MSD Legacy 交易
   * @member nymph.pay.emv.FlowType
   */
  MSD_LEGACY: 'MSD_LEGACY',

  /**
   * @property {String} [QVSDC='QVSDC'] Visa qVSDC
   * @member nymph.pay.emv.FlowType
   */
  QVSDC: 'QVSDC',

  /**
   * @property {String} [WAVE2='WAVE2'] Visa PayWave2
   * @member nymph.pay.emv.FlowType
   */
  WAVE2: 'WAVE2',

  /**
   * @property {String} [M_CHIP='M_CHIP'] MASTER Card PayPass-Chip
   * @member nymph.pay.emv.FlowType
   */
  M_CHIP: 'M_CHIP',

  /**
   * @property {String} [M_STRIPE='M_STRIPE'] MASTER Card PayPass-Stripe
   * @member nymph.pay.emv.FlowType
   */
  M_STRIPE: 'M_STRIPE'
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @member nymph.pay.emv.TransData
 */
TransData.pack = function (param) {
  var tempBuf,
      isAcTypeValid = false,
      isFlowTypeValid = false,
      isCvmValid = false,
      tempCfg = new TransData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'ecIac':
        case 'scriptResult':
        case 'msdT1Data':
        case 'msdT2Data':
        case 'tlv':
          tempCfg[key] = tools.toBase64(param[key]);
          break;
        case 'acType':
          for (var at in AcType) {
            if (param[key] === AcType[at]) {
              isAcTypeValid = true;
              break;
            }
          }
          if (!isAcTypeValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of AcType.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'cvm':
          for (var c in Cvm) {
            if (param[key] === Cvm[c]) {
              isCvmValid = true;
              break;
            }
          }
          if (!isCvmValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of Cvm.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'flowType':
          for (var f in FlowType) {
            if (param[key] === FlowType[f]) {
              isFlowTypeValid = true;
              break;
            }
          }
          if (!isFlowTypeValid) {
            throw {code: nymphErr.PARAM_ERR, message: key + ' should be an item of FlowType.'};
          }
          tempCfg[key] = param[key];
          break;
        case 'panSn':
        case 'balance':
          if (typeof param[key] !== 'number' || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'cid':
          if (typeof param[key] !== 'number' || param[key] > 255 || param[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should between [0x00 - 0xFF]!'};
          }
          tempCfg[key] = param[key];
          break;
        case 'expiry':
          if (typeof param[key] !== 'string') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYMMDD!'};
          }
          if(!/^\d{6}/.test(param[key])){
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a string of YYMMDD!'};
          }
          tempCfg[key] = param[key];
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.TransData
 */
TransData.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new TransData();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'ecIac':
        case 'scriptResult':
        case 'msdT1Data':
        case 'msdT2Data':
        case 'tlv':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        case 'pan':
          if (/^(\d)*[a-zA-Z]/.test(param[key])) {
            tempCfg[key] = param[key].substring(0, param[key].length - 1);
          } else {
            tempCfg[key] = param[key];
          }

          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};

TransData.AcType = AcType;
TransData.Cvm = Cvm;
TransData.FlowType = FlowType;
module.exports = TransData;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],60:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');
var tools = require('tools');

/**
 * #  VISA 非接交易参数
 * @class nymph.pay.emv.VisaParams
 */
var VisaParams = function () {
  /**
   * @property {Object/String/Array} rcp [非接]读卡器配置参数 (DF06)，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。缺省不设置。
   * @member nymph.pay.emv.VisaParams
   */

  /**
   * @property {Object/String/Array} transProp [非接]终端交易属性 (9F66)，缺省值为：[0x26, 0x06, 0x00, 0x00]。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。支持联机 PIN 和签名，支持非接小额支付，不支持非接标准借贷记
   * @member nymph.pay.emv.VisaParams
   */
  this.transProp = new Buffer([0x26, 0x06, 0x00, 0x00]);

  /**
   * @property {Number} rfTransLimit 非接触交易限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.VisaParams
   */

  /**
   * @property {Number} rfCvmLimit 非接 CVM 限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.VisaParams
   */

  /**
   * @property {Number} rfFloorLimit 非接联机限额，以分为单位的整数，如 1111 表示 11.11 元。
   * @member nymph.pay.emv.VisaParams
   */

  /**
   * @property {Boolean} cvn17Flag CVN17 是否激活。
   *
   * - true：激活
   * - false：不激活
   * @member nymph.pay.emv.VisaParams
   */

  /**
   * @property {Boolean} track1Flag Track1 是否激活。
   *
   * - true：激活
   * - false：不激活
   * @member nymph.pay.emv.VisaParams
   */

  /**
   * @property {Boolean} track2Flag Track2 是否激活。
   *
   * - true：激活
   * - false：不激活
   * @member nymph.pay.emv.VisaParams
   */
};

VisaParams.prototype = {
  constructor: VisaParams,

  toString: function () {
    var s = '';
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        var temp = this[key];
        if(Buffer.isBuffer(temp)) {
          s = s + '[' + key + ']' + encoding.bufferToHexString(temp) + '  ';
        } else {
          if (typeof temp === 'object') {
            s = s + '[' + key + ']' + JSON.stringify(temp) + '  ';
          } else {
            s = s + '[' + key + ']' + temp + '  ';
          }
        }
      }
    }
    return s;
  }
};

/**
 * @method pack
 * @private
 * 格式化要传给底层的参数
 * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
 * @member nymph.pay.emv.VisaParams
 */
VisaParams.pack = function (param) {
  var tempBuf, tempCfg = new VisaParams();
  for (var k in param) {
    if (param.hasOwnProperty(k)) {
      tempCfg[k] = param[k];
    }
  }
  for (var key in tempCfg) {
    if (tempCfg.hasOwnProperty(key)) {
      switch (key) {
        case 'rcp':
        case 'transProp':
          tempCfg[key] = tools.toBase64(tempCfg[key]);
          break;
        case 'rfTransLimit':
        case 'rfCvmLimit':
        case 'rfFloorLimit':
          if (typeof tempCfg[key] !== 'number' || tempCfg[key] < 0) {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          break;
        case 'cvn17Flag':
        case 'track1Flag':
        case 'track2Flag':
          if (typeof tempCfg[key] !== 'boolean') {
            throw {code: nymphErr.PARAM_ERR, message: 'The value of ' + key + 'should be a number!'};
          }
          break;
        default:
          break;
      }
    }
  }
  return tempCfg;
};

/**
 * @method unpack
 * @private
 * 解析底层传上来的参数
 * @member nymph.pay.emv.VisaParams
 */
VisaParams.unpack = function (param) {
  var tempBuf, tempString, tempCfg = new VisaParams();
  for (var key in param) {
    if (param.hasOwnProperty(key)) {
      switch (key) {
        case 'rcp':
        case 'transProp':
          try {
            tempCfg[key] = new Buffer(param[key], 'base64');
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: 'Failed to convert ' + key + ' to a buffer.'};
          }
          break;
        default:
          tempCfg[key] = param[key];
          break;
      }
    }
  }
  return tempCfg;
};
module.exports = VisaParams;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding","tools":"tools"}],61:[function(require,module,exports){
'use strict';

var hermes = require('hermes');
var nymphError = require('error');

/**
 * # JS测试框架中间库（模块名：testlib）
 * @class nymph.testlib.testlib
 * @singleton
 */
var testlib = {
    /**
     * 插件名称。
     */
    PLUGINID: '91c19c2953480304d8dfc09422d8435c',


    /**
     * 设置模块中，指令API预期返回与出口参数.
     *
     * @param modelId 模块ID。此ID与虚拟库中定义的模块一致.
     * @param apiId 接口ID。此ID与虚拟库中定义的api id 一致
     * @param param 设置的预期返回与出口参数，此参数使用json格式，并且，约定key要与api中的参数定义名称字符一样\n
     *              虚拟库中，依据api的参数定义名称来解析设置。
     * demo: 对EA_ucOpenMagDevice(const char *pcDeviceName,uint uiOpenMode,DevHandle *phDevHandle,struct appinfo info)函数设置预期返回与出口
     * 解析：此函数出口参数为phDevHandle，根据约定，所有句柄强制定义为***Handle，如，MagHandle、PinpadHandle、PrintHandle
     *      此函数的期望返回为uchar类型，约定，所有uchar返回，均使用ucRet来定义
     *
     *
     * var MODEL_ID_MAGCARD = 0xA0;
     * var MAGCARD_API_OPEN = 0x01;
     * var IS_VIRTUAL_ENV = 1;
     * var EM_SUCCESS = 0x00;
     * var defaultHandle = 11;
     * var paramOpen = {"ucRet": EM_SUCCESS, "MagHandle": 11};
     *
     * initEnv();
     * setEnvJs(IS_VIRTUAL_ENV);
     * setRetOutputs(MODEL_ID_MAGCARD,MAGCARD_API_OPEN,paramOpen);
     */
    setRetOutputs: function (modelId, apiId, param) {
        var tmp = JSON.stringify(param);
        hermes.exec(this.PLUGINID, hermes.NULL, 'setRetOutputs', [modelId, apiId, tmp]);
    },


    /**
     * 获取模块中，指定API的入口参数
     * @param modelId 模块ID。此ID与虚拟库中定义的模块一致.
     * @param apiId 接口ID。此ID与虚拟库中定义的api id 一致
     * @returns {Object} 模块api的入口参数。此参数以json形式表示，并且，约定key要与api中的参数定义名称字符一样\n
     *              虚拟库中，依据api的参数定义名称来解析获取。
     * demo:对EA_ucOpenMagDevice(const char *pcDeviceName,uint uiOpenMode,DevHandle *phDevHandle,struct appinfo info)获取入口参数
     * 解析：此api的入口参数为pcDeviceName、uiOpenMode，(这两个字符必须与API定义一致，否则无法获取到)
     *      appinfo入口为结构体，要获取此参数时，要按照appinfo_param1,appinfo_param2这样的格式进行获取
     *
     *
     * var MODEL_ID_MAGCARD = 0xA0;
     * var MAGCARD_API_OPEN = 0x01;
     * var EM_SUCCESS = 0x00;
     * var defaultHandle = 11;
     * var paramOpen = {"ucRet": EM_SUCCESS, "MagHandle": 11};
     *
     * var openInParam = getInputs(MODEL_ID_MAGCARD,MAGCARD_API_OPEN);
     * expect(openInParam.pcDeviceName).to.equal("MAGCARD");
     * expect(openInParam.uiOpenMode).to.equal(1);
     */
    getInputs: function (modelId, apiId) {
        var tmp = hermes.exec(this.PLUGINID, hermes.NULL, 'getInputs', [modelId, apiId]);
        return eval("(" + tmp + ")");
    },


    /**
     * 环境初始化。此函数将会清除所有公共库的标志，清空公共库创建的内存空间，建议每个用例执行前，调用此函数，确保执行环境正确
     * 说明：调用此函数后，将会恢复成为走真实库
     */
    initEnv: function () {
        hermes.exec(this.PLUGINID, hermes.NULL, 'initEnv', []);
    },

    /**
     * 设置测试走真实库还是虚拟库，如果走真实库，需要调用loadSoJs将需要的so进行载入。
     * 此设置将在initEnv中清除
     * @param flag 当flag = 0 时，走真实库（默认） 当flag = 1时，走虚拟库
     */
    setNativeSoEnv: function (flag) {
        hermes.exec(this.PLUGINID, hermes.NULL, 'setNativeSoEnv', [flag]);
    },

    /**
     * 在控制台显示信息
     * @param msg 要显示的信息
     */
    showLog: function (msg) {
        hermes.exec(this.PLUGINID, hermes.NULL, 'showLog', [msg]);
    },


    setDebug: function (flag) {
        hermes.exec(this.PLUGINID, hermes.NULL, 'setDebug', [flag]);
    },

    bindService: function () {
        hermes.exec(this.PLUGINID, hermes.NULL, 'bindService', []);
    },

    unbindService: function () {
        hermes.exec(this.PLUGINID, hermes.NULL, 'unbindService', []);
    },

    isServerConnect: function () {
        var result = hermes.exec(this.PLUGINID, hermes.NULL, 'isServerConnect', []);
        return result.innerCode;
    },

    setExpectData: function (modelId, apiId, outParam, inParam) {
        var tmpOut = JSON.stringify(outParam);
        var tmpIn = JSON.stringify(inParam);
        hermes.exec(this.PLUGINID, hermes.NULL, 'setExpectData', [modelId, apiId, tmpOut, tmpIn]);
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @returns {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        console.nativeLog('getError:' + innerCode);
        return nymphError.getError(innerCode);
    },

    checkData: function () {
        var result = hermes.exec(this.PLUGINID, hermes.NULL, 'checkData', []);
        var errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: result.message};
        }
    }


};

hermes.addJsPluginInstance(testlib.PLUGINID, testlib);

module.exports = testlib;

},{"error":"error","hermes":"hermes"}],62:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":63,"./asn1/base":65,"./asn1/constants":69,"./asn1/decoders":71,"./asn1/encoders":74,"bn.js":77}],63:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":62,"inherits":185,"vm":278}],64:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":65,"buffer":"buffer","inherits":185}],65:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":64,"./node":66,"./reporter":67}],66:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":65,"minimalistic-assert":188}],67:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":185}],68:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":69}],69:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":68}],70:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":62,"inherits":185}],71:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":70,"./pem":72}],72:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":70,"buffer":"buffer","inherits":185}],73:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":62,"buffer":"buffer","inherits":185}],74:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":73,"./pem":75}],75:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":73,"inherits":185}],76:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],77:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buf' + 'fer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{}],78:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{"crypto":79}],79:[function(require,module,exports){

},{}],80:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],81:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"./aes":80,"./ghash":85,"buffer":"buffer","buffer-xor":105,"cipher-base":107,"inherits":185}],82:[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":83,"./encrypter":84,"./modes":86}],83:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
},{"./aes":80,"./authCipher":81,"./modes":86,"./modes/cbc":87,"./modes/cfb":88,"./modes/cfb1":89,"./modes/cfb8":90,"./modes/ctr":91,"./modes/ecb":92,"./modes/ofb":93,"./streamCipher":94,"buffer":"buffer","cipher-base":107,"evp_bytestokey":176,"inherits":185}],84:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
},{"./aes":80,"./authCipher":81,"./modes":86,"./modes/cbc":87,"./modes/cfb":88,"./modes/cfb1":89,"./modes/cfb8":90,"./modes/ctr":91,"./modes/ecb":92,"./modes/ofb":93,"./streamCipher":94,"buffer":"buffer","cipher-base":107,"evp_bytestokey":176,"inherits":185}],85:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],86:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],87:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":105}],88:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","buffer-xor":105}],89:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],90:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],91:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","buffer-xor":105}],92:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],93:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","buffer-xor":105}],94:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
},{"./aes":80,"buffer":"buffer","cipher-base":107,"inherits":185}],95:[function(require,module,exports){
var ebtk = require('evp_bytestokey')
var aes = require('browserify-aes/browser')
var DES = require('browserify-des')
var desModes = require('browserify-des/modes')
var aesModes = require('browserify-aes/modes')
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":82,"browserify-aes/modes":86,"browserify-des":96,"browserify-des/modes":97,"evp_bytestokey":176}],96:[function(require,module,exports){
(function (Buffer){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","cipher-base":107,"des.js":148,"inherits":185}],97:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],98:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":77,"buffer":"buffer","randombytes":203}],99:[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}

exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],100:[function(require,module,exports){
(function (Buffer){
var _algos = require('./algos')
var createHash = require('create-hash')
var inherits = require('inherits')
var sign = require('./sign')
var stream = require('stream')
var verify = require('./verify')

var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)

  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc)
  }

  this.end()
  var hash = this._hash.digest()

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
},{"./algos":99,"./sign":102,"./verify":103,"buffer":"buffer","create-hash":110,"inherits":185,"stream":260}],101:[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

exports['1.3.132.0.34'] = 'p384'

exports['1.3.132.0.35'] = 'p521'

},{}],102:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type')

    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type')
  }

  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.genKeyPair()

  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) {
    r = [ 0 ].concat(r)
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s)
  }

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t, k

  do {
    t = new Buffer('')

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k)
      .update(kv.v)
      .update(new Buffer([0]))
      .digest()
    kv.v = createHmac(algo, kv.k)
      .update(kv.v)
      .digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
},{"./curves":101,"bn.js":77,"browserify-rsa":98,"buffer":"buffer","create-hmac":113,"elliptic":158,"parse-asn1":192}],103:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(
      y.toRed(montp)
        .redPow(r.mul(w).mod(q))
        .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

module.exports = verify

}).call(this,require("buffer").Buffer)
},{"./curves":101,"bn.js":77,"buffer":"buffer","elliptic":158,"parse-asn1":192}],104:[function(require,module,exports){
(function (global){
'use strict';

var buffer = require('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"buffer":"buffer"}],105:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],106:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],107:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","inherits":185,"stream":260,"string_decoder":273}],108:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":186}],109:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":77,"buffer":"buffer","elliptic":158}],110:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":112,"buffer":"buffer","cipher-base":107,"inherits":185,"ripemd160":204,"sha.js":206}],111:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],112:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":111}],113:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","create-hash/browser":110,"inherits":185,"stream":260}],114:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = require('diffie-hellman')
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = require('browserify-sign')
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})

},{"browserify-cipher":95,"browserify-sign":100,"browserify-sign/algos":99,"create-ecdh":109,"create-hash":110,"create-hmac":113,"diffie-hellman":154,"pbkdf2":193,"public-encrypt":197,"randombytes":203}],115:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));
},{"./cipher-core":116,"./core":117,"./enc-base64":118,"./evpkdf":120,"./md5":124}],116:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;

	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }
	            this._mode = modeCreator.call(mode, this, iv && iv.words);
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));
},{"./core":117}],117:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {
	        function F() {}

	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                F.prototype = this;
	                var subtype = new F();

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init')) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));
},{}],118:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex != -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            var words = [];
	            var nBytes = 0;
	            for (var i = 0; i < base64StrLength; i++) {
	                if (i % 4) {
	                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);
	                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);
	                    var bitsCombined = bits1 | bits2;
	                    words[nBytes >>> 2] |= (bitsCombined) << (24 - (nBytes % 4) * 8);
	                    nBytes++;
	                }
	            }

	            return WordArray.create(words, nBytes);
	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };
	}());


	return CryptoJS.enc.Base64;

}));
},{"./core":117}],119:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	return CryptoJS.enc.Utf16;

}));
},{"./core":117}],120:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));
},{"./core":117,"./hmac":122,"./sha1":140}],121:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	return CryptoJS.format.Hex;

}));
},{"./cipher-core":116,"./core":117}],122:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));
},{"./core":117}],123:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	return CryptoJS.lib.WordArray;

}));
},{"./core":117}],124:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));
},{"./core":117}],125:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            var keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            var keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	return CryptoJS.mode.CFB;

}));
},{"./cipher-core":116,"./core":117}],126:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	return CryptoJS.mode.CTRGladman;

}));
},{"./cipher-core":116,"./core":117}],127:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	return CryptoJS.mode.CTR;

}));
},{"./cipher-core":116,"./core":117}],128:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	return CryptoJS.mode.ECB;

}));
},{"./cipher-core":116,"./core":117}],129:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	return CryptoJS.mode.OFB;

}));
},{"./cipher-core":116,"./core":117}],130:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Ansix923;

}));
},{"./cipher-core":116,"./core":117}],131:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Iso10126;

}));
},{"./cipher-core":116,"./core":117}],132:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	return CryptoJS.pad.Iso97971;

}));
},{"./cipher-core":116,"./core":117}],133:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	return CryptoJS.pad.NoPadding;

}));
},{"./cipher-core":116,"./core":117}],134:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	            i--;
	        }
	        data.sigBytes = i + 1;
	    }
	};


	return CryptoJS.pad.ZeroPadding;

}));
},{"./cipher-core":116,"./core":117}],135:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.PBKDF2;

}));
},{"./core":117,"./hmac":122,"./sha1":140}],136:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	return CryptoJS.RabbitLegacy;

}));
},{"./cipher-core":116,"./core":117,"./enc-base64":118,"./evpkdf":120,"./md5":124}],137:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	return CryptoJS.Rabbit;

}));
},{"./cipher-core":116,"./core":117,"./enc-base64":118,"./evpkdf":120,"./md5":124}],138:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	return CryptoJS.RC4;

}));
},{"./cipher-core":116,"./core":117,"./enc-base64":118,"./evpkdf":120,"./md5":124}],139:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	return CryptoJS.RIPEMD160;

}));
},{"./core":117}],140:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));
},{"./core":117}],141:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha256"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha256"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	return CryptoJS.SHA224;

}));
},{"./core":117,"./sha256":142}],142:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	return CryptoJS.SHA256;

}));
},{"./core":117}],143:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	return CryptoJS.SHA3;

}));
},{"./core":117,"./x64-core":147}],144:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./sha512"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	return CryptoJS.SHA384;

}));
},{"./core":117,"./sha512":145,"./x64-core":147}],145:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    var Wil = gamma0l + Wi7l;
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    var Wil = Wil + gamma1l;
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    var Wil = Wil + Wi16l;
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	return CryptoJS.SHA512;

}));
},{"./core":117,"./x64-core":147}],146:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	return CryptoJS.TripleDES;

}));
},{"./cipher-core":116,"./core":117,"./enc-base64":118,"./evpkdf":120,"./md5":124}],147:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	return CryptoJS;

}));
},{"./core":117}],148:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":149,"./des/cipher":150,"./des/des":151,"./des/ede":152,"./des/utils":153}],149:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":185,"minimalistic-assert":188}],150:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":188}],151:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":148,"inherits":185,"minimalistic-assert":188}],152:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":148,"inherits":185,"minimalistic-assert":188}],153:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],154:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)
},{"./lib/dh":155,"./lib/generatePrime":156,"./lib/primes.json":157,"buffer":"buffer"}],155:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":156,"bn.js":77,"buffer":"buffer","miller-rabin":187,"randombytes":203}],156:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":77,"miller-rabin":187,"randombytes":203}],157:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],158:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":174,"./elliptic/curve":161,"./elliptic/curves":164,"./elliptic/ec":165,"./elliptic/eddsa":168,"./elliptic/hmac-drbg":171,"./elliptic/utils":173,"brorand":78}],159:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":158,"bn.js":77}],160:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":158,"../curve":161,"bn.js":77,"inherits":185}],161:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":159,"./edwards":160,"./mont":162,"./short":163}],162:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":158,"../curve":161,"bn.js":77,"inherits":185}],163:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":158,"../curve":161,"bn.js":77,"inherits":185}],164:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":158,"./precomputed/secp256k1":172,"hash.js":177}],165:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":158,"./key":166,"./signature":167,"bn.js":77}],166:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":158,"bn.js":77}],167:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":158,"bn.js":77}],168:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":158,"./key":169,"./signature":170,"hash.js":177}],169:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":158}],170:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":158,"bn.js":77}],171:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":158,"hash.js":177}],172:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],173:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":77}],174:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "elliptic@^6.0.0",
        "scope": null,
        "escapedName": "elliptic",
        "name": "elliptic",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "D:\\Workspaces\\argo-group\\argo-full-featured\\src\\argo-sdk\\sdk\\node_modules\\browserify-sign"
    ]
  ],
  "_cnpm_publish_time": 1486422838436,
  "_from": "elliptic@>=6.0.0 <7.0.0",
  "_id": "elliptic@6.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/elliptic",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/elliptic-6.3.3.tgz_1486422837740_0.10658654430881143"
  },
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "elliptic@^6.0.0",
    "scope": null,
    "escapedName": "elliptic",
    "name": "elliptic",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/browserify-sign",
    "/create-ecdh"
  ],
  "_resolved": "http://r.cnpmjs.org/elliptic/download/elliptic-6.3.3.tgz",
  "_shasum": "5482d9646d54bcb89fd7d994fc9e2e9568876e3f",
  "_shrinkwrap": null,
  "_spec": "elliptic@^6.0.0",
  "_where": "D:\\Workspaces\\argo-group\\argo-full-featured\\src\\argo-sdk\\sdk\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5482d9646d54bcb89fd7d994fc9e2e9568876e3f",
    "size": 42151,
    "noattachment": false,
    "tarball": "http://r.cnpmjs.org/elliptic/download/elliptic-6.3.3.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "63aee8d697e9b7fac37ece24222029117a890a7e",
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "name": "elliptic",
  "optionalDependencies": {},
  "publish_time": 1486422838436,
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.3.3"
}

},{}],175:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],176:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","create-hash/md5":112}],177:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":178,"./hash/hmac":179,"./hash/ripemd":180,"./hash/sha":181,"./hash/utils":182}],178:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":177}],179:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":177}],180:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":177}],181:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":177}],182:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":185}],183:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],184:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],185:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],186:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],187:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":77,"brorand":78}],188:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],189:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],190:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":62}],191:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
},{"browserify-aes":82,"buffer":"buffer","evp_bytestokey":176}],192:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":189,"./asn1":190,"./fixProc":191,"browserify-aes":82,"buffer":"buffer","pbkdf2":193}],193:[function(require,module,exports){
(function (process,Buffer){
var createHmac = require('create-hmac')
var checkParameters = require('./precondition')

exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  checkParameters(iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  setTimeout(function () {
    callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest))
  })
}

var defaultEncoding
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}

exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding)

  checkParameters(iterations, keylen)

  digest = digest || 'sha1'

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require('_process'),require("buffer").Buffer)
},{"./precondition":194,"_process":196,"buffer":"buffer","create-hmac":113}],194:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],195:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":196}],196:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],197:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":199,"./publicEncrypt":200}],198:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","create-hash":110}],199:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":198,"./withPublic":201,"./xor":202,"bn.js":77,"browserify-rsa":98,"buffer":"buffer","create-hash":110,"parse-asn1":192}],200:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":198,"./withPublic":201,"./xor":202,"bn.js":77,"browserify-rsa":98,"buffer":"buffer","create-hash":110,"parse-asn1":192,"randombytes":203}],201:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":77,"buffer":"buffer"}],202:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],203:[function(require,module,exports){
(function (process,global,Buffer){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}

var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }
  // phantomjs doesn't like a buffer being passed here
  var bytes = new Buffer(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":196,"buffer":"buffer"}],204:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],205:[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer"}],206:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":207,"./sha1":208,"./sha224":209,"./sha256":210,"./sha384":211,"./sha512":212}],207:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

}).call(this,require("buffer").Buffer)
},{"./hash":205,"buffer":"buffer","inherits":185}],208:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
},{"./hash":205,"buffer":"buffer","inherits":185}],209:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":205,"./sha256":210,"buffer":"buffer","inherits":185}],210:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":205,"buffer":"buffer","inherits":185}],211:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":205,"./sha512":212,"buffer":"buffer","inherits":185}],212:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":205,"buffer":"buffer","inherits":185}],213:[function(require,module,exports){

/**
 * Module dependencies.
 */

var url = require('./url');
var parser = require('socket.io-parser');
var Manager = require('./manager');
var debug = require('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if (typeof uri == 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }

  return io.socket(parsed.path);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = require('./manager');
exports.Socket = require('./socket');

},{"./manager":214,"./socket":216,"./url":217,"debug":221,"socket.io-parser":254}],214:[function(require,module,exports){

/**
 * Module dependencies.
 */

var eio = require('engine.io-client');
var Socket = require('./socket');
var Emitter = require('component-emitter');
var parser = require('socket.io-parser');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:manager');
var indexOf = require('indexof');
var Backoff = require('backo2');

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts){
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' == typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function() {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function(){
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.engine.id;
    }
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function(v){
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function(v){
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function(v){
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function(v){
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function(v){
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function(v){
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function() {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};


/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function(fn){
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function() {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function(data){
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function(){
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function(){
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function(){
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function(){
  this.lastPing = new Date;
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function(){
  this.emitAll('pong', new Date - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function(data){
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function(packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function(err){
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function(nsp){
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function(){
      socket.id = self.engine.id;
    });

    if (this.autoConnect) {
      // manually call here since connecting evnet is fired before listening
      onConnecting();
    }
  }

  function onConnecting() {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function(socket){
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function(packet){
  debug('writing packet %j', packet);
  var self = this;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function(encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function() {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function(){
  debug('cleanup');

  var sub;
  while (sub = this.subs.shift()) sub.destroy();

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function(){
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' == this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function(reason){
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function(){
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function(){
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function(err){
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function(){
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function(){
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

},{"./on":215,"./socket":216,"backo2":218,"component-bind":219,"component-emitter":220,"debug":221,"engine.io-client":224,"indexof":251,"socket.io-parser":254}],215:[function(require,module,exports){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function(){
      obj.removeListener(ev, fn);
    }
  };
}

},{}],216:[function(require,module,exports){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var Emitter = require('component-emitter');
var toArray = require('to-array');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:socket');
var hasBin = require('has-binary');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp){
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function() {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function(){
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' == this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function(){
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function(ev){
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' == typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function(packet){
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function(){
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' != this.nsp) {
    this.packet({ type: parser.CONNECT });
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function(reason){
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function(packet){
  if (packet.nsp != this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function(packet){
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function(id){
  var self = this;
  var sent = false;
  return function(){
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function(packet){
  var ack = this.acks[packet.id];
  if ('function' == typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function(){
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function(){
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function(){
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function(){
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function(){
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function(compress){
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};

},{"./on":215,"component-bind":219,"component-emitter":220,"debug":221,"has-binary":249,"socket.io-parser":254,"to-array":259}],217:[function(require,module,exports){
(function (global){

/**
 * Module dependencies.
 */

var parseuri = require('parseuri');
var debug = require('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc){
  var obj = uri;

  // default to window.location
  var loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' == typeof uri) {
    if ('/' == uri.charAt(0)) {
      if ('/' == uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' != typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    }
    else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

  return obj;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"debug":221,"parseuri":252}],218:[function(require,module,exports){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],219:[function(require,module,exports){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

},{}],220:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],221:[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":222}],222:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":223}],223:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],224:[function(require,module,exports){

module.exports =  require('./lib/');

},{"./lib/":225}],225:[function(require,module,exports){

module.exports = require('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = require('engine.io-parser');

},{"./socket":226,"engine.io-parser":236}],226:[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var transports = require('./transports');
var Emitter = require('component-emitter');
var debug = require('debug')('engine.io-client:socket');
var index = require('indexof');
var parser = require('engine.io-parser');
var parseuri = require('parseuri');
var parsejson = require('parsejson');
var parseqs = require('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Noop function.
 *
 * @api private
 */

function noop(){}

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts){
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' == typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure :
    (global.location && 'https:' == location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port ?
       location.port :
       (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;

  // other options for Node.js client
  var freeGlobal = typeof global == 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }
  }

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = require('./transport');
Socket.transports = require('./transports');
Socket.parser = require('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this,
    pfx: this.pfx,
    key: this.key,
    passphrase: this.passphrase,
    cert: this.cert,
    ca: this.ca,
    ciphers: this.ciphers,
    rejectUnauthorized: this.rejectUnauthorized,
    perMessageDeflate: this.perMessageDeflate,
    extraHeaders: this.extraHeaders
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function() {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function(transport){
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function(){
    self.onDrain();
  })
  .on('packet', function(packet){
    self.onPacket(packet);
  })
  .on('error', function(e){
    self.onError(e);
  })
  .on('close', function(){
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 })
    , failed = false
    , self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen(){
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' == msg.type && 'probe' == msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' == transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' == self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  //Handle any error that happens while probing
  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose(){
    onerror("transport closed");
  }

  //When the socket is closed while we're probing
  function onclose(){
    onerror("socket closed");
  }

  //When the socket is upgraded while we're probing
  function onupgrade(to){
    if (transport && to.name != transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  //Remove all listeners on the transport and on self
  function cleanup(){
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();

};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if  ('closed' == this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' == self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function(){
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function() {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' != this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if('function' == typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' == typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' == this.readyState || 'closed' == this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function() {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close() {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose() {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade() {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i<j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./transport":227,"./transports":228,"component-emitter":234,"debug":221,"engine.io-parser":236,"indexof":251,"parsejson":246,"parseqs":247,"parseuri":252}],227:[function(require,module,exports){
/**
 * Module dependencies.
 */

var parser = require('engine.io-parser');
var Emitter = require('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' == this.readyState || '' == this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function(packets){
  if ('open' == this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function(data){
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"component-emitter":234,"engine.io-parser":236}],228:[function(require,module,exports){
(function (global){
/**
 * Module dependencies
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');
var websocket = require('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts){
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' == location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname != location.hostname || port != opts.port;
    xs = opts.secure != isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling-jsonp":229,"./polling-xhr":230,"./websocket":232,"xmlhttprequest-ssl":233}],229:[function(require,module,exports){
(function (global){

/**
 * Module requirements.
 */

var Polling = require('./polling');
var inherit = require('component-inherit');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Callbacks count.
 */

var index = 0;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function(e){
    self.onError('jsonp poll error',e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  }
  else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
  
  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch(e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function(){
      if (self.iframe.readyState == 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":231,"component-inherit":235}],230:[function(require,module,exports){
(function (global){
/**
 * Module requirements.
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var Polling = require('./polling');
var Emitter = require('component-emitter');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty(){}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR(opts){
  Polling.call(this, opts);

  if (global.location) {
    var isSSL = 'https:' == location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname != global.location.hostname ||
      port != opts.port;
    this.xs = opts.secure != isSSL;
  } else {
    this.extraHeaders = opts.extraHeaders;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function(opts){
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function(data, fn){
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function(err){
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function(){
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function(data){
    self.onData(data);
  });
  req.on('error', function(err){
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request(opts){
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined != opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function(){
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' == this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.hasXDR()) {
      xhr.onload = function(){
        self.onLoad();
      };
      xhr.onerror = function(){
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function(){
        if (4 != xhr.readyState) return;
        if (200 == xhr.status || 1223 == xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function(){
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function() {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function(){
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function(data){
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function(err){
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function(fromError){
  if ('undefined' == typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch(e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function(){
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        try {
          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
        } catch (e) {
          var ui8Arr = new Uint8Array(this.xhr.response);
          var dataArray = [];
          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
            dataArray.push(ui8Arr[idx]);
          }

          data = String.fromCharCode.apply(null, dataArray);
        }
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function(){
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function(){
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

if (global.document) {
  Request.requestsCount = 0;
  Request.requests = {};
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":231,"component-emitter":234,"component-inherit":235,"debug":221,"xmlhttprequest-ssl":233}],231:[function(require,module,exports){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parseqs = require('parseqs');
var parser = require('engine.io-parser');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function() {
  var XMLHttpRequest = require('xmlhttprequest-ssl');
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling(opts){
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function(){
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function(onPause){
  var pending = 0;
  var self = this;

  this.readyState = 'pausing';

  function pause(){
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function(){
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function(){
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function(){
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function(data){
  var self = this;
  debug('polling got data %s', data);
  var callback = function(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' == self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' == packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' != this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' == this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function(){
  var self = this;

  function close(){
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' == this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function(packets){
  var self = this;
  this.writable = false;
  var callbackfn = function() {
    self.writable = true;
    self.emit('drain');
  };

  var self = this;
  parser.encodePayload(packets, this.supportsBinary, function(data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function(){
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' == schema && this.port != 443) ||
     ('http' == schema && this.port != 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

},{"../transport":227,"component-inherit":235,"debug":221,"engine.io-parser":236,"parseqs":247,"xmlhttprequest-ssl":233,"yeast":248}],232:[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var parseqs = require('parseqs');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  try {
    WebSocket = require('ws');
  } catch (e) { }
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts){
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function(){
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var self = this;
  var uri = this.uri();
  var protocols = void(0);
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }

  this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'buffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function(){
  var self = this;

  this.ws.onopen = function(){
    self.onOpen();
  };
  this.ws.onclose = function(){
    self.onClose();
  };
  this.ws.onmessage = function(ev){
    self.onData(ev.data);
  };
  this.ws.onerror = function(e){
    self.onError('websocket error', e);
  };
};

/**
 * Override `onData` to use a timer on iOS.
 * See: https://gist.github.com/mloughran/2052006
 *
 * @api private
 */

if ('undefined' != typeof navigator
  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
  WS.prototype.onData = function(data){
    var self = this;
    setTimeout(function(){
      Transport.prototype.onData.call(self, data);
    }, 0);
  };
}

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function(packets){
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function(packet) {
      parser.encodePacket(packet, self.supportsBinary, function(data) {
        if (!BrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        //Sometimes the websocket has already been closed but the browser didn't
        //have a chance of informing us about it yet, in that case send will
        //throw an error
        try {
          if (BrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e){
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done(){
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function(){
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function(){
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function(){
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function(){
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' == schema && this.port != 443)
    || ('ws' == schema && this.port != 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function(){
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../transport":227,"component-inherit":235,"debug":221,"engine.io-parser":236,"parseqs":247,"ws":79,"yeast":248}],233:[function(require,module,exports){
// browser shim for xmlhttprequest module
var hasCORS = require('has-cors');

module.exports = function(opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new ActiveXObject('Microsoft.XMLHTTP');
    } catch(e) { }
  }
}

},{"has-cors":245}],234:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],235:[function(require,module,exports){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
},{}],236:[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var keys = require('./keys');
var hasBinary = require('has-binary');
var sliceBuffer = require('arraybuffer.slice');
var base64encoder = require('base64-arraybuffer');
var after = require('after');
var utf8 = require('utf8');

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = navigator.userAgent.match(/Android/i);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = require('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  // String data
  if (typeof data == 'string' || data === undefined) {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      try {
        data = utf8.decode(data);
      } catch (e) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!global.ArrayBuffer) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./keys":237,"after":238,"arraybuffer.slice":239,"base64-arraybuffer":240,"blob":241,"has-binary":242,"utf8":244}],237:[function(require,module,exports){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

},{}],238:[function(require,module,exports){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

},{}],239:[function(require,module,exports){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

},{}],240:[function(require,module,exports){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

},{}],241:[function(require,module,exports){
(function (global){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],242:[function(require,module,exports){
(function (global){

/*
 * Module requirements.
 */

var isArray = require('isarray');

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      if (obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"isarray":243}],243:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],244:[function(require,module,exports){
(function (global){
/*! https://mths.be/utf8js v2.0.0 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			checkScalarValue(codePoint);
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				checkScalarValue(codePoint);
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.0.0',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return utf8;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.utf8 = utf8;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],245:[function(require,module,exports){

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{}],246:[function(require,module,exports){
(function (global){
/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],247:[function(require,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],248:[function(require,module,exports){
'use strict';

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

},{}],249:[function(require,module,exports){
(function (global){

/*
 * Module requirements.
 */

var isArray = require('isarray');

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      // see: https://github.com/Automattic/has-binary/pull/4
      if (obj.toJSON && 'function' == typeof obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"isarray":250}],250:[function(require,module,exports){
arguments[4][243][0].apply(exports,arguments)
},{"dup":243}],251:[function(require,module,exports){
arguments[4][184][0].apply(exports,arguments)
},{"dup":184}],252:[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

},{}],253:[function(require,module,exports){
(function (global){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./is-buffer":255,"isarray":257}],254:[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var json = require('json3');
var isArray = require('isarray');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    var buf = '';
    while (str.charAt(++i) != '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) != '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    try {
      p.data = json.parse(str.substr(i));
    } catch(e){
      return error();
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}

},{"./binary":253,"./is-buffer":255,"component-emitter":256,"debug":221,"isarray":257,"json3":258}],255:[function(require,module,exports){
(function (global){

module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],256:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"dup":234}],257:[function(require,module,exports){
arguments[4][243][0].apply(exports,arguments)
},{"dup":243}],258:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],259:[function(require,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}],260:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":175,"inherits":185,"readable-stream/duplex.js":262,"readable-stream/passthrough.js":269,"readable-stream/readable.js":270,"readable-stream/transform.js":271,"readable-stream/writable.js":272}],261:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"dup":106}],262:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":263}],263:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":265,"./_stream_writable":267,"core-util-is":108,"inherits":185,"process-nextick-args":195}],264:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":266,"core-util-is":108,"inherits":185}],265:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))
},{"./_stream_duplex":263,"./internal/streams/BufferList":268,"_process":196,"buffer":"buffer","buffer-shims":104,"core-util-is":108,"events":175,"inherits":185,"isarray":261,"process-nextick-args":195,"string_decoder/":273,"util":79}],266:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":263,"core-util-is":108,"inherits":185}],267:[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,require('_process'))
},{"./_stream_duplex":263,"_process":196,"buffer":"buffer","buffer-shims":104,"core-util-is":108,"events":175,"inherits":185,"process-nextick-args":195,"util-deprecate":274}],268:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};
},{"buffer":"buffer","buffer-shims":104}],269:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":264}],270:[function(require,module,exports){
(function (process){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

}).call(this,require('_process'))
},{"./lib/_stream_duplex.js":263,"./lib/_stream_passthrough.js":264,"./lib/_stream_readable.js":265,"./lib/_stream_transform.js":266,"./lib/_stream_writable.js":267,"_process":196}],271:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":266}],272:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":267}],273:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":"buffer"}],274:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],275:[function(require,module,exports){
arguments[4][185][0].apply(exports,arguments)
},{"dup":185}],276:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],277:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":276,"_process":196,"inherits":275}],278:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":184}],279:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function (require) {

	var makePromise = require('./makePromise');
	var Scheduler = require('./Scheduler');
	var async = require('./env').asap;

	return makePromise({
		scheduler: new Scheduler(async)
	});

});
})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });

},{"./Scheduler":280,"./env":292,"./makePromise":294}],280:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	// Credit to Twisol (https://github.com/Twisol) for suggesting
	// this type of extensible queue + trampoline approach for next-tick conflation.

	/**
	 * Async task scheduler
	 * @param {function} async function to schedule a single async function
	 * @constructor
	 */
	function Scheduler(async) {
		this._async = async;
		this._running = false;

		this._queue = this;
		this._queueLen = 0;
		this._afterQueue = {};
		this._afterQueueLen = 0;

		var self = this;
		this.drain = function() {
			self._drain();
		};
	}

	/**
	 * Enqueue a task
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.enqueue = function(task) {
		this._queue[this._queueLen++] = task;
		this.run();
	};

	/**
	 * Enqueue a task to run after the main task queue
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.afterQueue = function(task) {
		this._afterQueue[this._afterQueueLen++] = task;
		this.run();
	};

	Scheduler.prototype.run = function() {
		if (!this._running) {
			this._running = true;
			this._async(this.drain);
		}
	};

	/**
	 * Drain the handler queue entirely, and then the after queue
	 */
	Scheduler.prototype._drain = function() {
		var i = 0;
		for (; i < this._queueLen; ++i) {
			this._queue[i].run();
			this._queue[i] = void 0;
		}

		this._queueLen = 0;
		this._running = false;

		for (i = 0; i < this._afterQueueLen; ++i) {
			this._afterQueue[i].run();
			this._afterQueue[i] = void 0;
		}

		this._afterQueueLen = 0;
	};

	return Scheduler;

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],281:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	/**
	 * Custom error type for promises rejected by promise.timeout
	 * @param {string} message
	 * @constructor
	 */
	function TimeoutError (message) {
		Error.call(this);
		this.message = message;
		this.name = TimeoutError.name;
		if (typeof Error.captureStackTrace === 'function') {
			Error.captureStackTrace(this, TimeoutError);
		}
	}

	TimeoutError.prototype = Object.create(Error.prototype);
	TimeoutError.prototype.constructor = TimeoutError;

	return TimeoutError;
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));
},{}],282:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	makeApply.tryCatchResolve = tryCatchResolve;

	return makeApply;

	function makeApply(Promise, call) {
		if(arguments.length < 2) {
			call = tryCatchResolve;
		}

		return apply;

		function apply(f, thisArg, args) {
			var p = Promise._defer();
			var l = args.length;
			var params = new Array(l);
			callAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);

			return p;
		}

		function callAndResolve(c, h) {
			if(c.i < 0) {
				return call(c.f, c.thisArg, c.params, h);
			}

			var handler = Promise._handler(c.args[c.i]);
			handler.fold(callAndResolveNext, c, void 0, h);
		}

		function callAndResolveNext(c, x, h) {
			c.params[c.i] = x;
			c.i -= 1;
			callAndResolve(c, h);
		}
	}

	function tryCatchResolve(f, thisArg, args, resolver) {
		try {
			resolver.resolve(f.apply(thisArg, args));
		} catch(e) {
			resolver.reject(e);
		}
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));



},{}],283:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var state = require('../state');
	var applier = require('../apply');

	return function array(Promise) {

		var applyFold = applier(Promise);
		var toPromise = Promise.resolve;
		var all = Promise.all;

		var ar = Array.prototype.reduce;
		var arr = Array.prototype.reduceRight;
		var slice = Array.prototype.slice;

		// Additional array combinators

		Promise.any = any;
		Promise.some = some;
		Promise.settle = settle;

		Promise.map = map;
		Promise.filter = filter;
		Promise.reduce = reduce;
		Promise.reduceRight = reduceRight;

		/**
		 * When this promise fulfills with an array, do
		 * onFulfilled.apply(void 0, array)
		 * @param {function} onFulfilled function to apply
		 * @returns {Promise} promise for the result of applying onFulfilled
		 */
		Promise.prototype.spread = function(onFulfilled) {
			return this.then(all).then(function(array) {
				return onFulfilled.apply(this, array);
			});
		};

		return Promise;

		/**
		 * One-winner competitive race.
		 * Return a promise that will fulfill when one of the promises
		 * in the input array fulfills, or will reject when all promises
		 * have rejected.
		 * @param {array} promises
		 * @returns {Promise} promise for the first fulfilled value
		 */
		function any(promises) {
			var p = Promise._defer();
			var resolver = p._handler;
			var l = promises.length>>>0;

			var pending = l;
			var errors = [];

			for (var h, x, i = 0; i < l; ++i) {
				x = promises[i];
				if(x === void 0 && !(i in promises)) {
					--pending;
					continue;
				}

				h = Promise._handler(x);
				if(h.state() > 0) {
					resolver.become(h);
					Promise._visitRemaining(promises, i, h);
					break;
				} else {
					h.visit(resolver, handleFulfill, handleReject);
				}
			}

			if(pending === 0) {
				resolver.reject(new RangeError('any(): array must not be empty'));
			}

			return p;

			function handleFulfill(x) {
				/*jshint validthis:true*/
				errors = null;
				this.resolve(x); // this === resolver
			}

			function handleReject(e) {
				/*jshint validthis:true*/
				if(this.resolved) { // this === resolver
					return;
				}

				errors.push(e);
				if(--pending === 0) {
					this.reject(errors);
				}
			}
		}

		/**
		 * N-winner competitive race
		 * Return a promise that will fulfill when n input promises have
		 * fulfilled, or will reject when it becomes impossible for n
		 * input promises to fulfill (ie when promises.length - n + 1
		 * have rejected)
		 * @param {array} promises
		 * @param {number} n
		 * @returns {Promise} promise for the earliest n fulfillment values
		 *
		 * @deprecated
		 */
		function some(promises, n) {
			/*jshint maxcomplexity:7*/
			var p = Promise._defer();
			var resolver = p._handler;

			var results = [];
			var errors = [];

			var l = promises.length>>>0;
			var nFulfill = 0;
			var nReject;
			var x, i; // reused in both for() loops

			// First pass: count actual array items
			for(i=0; i<l; ++i) {
				x = promises[i];
				if(x === void 0 && !(i in promises)) {
					continue;
				}
				++nFulfill;
			}

			// Compute actual goals
			n = Math.max(n, 0);
			nReject = (nFulfill - n + 1);
			nFulfill = Math.min(n, nFulfill);

			if(n > nFulfill) {
				resolver.reject(new RangeError('some(): array must contain at least '
				+ n + ' item(s), but had ' + nFulfill));
			} else if(nFulfill === 0) {
				resolver.resolve(results);
			}

			// Second pass: observe each array item, make progress toward goals
			for(i=0; i<l; ++i) {
				x = promises[i];
				if(x === void 0 && !(i in promises)) {
					continue;
				}

				Promise._handler(x).visit(resolver, fulfill, reject, resolver.notify);
			}

			return p;

			function fulfill(x) {
				/*jshint validthis:true*/
				if(this.resolved) { // this === resolver
					return;
				}

				results.push(x);
				if(--nFulfill === 0) {
					errors = null;
					this.resolve(results);
				}
			}

			function reject(e) {
				/*jshint validthis:true*/
				if(this.resolved) { // this === resolver
					return;
				}

				errors.push(e);
				if(--nReject === 0) {
					results = null;
					this.reject(errors);
				}
			}
		}

		/**
		 * Apply f to the value of each promise in a list of promises
		 * and return a new list containing the results.
		 * @param {array} promises
		 * @param {function(x:*, index:Number):*} f mapping function
		 * @returns {Promise}
		 */
		function map(promises, f) {
			return Promise._traverse(f, promises);
		}

		/**
		 * Filter the provided array of promises using the provided predicate.  Input may
		 * contain promises and values
		 * @param {Array} promises array of promises and values
		 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
		 *  Must return truthy (or promise for truthy) for items to retain.
		 * @returns {Promise} promise that will fulfill with an array containing all items
		 *  for which predicate returned truthy.
		 */
		function filter(promises, predicate) {
			var a = slice.call(promises);
			return Promise._traverse(predicate, a).then(function(keep) {
				return filterSync(a, keep);
			});
		}

		function filterSync(promises, keep) {
			// Safe because we know all promises have fulfilled if we've made it this far
			var l = keep.length;
			var filtered = new Array(l);
			for(var i=0, j=0; i<l; ++i) {
				if(keep[i]) {
					filtered[j++] = Promise._handler(promises[i]).value;
				}
			}
			filtered.length = j;
			return filtered;

		}

		/**
		 * Return a promise that will always fulfill with an array containing
		 * the outcome states of all input promises.  The returned promise
		 * will never reject.
		 * @param {Array} promises
		 * @returns {Promise} promise for array of settled state descriptors
		 */
		function settle(promises) {
			return all(promises.map(settleOne));
		}

		function settleOne(p) {
			var h = Promise._handler(p);
			if(h.state() === 0) {
				return toPromise(p).then(state.fulfilled, state.rejected);
			}

			h._unreport();
			return state.inspect(h);
		}

		/**
		 * Traditional reduce function, similar to `Array.prototype.reduce()`, but
		 * input may contain promises and/or values, and reduceFunc
		 * may return either a value or a promise, *and* initialValue may
		 * be a promise for the starting value.
		 * @param {Array|Promise} promises array or promise for an array of anything,
		 *      may contain a mix of promises and values.
		 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
		 * @returns {Promise} that will resolve to the final reduced value
		 */
		function reduce(promises, f /*, initialValue */) {
			return arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])
					: ar.call(promises, liftCombine(f));
		}

		/**
		 * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but
		 * input may contain promises and/or values, and reduceFunc
		 * may return either a value or a promise, *and* initialValue may
		 * be a promise for the starting value.
		 * @param {Array|Promise} promises array or promise for an array of anything,
		 *      may contain a mix of promises and values.
		 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
		 * @returns {Promise} that will resolve to the final reduced value
		 */
		function reduceRight(promises, f /*, initialValue */) {
			return arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])
					: arr.call(promises, liftCombine(f));
		}

		function liftCombine(f) {
			return function(z, x, i) {
				return applyFold(f, void 0, [z,x,i]);
			};
		}
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../apply":282,"../state":295}],284:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function flow(Promise) {

		var resolve = Promise.resolve;
		var reject = Promise.reject;
		var origCatch = Promise.prototype['catch'];

		/**
		 * Handle the ultimate fulfillment value or rejection reason, and assume
		 * responsibility for all errors.  If an error propagates out of result
		 * or handleFatalError, it will be rethrown to the host, resulting in a
		 * loud stack track on most platforms and a crash on some.
		 * @param {function?} onResult
		 * @param {function?} onError
		 * @returns {undefined}
		 */
		Promise.prototype.done = function(onResult, onError) {
			this._handler.visit(this._handler.receiver, onResult, onError);
		};

		/**
		 * Add Error-type and predicate matching to catch.  Examples:
		 * promise.catch(TypeError, handleTypeError)
		 *   .catch(predicate, handleMatchedErrors)
		 *   .catch(handleRemainingErrors)
		 * @param onRejected
		 * @returns {*}
		 */
		Promise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {
			if (arguments.length < 2) {
				return origCatch.call(this, onRejected);
			}

			if(typeof onRejected !== 'function') {
				return this.ensure(rejectInvalidPredicate);
			}

			return origCatch.call(this, createCatchFilter(arguments[1], onRejected));
		};

		/**
		 * Wraps the provided catch handler, so that it will only be called
		 * if the predicate evaluates truthy
		 * @param {?function} handler
		 * @param {function} predicate
		 * @returns {function} conditional catch handler
		 */
		function createCatchFilter(handler, predicate) {
			return function(e) {
				return evaluatePredicate(e, predicate)
					? handler.call(this, e)
					: reject(e);
			};
		}

		/**
		 * Ensures that onFulfilledOrRejected will be called regardless of whether
		 * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT
		 * receive the promises' value or reason.  Any returned value will be disregarded.
		 * onFulfilledOrRejected may throw or return a rejected promise to signal
		 * an additional error.
		 * @param {function} handler handler to be called regardless of
		 *  fulfillment or rejection
		 * @returns {Promise}
		 */
		Promise.prototype['finally'] = Promise.prototype.ensure = function(handler) {
			if(typeof handler !== 'function') {
				return this;
			}

			return this.then(function(x) {
				return runSideEffect(handler, this, identity, x);
			}, function(e) {
				return runSideEffect(handler, this, reject, e);
			});
		};

		function runSideEffect (handler, thisArg, propagate, value) {
			var result = handler.call(thisArg);
			return maybeThenable(result)
				? propagateValue(result, propagate, value)
				: propagate(value);
		}

		function propagateValue (result, propagate, x) {
			return resolve(result).then(function () {
				return propagate(x);
			});
		}

		/**
		 * Recover from a failure by returning a defaultValue.  If defaultValue
		 * is a promise, it's fulfillment value will be used.  If defaultValue is
		 * a promise that rejects, the returned promise will reject with the
		 * same reason.
		 * @param {*} defaultValue
		 * @returns {Promise} new promise
		 */
		Promise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {
			return this.then(void 0, function() {
				return defaultValue;
			});
		};

		/**
		 * Shortcut for .then(function() { return value; })
		 * @param  {*} value
		 * @return {Promise} a promise that:
		 *  - is fulfilled if value is not a promise, or
		 *  - if value is a promise, will fulfill with its value, or reject
		 *    with its reason.
		 */
		Promise.prototype['yield'] = function(value) {
			return this.then(function() {
				return value;
			});
		};

		/**
		 * Runs a side effect when this promise fulfills, without changing the
		 * fulfillment value.
		 * @param {function} onFulfilledSideEffect
		 * @returns {Promise}
		 */
		Promise.prototype.tap = function(onFulfilledSideEffect) {
			return this.then(onFulfilledSideEffect)['yield'](this);
		};

		return Promise;
	};

	function rejectInvalidPredicate() {
		throw new TypeError('catch predicate must be a function');
	}

	function evaluatePredicate(e, predicate) {
		return isError(predicate) ? e instanceof predicate : predicate(e);
	}

	function isError(predicate) {
		return predicate === Error
			|| (predicate != null && predicate.prototype instanceof Error);
	}

	function maybeThenable(x) {
		return (typeof x === 'object' || typeof x === 'function') && x !== null;
	}

	function identity(x) {
		return x;
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],285:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
/** @author Jeff Escalante */

(function(define) { 'use strict';
define(function() {

	return function fold(Promise) {

		Promise.prototype.fold = function(f, z) {
			var promise = this._beget();

			this._handler.fold(function(z, x, to) {
				Promise._handler(z).fold(function(x, z, to) {
					to.resolve(f.call(this, z, x));
				}, x, this, to);
			}, z, promise._handler.receiver, promise._handler);

			return promise;
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],286:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var inspect = require('../state').inspect;

	return function inspection(Promise) {

		Promise.prototype.inspect = function() {
			return inspect(Promise._handler(this));
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../state":295}],287:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function generate(Promise) {

		var resolve = Promise.resolve;

		Promise.iterate = iterate;
		Promise.unfold = unfold;

		return Promise;

		/**
		 * @deprecated Use github.com/cujojs/most streams and most.iterate
		 * Generate a (potentially infinite) stream of promised values:
		 * x, f(x), f(f(x)), etc. until condition(x) returns true
		 * @param {function} f function to generate a new x from the previous x
		 * @param {function} condition function that, given the current x, returns
		 *  truthy when the iterate should stop
		 * @param {function} handler function to handle the value produced by f
		 * @param {*|Promise} x starting value, may be a promise
		 * @return {Promise} the result of the last call to f before
		 *  condition returns true
		 */
		function iterate(f, condition, handler, x) {
			return unfold(function(x) {
				return [x, f(x)];
			}, condition, handler, x);
		}

		/**
		 * @deprecated Use github.com/cujojs/most streams and most.unfold
		 * Generate a (potentially infinite) stream of promised values
		 * by applying handler(generator(seed)) iteratively until
		 * condition(seed) returns true.
		 * @param {function} unspool function that generates a [value, newSeed]
		 *  given a seed.
		 * @param {function} condition function that, given the current seed, returns
		 *  truthy when the unfold should stop
		 * @param {function} handler function to handle the value produced by unspool
		 * @param x {*|Promise} starting value, may be a promise
		 * @return {Promise} the result of the last value produced by unspool before
		 *  condition returns true
		 */
		function unfold(unspool, condition, handler, x) {
			return resolve(x).then(function(seed) {
				return resolve(condition(seed)).then(function(done) {
					return done ? seed : resolve(unspool(seed)).spread(next);
				});
			});

			function next(item, newSeed) {
				return resolve(handler(item)).then(function() {
					return unfold(unspool, condition, handler, newSeed);
				});
			}
		}
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],288:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function progress(Promise) {

		/**
		 * @deprecated
		 * Register a progress handler for this promise
		 * @param {function} onProgress
		 * @returns {Promise}
		 */
		Promise.prototype.progress = function(onProgress) {
			return this.then(void 0, void 0, onProgress);
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],289:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var env = require('../env');
	var TimeoutError = require('../TimeoutError');

	function setTimeout(f, ms, x, y) {
		return env.setTimer(function() {
			f(x, y, ms);
		}, ms);
	}

	return function timed(Promise) {
		/**
		 * Return a new promise whose fulfillment value is revealed only
		 * after ms milliseconds
		 * @param {number} ms milliseconds
		 * @returns {Promise}
		 */
		Promise.prototype.delay = function(ms) {
			var p = this._beget();
			this._handler.fold(handleDelay, ms, void 0, p._handler);
			return p;
		};

		function handleDelay(ms, x, h) {
			setTimeout(resolveDelay, ms, x, h);
		}

		function resolveDelay(x, h) {
			h.resolve(x);
		}

		/**
		 * Return a new promise that rejects after ms milliseconds unless
		 * this promise fulfills earlier, in which case the returned promise
		 * fulfills with the same value.
		 * @param {number} ms milliseconds
		 * @param {Error|*=} reason optional rejection reason to use, defaults
		 *   to a TimeoutError if not provided
		 * @returns {Promise}
		 */
		Promise.prototype.timeout = function(ms, reason) {
			var p = this._beget();
			var h = p._handler;

			var t = setTimeout(onTimeout, ms, reason, p._handler);

			this._handler.visit(h,
				function onFulfill(x) {
					env.clearTimer(t);
					this.resolve(x); // this = h
				},
				function onReject(x) {
					env.clearTimer(t);
					this.reject(x); // this = h
				},
				h.notify);

			return p;
		};

		function onTimeout(reason, h, ms) {
			var e = typeof reason === 'undefined'
				? new TimeoutError('timed out after ' + ms + 'ms')
				: reason;
			h.reject(e);
		}

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../TimeoutError":281,"../env":292}],290:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var setTimer = require('../env').setTimer;
	var format = require('../format');

	return function unhandledRejection(Promise) {

		var logError = noop;
		var logInfo = noop;
		var localConsole;

		if(typeof console !== 'undefined') {
			// Alias console to prevent things like uglify's drop_console option from
			// removing console.log/error. Unhandled rejections fall into the same
			// category as uncaught exceptions, and build tools shouldn't silence them.
			localConsole = console;
			logError = typeof localConsole.error !== 'undefined'
				? function (e) { localConsole.error(e); }
				: function (e) { localConsole.log(e); };

			logInfo = typeof localConsole.info !== 'undefined'
				? function (e) { localConsole.info(e); }
				: function (e) { localConsole.log(e); };
		}

		Promise.onPotentiallyUnhandledRejection = function(rejection) {
			enqueue(report, rejection);
		};

		Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {
			enqueue(unreport, rejection);
		};

		Promise.onFatalRejection = function(rejection) {
			enqueue(throwit, rejection.value);
		};

		var tasks = [];
		var reported = [];
		var running = null;

		function report(r) {
			if(!r.handled) {
				reported.push(r);
				logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
			}
		}

		function unreport(r) {
			var i = reported.indexOf(r);
			if(i >= 0) {
				reported.splice(i, 1);
				logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
			}
		}

		function enqueue(f, x) {
			tasks.push(f, x);
			if(running === null) {
				running = setTimer(flush, 0);
			}
		}

		function flush() {
			running = null;
			while(tasks.length > 0) {
				tasks.shift()(tasks.shift());
			}
		}

		return Promise;
	};

	function throwit(e) {
		throw e;
	}

	function noop() {}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../env":292,"../format":293}],291:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function addWith(Promise) {
		/**
		 * Returns a promise whose handlers will be called with `this` set to
		 * the supplied receiver.  Subsequent promises derived from the
		 * returned promise will also have their handlers called with receiver
		 * as `this`. Calling `with` with undefined or no arguments will return
		 * a promise whose handlers will again be called in the usual Promises/A+
		 * way (no `this`) thus safely undoing any previous `with` in the
		 * promise chain.
		 *
		 * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+
		 * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)
		 *
		 * @param {object} receiver `this` value for all handlers attached to
		 *  the returned promise.
		 * @returns {Promise}
		 */
		Promise.prototype['with'] = Promise.prototype.withThis = function(receiver) {
			var p = this._beget();
			var child = p._handler;
			child.receiver = receiver;
			this._handler.chain(child, receiver);
			return p;
		};

		return Promise;
	};

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));


},{}],292:[function(require,module,exports){
(function (process){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
(function(define) { 'use strict';
define(function(require) {
	/*jshint maxcomplexity:6*/

	// Sniff "best" async scheduling option
	// Prefer process.nextTick or MutationObserver, then check for
	// setTimeout, and finally vertx, since its the only env that doesn't
	// have setTimeout

	var MutationObs;
	var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;

	// Default env
	var setTimer = function(f, ms) { return setTimeout(f, ms); };
	var clearTimer = function(t) { return clearTimeout(t); };
	var asap = function (f) { return capturedSetTimeout(f, 0); };

	// Detect specific env
	if (isNode()) { // Node
		asap = function (f) { return process.nextTick(f); };

	} else if (MutationObs = hasMutationObserver()) { // Modern browser
		asap = initMutationObserver(MutationObs);

	} else if (!capturedSetTimeout) { // vert.x
		var vertxRequire = require;
		var vertx = vertxRequire('vertx');
		setTimer = function (f, ms) { return vertx.setTimer(ms, f); };
		clearTimer = vertx.cancelTimer;
		asap = vertx.runOnLoop || vertx.runOnContext;
	}

	return {
		setTimer: setTimer,
		clearTimer: clearTimer,
		asap: asap
	};

	function isNode () {
		return typeof process !== 'undefined' &&
			Object.prototype.toString.call(process) === '[object process]';
	}

	function hasMutationObserver () {
		return (typeof MutationObserver === 'function' && MutationObserver) ||
			(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);
	}

	function initMutationObserver(MutationObserver) {
		var scheduled;
		var node = document.createTextNode('');
		var o = new MutationObserver(run);
		o.observe(node, { characterData: true });

		function run() {
			var f = scheduled;
			scheduled = void 0;
			f();
		}

		var i = 0;
		return function (f) {
			scheduled = f;
			node.data = (i ^= 1);
		};
	}
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

}).call(this,require('_process'))
},{"_process":196}],293:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return {
		formatError: formatError,
		formatObject: formatObject,
		tryStringify: tryStringify
	};

	/**
	 * Format an error into a string.  If e is an Error and has a stack property,
	 * it's returned.  Otherwise, e is formatted using formatObject, with a
	 * warning added about e not being a proper Error.
	 * @param {*} e
	 * @returns {String} formatted string, suitable for output to developers
	 */
	function formatError(e) {
		var s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);
		return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
	}

	/**
	 * Format an object, detecting "plain" objects and running them through
	 * JSON.stringify if possible.
	 * @param {Object} o
	 * @returns {string}
	 */
	function formatObject(o) {
		var s = String(o);
		if(s === '[object Object]' && typeof JSON !== 'undefined') {
			s = tryStringify(o, s);
		}
		return s;
	}

	/**
	 * Try to return the result of JSON.stringify(x).  If that fails, return
	 * defaultValue
	 * @param {*} x
	 * @param {*} defaultValue
	 * @returns {String|*} JSON.stringify(x) or defaultValue
	 */
	function tryStringify(x, defaultValue) {
		try {
			return JSON.stringify(x);
		} catch(e) {
			return defaultValue;
		}
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],294:[function(require,module,exports){
(function (process){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function makePromise(environment) {

		var tasks = environment.scheduler;
		var emitRejection = initEmitRejection();

		var objectCreate = Object.create ||
			function(proto) {
				function Child() {}
				Child.prototype = proto;
				return new Child();
			};

		/**
		 * Create a promise whose fate is determined by resolver
		 * @constructor
		 * @returns {Promise} promise
		 * @name Promise
		 */
		function Promise(resolver, handler) {
			this._handler = resolver === Handler ? handler : init(resolver);
		}

		/**
		 * Run the supplied resolver
		 * @param resolver
		 * @returns {Pending}
		 */
		function init(resolver) {
			var handler = new Pending();

			try {
				resolver(promiseResolve, promiseReject, promiseNotify);
			} catch (e) {
				promiseReject(e);
			}

			return handler;

			/**
			 * Transition from pre-resolution state to post-resolution state, notifying
			 * all listeners of the ultimate fulfillment or rejection
			 * @param {*} x resolution value
			 */
			function promiseResolve (x) {
				handler.resolve(x);
			}
			/**
			 * Reject this promise with reason, which will be used verbatim
			 * @param {Error|*} reason rejection reason, strongly suggested
			 *   to be an Error type
			 */
			function promiseReject (reason) {
				handler.reject(reason);
			}

			/**
			 * @deprecated
			 * Issue a progress event, notifying all progress listeners
			 * @param {*} x progress event payload to pass to all listeners
			 */
			function promiseNotify (x) {
				handler.notify(x);
			}
		}

		// Creation

		Promise.resolve = resolve;
		Promise.reject = reject;
		Promise.never = never;

		Promise._defer = defer;
		Promise._handler = getHandler;

		/**
		 * Returns a trusted promise. If x is already a trusted promise, it is
		 * returned, otherwise returns a new trusted Promise which follows x.
		 * @param  {*} x
		 * @return {Promise} promise
		 */
		function resolve(x) {
			return isPromise(x) ? x
				: new Promise(Handler, new Async(getHandler(x)));
		}

		/**
		 * Return a reject promise with x as its reason (x is used verbatim)
		 * @param {*} x
		 * @returns {Promise} rejected promise
		 */
		function reject(x) {
			return new Promise(Handler, new Async(new Rejected(x)));
		}

		/**
		 * Return a promise that remains pending forever
		 * @returns {Promise} forever-pending promise.
		 */
		function never() {
			return foreverPendingPromise; // Should be frozen
		}

		/**
		 * Creates an internal {promise, resolver} pair
		 * @private
		 * @returns {Promise}
		 */
		function defer() {
			return new Promise(Handler, new Pending());
		}

		// Transformation and flow control

		/**
		 * Transform this promise's fulfillment value, returning a new Promise
		 * for the transformed result.  If the promise cannot be fulfilled, onRejected
		 * is called with the reason.  onProgress *may* be called with updates toward
		 * this promise's fulfillment.
		 * @param {function=} onFulfilled fulfillment handler
		 * @param {function=} onRejected rejection handler
		 * @param {function=} onProgress @deprecated progress handler
		 * @return {Promise} new promise
		 */
		Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {
			var parent = this._handler;
			var state = parent.join().state();

			if ((typeof onFulfilled !== 'function' && state > 0) ||
				(typeof onRejected !== 'function' && state < 0)) {
				// Short circuit: value will not change, simply share handler
				return new this.constructor(Handler, parent);
			}

			var p = this._beget();
			var child = p._handler;

			parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);

			return p;
		};

		/**
		 * If this promise cannot be fulfilled due to an error, call onRejected to
		 * handle the error. Shortcut for .then(undefined, onRejected)
		 * @param {function?} onRejected
		 * @return {Promise}
		 */
		Promise.prototype['catch'] = function(onRejected) {
			return this.then(void 0, onRejected);
		};

		/**
		 * Creates a new, pending promise of the same type as this promise
		 * @private
		 * @returns {Promise}
		 */
		Promise.prototype._beget = function() {
			return begetFrom(this._handler, this.constructor);
		};

		function begetFrom(parent, Promise) {
			var child = new Pending(parent.receiver, parent.join().context);
			return new Promise(Handler, child);
		}

		// Array combinators

		Promise.all = all;
		Promise.race = race;
		Promise._traverse = traverse;

		/**
		 * Return a promise that will fulfill when all promises in the
		 * input array have fulfilled, or will reject when one of the
		 * promises rejects.
		 * @param {array} promises array of promises
		 * @returns {Promise} promise for array of fulfillment values
		 */
		function all(promises) {
			return traverseWith(snd, null, promises);
		}

		/**
		 * Array<Promise<X>> -> Promise<Array<f(X)>>
		 * @private
		 * @param {function} f function to apply to each promise's value
		 * @param {Array} promises array of promises
		 * @returns {Promise} promise for transformed values
		 */
		function traverse(f, promises) {
			return traverseWith(tryCatch2, f, promises);
		}

		function traverseWith(tryMap, f, promises) {
			var handler = typeof f === 'function' ? mapAt : settleAt;

			var resolver = new Pending();
			var pending = promises.length >>> 0;
			var results = new Array(pending);

			for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
				x = promises[i];

				if (x === void 0 && !(i in promises)) {
					--pending;
					continue;
				}

				traverseAt(promises, handler, i, x, resolver);
			}

			if(pending === 0) {
				resolver.become(new Fulfilled(results));
			}

			return new Promise(Handler, resolver);

			function mapAt(i, x, resolver) {
				if(!resolver.resolved) {
					traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
				}
			}

			function settleAt(i, x, resolver) {
				results[i] = x;
				if(--pending === 0) {
					resolver.become(new Fulfilled(results));
				}
			}
		}

		function traverseAt(promises, handler, i, x, resolver) {
			if (maybeThenable(x)) {
				var h = getHandlerMaybeThenable(x);
				var s = h.state();

				if (s === 0) {
					h.fold(handler, i, void 0, resolver);
				} else if (s > 0) {
					handler(i, h.value, resolver);
				} else {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
				}
			} else {
				handler(i, x, resolver);
			}
		}

		Promise._visitRemaining = visitRemaining;
		function visitRemaining(promises, start, handler) {
			for(var i=start; i<promises.length; ++i) {
				markAsHandled(getHandler(promises[i]), handler);
			}
		}

		function markAsHandled(h, handler) {
			if(h === handler) {
				return;
			}

			var s = h.state();
			if(s === 0) {
				h.visit(h, void 0, h._unreport);
			} else if(s < 0) {
				h._unreport();
			}
		}

		/**
		 * Fulfill-reject competitive race. Return a promise that will settle
		 * to the same state as the earliest input promise to settle.
		 *
		 * WARNING: The ES6 Promise spec requires that race()ing an empty array
		 * must return a promise that is pending forever.  This implementation
		 * returns a singleton forever-pending promise, the same singleton that is
		 * returned by Promise.never(), thus can be checked with ===
		 *
		 * @param {array} promises array of promises to race
		 * @returns {Promise} if input is non-empty, a promise that will settle
		 * to the same outcome as the earliest input promise to settle. if empty
		 * is empty, returns a promise that will never settle.
		 */
		function race(promises) {
			if(typeof promises !== 'object' || promises === null) {
				return reject(new TypeError('non-iterable passed to race()'));
			}

			// Sigh, race([]) is untestable unless we return *something*
			// that is recognizable without calling .then() on it.
			return promises.length === 0 ? never()
				 : promises.length === 1 ? resolve(promises[0])
				 : runRace(promises);
		}

		function runRace(promises) {
			var resolver = new Pending();
			var i, x, h;
			for(i=0; i<promises.length; ++i) {
				x = promises[i];
				if (x === void 0 && !(i in promises)) {
					continue;
				}

				h = getHandler(x);
				if(h.state() !== 0) {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
					break;
				} else {
					h.visit(resolver, resolver.resolve, resolver.reject);
				}
			}
			return new Promise(Handler, resolver);
		}

		// Promise internals
		// Below this, everything is @private

		/**
		 * Get an appropriate handler for x, without checking for cycles
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandler(x) {
			if(isPromise(x)) {
				return x._handler.join();
			}
			return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
		}

		/**
		 * Get a handler for thenable x.
		 * NOTE: You must only call this if maybeThenable(x) == true
		 * @param {object|function|Promise} x
		 * @returns {object} handler
		 */
		function getHandlerMaybeThenable(x) {
			return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
		}

		/**
		 * Get a handler for potentially untrusted thenable x
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandlerUntrusted(x) {
			try {
				var untrustedThen = x.then;
				return typeof untrustedThen === 'function'
					? new Thenable(untrustedThen, x)
					: new Fulfilled(x);
			} catch(e) {
				return new Rejected(e);
			}
		}

		/**
		 * Handler for a promise that is pending forever
		 * @constructor
		 */
		function Handler() {}

		Handler.prototype.when
			= Handler.prototype.become
			= Handler.prototype.notify // deprecated
			= Handler.prototype.fail
			= Handler.prototype._unreport
			= Handler.prototype._report
			= noop;

		Handler.prototype._state = 0;

		Handler.prototype.state = function() {
			return this._state;
		};

		/**
		 * Recursively collapse handler chain to find the handler
		 * nearest to the fully resolved value.
		 * @returns {object} handler nearest the fully resolved value
		 */
		Handler.prototype.join = function() {
			var h = this;
			while(h.handler !== void 0) {
				h = h.handler;
			}
			return h;
		};

		Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {
			this.when({
				resolver: to,
				receiver: receiver,
				fulfilled: fulfilled,
				rejected: rejected,
				progress: progress
			});
		};

		Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {
			this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
		};

		Handler.prototype.fold = function(f, z, c, to) {
			this.when(new Fold(f, z, c, to));
		};

		/**
		 * Handler that invokes fail() on any handler it becomes
		 * @constructor
		 */
		function FailIfRejected() {}

		inherit(Handler, FailIfRejected);

		FailIfRejected.prototype.become = function(h) {
			h.fail();
		};

		var failIfRejected = new FailIfRejected();

		/**
		 * Handler that manages a queue of consumers waiting on a pending promise
		 * @constructor
		 */
		function Pending(receiver, inheritedContext) {
			Promise.createContext(this, inheritedContext);

			this.consumers = void 0;
			this.receiver = receiver;
			this.handler = void 0;
			this.resolved = false;
		}

		inherit(Handler, Pending);

		Pending.prototype._state = 0;

		Pending.prototype.resolve = function(x) {
			this.become(getHandler(x));
		};

		Pending.prototype.reject = function(x) {
			if(this.resolved) {
				return;
			}

			this.become(new Rejected(x));
		};

		Pending.prototype.join = function() {
			if (!this.resolved) {
				return this;
			}

			var h = this;

			while (h.handler !== void 0) {
				h = h.handler;
				if (h === this) {
					return this.handler = cycle();
				}
			}

			return h;
		};

		Pending.prototype.run = function() {
			var q = this.consumers;
			var handler = this.handler;
			this.handler = this.handler.join();
			this.consumers = void 0;

			for (var i = 0; i < q.length; ++i) {
				handler.when(q[i]);
			}
		};

		Pending.prototype.become = function(handler) {
			if(this.resolved) {
				return;
			}

			this.resolved = true;
			this.handler = handler;
			if(this.consumers !== void 0) {
				tasks.enqueue(this);
			}

			if(this.context !== void 0) {
				handler._report(this.context);
			}
		};

		Pending.prototype.when = function(continuation) {
			if(this.resolved) {
				tasks.enqueue(new ContinuationTask(continuation, this.handler));
			} else {
				if(this.consumers === void 0) {
					this.consumers = [continuation];
				} else {
					this.consumers.push(continuation);
				}
			}
		};

		/**
		 * @deprecated
		 */
		Pending.prototype.notify = function(x) {
			if(!this.resolved) {
				tasks.enqueue(new ProgressTask(x, this));
			}
		};

		Pending.prototype.fail = function(context) {
			var c = typeof context === 'undefined' ? this.context : context;
			this.resolved && this.handler.join().fail(c);
		};

		Pending.prototype._report = function(context) {
			this.resolved && this.handler.join()._report(context);
		};

		Pending.prototype._unreport = function() {
			this.resolved && this.handler.join()._unreport();
		};

		/**
		 * Wrap another handler and force it into a future stack
		 * @param {object} handler
		 * @constructor
		 */
		function Async(handler) {
			this.handler = handler;
		}

		inherit(Handler, Async);

		Async.prototype.when = function(continuation) {
			tasks.enqueue(new ContinuationTask(continuation, this));
		};

		Async.prototype._report = function(context) {
			this.join()._report(context);
		};

		Async.prototype._unreport = function() {
			this.join()._unreport();
		};

		/**
		 * Handler that wraps an untrusted thenable and assimilates it in a future stack
		 * @param {function} then
		 * @param {{then: function}} thenable
		 * @constructor
		 */
		function Thenable(then, thenable) {
			Pending.call(this);
			tasks.enqueue(new AssimilateTask(then, thenable, this));
		}

		inherit(Pending, Thenable);

		/**
		 * Handler for a fulfilled promise
		 * @param {*} x fulfillment value
		 * @constructor
		 */
		function Fulfilled(x) {
			Promise.createContext(this);
			this.value = x;
		}

		inherit(Handler, Fulfilled);

		Fulfilled.prototype._state = 1;

		Fulfilled.prototype.fold = function(f, z, c, to) {
			runContinuation3(f, z, this, c, to);
		};

		Fulfilled.prototype.when = function(cont) {
			runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
		};

		var errorId = 0;

		/**
		 * Handler for a rejected promise
		 * @param {*} x rejection reason
		 * @constructor
		 */
		function Rejected(x) {
			Promise.createContext(this);

			this.id = ++errorId;
			this.value = x;
			this.handled = false;
			this.reported = false;

			this._report();
		}

		inherit(Handler, Rejected);

		Rejected.prototype._state = -1;

		Rejected.prototype.fold = function(f, z, c, to) {
			to.become(this);
		};

		Rejected.prototype.when = function(cont) {
			if(typeof cont.rejected === 'function') {
				this._unreport();
			}
			runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
		};

		Rejected.prototype._report = function(context) {
			tasks.afterQueue(new ReportTask(this, context));
		};

		Rejected.prototype._unreport = function() {
			if(this.handled) {
				return;
			}
			this.handled = true;
			tasks.afterQueue(new UnreportTask(this));
		};

		Rejected.prototype.fail = function(context) {
			this.reported = true;
			emitRejection('unhandledRejection', this);
			Promise.onFatalRejection(this, context === void 0 ? this.context : context);
		};

		function ReportTask(rejection, context) {
			this.rejection = rejection;
			this.context = context;
		}

		ReportTask.prototype.run = function() {
			if(!this.rejection.handled && !this.rejection.reported) {
				this.rejection.reported = true;
				emitRejection('unhandledRejection', this.rejection) ||
					Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
			}
		};

		function UnreportTask(rejection) {
			this.rejection = rejection;
		}

		UnreportTask.prototype.run = function() {
			if(this.rejection.reported) {
				emitRejection('rejectionHandled', this.rejection) ||
					Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
			}
		};

		// Unhandled rejection hooks
		// By default, everything is a noop

		Promise.createContext
			= Promise.enterContext
			= Promise.exitContext
			= Promise.onPotentiallyUnhandledRejection
			= Promise.onPotentiallyUnhandledRejectionHandled
			= Promise.onFatalRejection
			= noop;

		// Errors and singletons

		var foreverPendingHandler = new Handler();
		var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);

		function cycle() {
			return new Rejected(new TypeError('Promise cycle'));
		}

		// Task runners

		/**
		 * Run a single consumer
		 * @constructor
		 */
		function ContinuationTask(continuation, handler) {
			this.continuation = continuation;
			this.handler = handler;
		}

		ContinuationTask.prototype.run = function() {
			this.handler.join().when(this.continuation);
		};

		/**
		 * Run a queue of progress handlers
		 * @constructor
		 */
		function ProgressTask(value, handler) {
			this.handler = handler;
			this.value = value;
		}

		ProgressTask.prototype.run = function() {
			var q = this.handler.consumers;
			if(q === void 0) {
				return;
			}

			for (var c, i = 0; i < q.length; ++i) {
				c = q[i];
				runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
			}
		};

		/**
		 * Assimilate a thenable, sending it's value to resolver
		 * @param {function} then
		 * @param {object|function} thenable
		 * @param {object} resolver
		 * @constructor
		 */
		function AssimilateTask(then, thenable, resolver) {
			this._then = then;
			this.thenable = thenable;
			this.resolver = resolver;
		}

		AssimilateTask.prototype.run = function() {
			var h = this.resolver;
			tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);

			function _resolve(x) { h.resolve(x); }
			function _reject(x)  { h.reject(x); }
			function _notify(x)  { h.notify(x); }
		};

		function tryAssimilate(then, thenable, resolve, reject, notify) {
			try {
				then.call(thenable, resolve, reject, notify);
			} catch (e) {
				reject(e);
			}
		}

		/**
		 * Fold a handler value with z
		 * @constructor
		 */
		function Fold(f, z, c, to) {
			this.f = f; this.z = z; this.c = c; this.to = to;
			this.resolver = failIfRejected;
			this.receiver = this;
		}

		Fold.prototype.fulfilled = function(x) {
			this.f.call(this.c, this.z, x, this.to);
		};

		Fold.prototype.rejected = function(x) {
			this.to.reject(x);
		};

		Fold.prototype.progress = function(x) {
			this.to.notify(x);
		};

		// Other helpers

		/**
		 * @param {*} x
		 * @returns {boolean} true iff x is a trusted Promise
		 */
		function isPromise(x) {
			return x instanceof Promise;
		}

		/**
		 * Test just enough to rule out primitives, in order to take faster
		 * paths in some code
		 * @param {*} x
		 * @returns {boolean} false iff x is guaranteed *not* to be a thenable
		 */
		function maybeThenable(x) {
			return (typeof x === 'object' || typeof x === 'function') && x !== null;
		}

		function runContinuation1(f, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject(f, h.value, receiver, next);
			Promise.exitContext();
		}

		function runContinuation3(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject3(f, x, h.value, receiver, next);
			Promise.exitContext();
		}

		/**
		 * @deprecated
		 */
		function runNotify(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.notify(x);
			}

			Promise.enterContext(h);
			tryCatchReturn(f, x, receiver, next);
			Promise.exitContext();
		}

		function tryCatch2(f, a, b) {
			try {
				return f(a, b);
			} catch(e) {
				return reject(e);
			}
		}

		/**
		 * Return f.call(thisArg, x), or if it throws return a rejected promise for
		 * the thrown exception
		 */
		function tryCatchReject(f, x, thisArg, next) {
			try {
				next.become(getHandler(f.call(thisArg, x)));
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * Same as above, but includes the extra argument parameter.
		 */
		function tryCatchReject3(f, x, y, thisArg, next) {
			try {
				f.call(thisArg, x, y, next);
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * @deprecated
		 * Return f.call(thisArg, x), or if it throws, *return* the exception
		 */
		function tryCatchReturn(f, x, thisArg, next) {
			try {
				next.notify(f.call(thisArg, x));
			} catch(e) {
				next.notify(e);
			}
		}

		function inherit(Parent, Child) {
			Child.prototype = objectCreate(Parent.prototype);
			Child.prototype.constructor = Child;
		}

		function snd(x, y) {
			return y;
		}

		function noop() {}

		function initEmitRejection() {
			/*global process, self, CustomEvent*/
			if(typeof process !== 'undefined' && process !== null
				&& typeof process.emit === 'function') {
				// Returning falsy here means to call the default
				// onPotentiallyUnhandledRejection API.  This is safe even in
				// browserify since process.emit always returns falsy in browserify:
				// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46
				return function(type, rejection) {
					return type === 'unhandledRejection'
						? process.emit(type, rejection.value, rejection)
						: process.emit(type, rejection);
				};
			} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {
				return (function(noop, self, CustomEvent) {
					var hasCustomEvent = false;
					try {
						var ev = new CustomEvent('unhandledRejection');
						hasCustomEvent = ev instanceof CustomEvent;
					} catch (e) {}

					return !hasCustomEvent ? noop : function(type, rejection) {
						var ev = new CustomEvent(type, {
							detail: {
								reason: rejection.value,
								key: rejection
							},
							bubbles: false,
							cancelable: true
						});

						return !self.dispatchEvent(ev);
					};
				}(noop, self, CustomEvent));
			}

			return noop;
		}

		return Promise;
	};
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

}).call(this,require('_process'))
},{"_process":196}],295:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return {
		pending: toPendingState,
		fulfilled: toFulfilledState,
		rejected: toRejectedState,
		inspect: inspect
	};

	function toPendingState() {
		return { state: 'pending' };
	}

	function toRejectedState(e) {
		return { state: 'rejected', reason: e };
	}

	function toFulfilledState(x) {
		return { state: 'fulfilled', value: x };
	}

	function inspect(handler) {
		var state = handler.state();
		return state === 0 ? toPendingState()
			 : state > 0   ? toFulfilledState(handler.value)
			               : toRejectedState(handler.value);
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],296:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */

/**
 * Promises/A+ and when() implementation
 * when is part of the cujoJS family of libraries (http://cujojs.com/)
 * @author Brian Cavalier
 * @author John Hann
 */
(function(define) { 'use strict';
define(function (require) {

	var timed = require('./lib/decorators/timed');
	var array = require('./lib/decorators/array');
	var flow = require('./lib/decorators/flow');
	var fold = require('./lib/decorators/fold');
	var inspect = require('./lib/decorators/inspect');
	var generate = require('./lib/decorators/iterate');
	var progress = require('./lib/decorators/progress');
	var withThis = require('./lib/decorators/with');
	var unhandledRejection = require('./lib/decorators/unhandledRejection');
	var TimeoutError = require('./lib/TimeoutError');

	var Promise = [array, flow, fold, generate, progress,
		inspect, withThis, timed, unhandledRejection]
		.reduce(function(Promise, feature) {
			return feature(Promise);
		}, require('./lib/Promise'));

	var apply = require('./lib/apply')(Promise);

	// Public API

	when.promise     = promise;              // Create a pending promise
	when.resolve     = Promise.resolve;      // Create a resolved promise
	when.reject      = Promise.reject;       // Create a rejected promise

	when.lift        = lift;                 // lift a function to return promises
	when['try']      = attempt;              // call a function and return a promise
	when.attempt     = attempt;              // alias for when.try

	when.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises
	when.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises

	when.join        = join;                 // Join 2 or more promises

	when.all         = all;                  // Resolve a list of promises
	when.settle      = settle;               // Settle a list of promises

	when.any         = lift(Promise.any);    // One-winner race
	when.some        = lift(Promise.some);   // Multi-winner race
	when.race        = lift(Promise.race);   // First-to-settle race

	when.map         = map;                  // Array.map() for promises
	when.filter      = filter;               // Array.filter() for promises
	when.reduce      = lift(Promise.reduce);       // Array.reduce() for promises
	when.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises

	when.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable

	when.Promise     = Promise;              // Promise constructor
	when.defer       = defer;                // Create a {promise, resolve, reject} tuple

	// Error types

	when.TimeoutError = TimeoutError;

	/**
	 * Get a trusted promise for x, or by transforming x with onFulfilled
	 *
	 * @param {*} x
	 * @param {function?} onFulfilled callback to be called when x is
	 *   successfully fulfilled.  If promiseOrValue is an immediate value, callback
	 *   will be invoked immediately.
	 * @param {function?} onRejected callback to be called when x is
	 *   rejected.
	 * @param {function?} onProgress callback to be called when progress updates
	 *   are issued for x. @deprecated
	 * @returns {Promise} a new promise that will fulfill with the return
	 *   value of callback or errback or the completion value of promiseOrValue if
	 *   callback and/or errback is not supplied.
	 */
	function when(x, onFulfilled, onRejected, onProgress) {
		var p = Promise.resolve(x);
		if (arguments.length < 2) {
			return p;
		}

		return p.then(onFulfilled, onRejected, onProgress);
	}

	/**
	 * Creates a new promise whose fate is determined by resolver.
	 * @param {function} resolver function(resolve, reject, notify)
	 * @returns {Promise} promise whose fate is determine by resolver
	 */
	function promise(resolver) {
		return new Promise(resolver);
	}

	/**
	 * Lift the supplied function, creating a version of f that returns
	 * promises, and accepts promises as arguments.
	 * @param {function} f
	 * @returns {Function} version of f that returns promises
	 */
	function lift(f) {
		return function() {
			for(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {
				a[i] = arguments[i];
			}
			return apply(f, this, a);
		};
	}

	/**
	 * Call f in a future turn, with the supplied args, and return a promise
	 * for the result.
	 * @param {function} f
	 * @returns {Promise}
	 */
	function attempt(f /*, args... */) {
		/*jshint validthis:true */
		for(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {
			a[i] = arguments[i+1];
		}
		return apply(f, this, a);
	}

	/**
	 * Creates a {promise, resolver} pair, either or both of which
	 * may be given out safely to consumers.
	 * @return {{promise: Promise, resolve: function, reject: function, notify: function}}
	 */
	function defer() {
		return new Deferred();
	}

	function Deferred() {
		var p = Promise._defer();

		function resolve(x) { p._handler.resolve(x); }
		function reject(x) { p._handler.reject(x); }
		function notify(x) { p._handler.notify(x); }

		this.promise = p;
		this.resolve = resolve;
		this.reject = reject;
		this.notify = notify;
		this.resolver = { resolve: resolve, reject: reject, notify: notify };
	}

	/**
	 * Determines if x is promise-like, i.e. a thenable object
	 * NOTE: Will return true for *any thenable object*, and isn't truly
	 * safe, since it may attempt to access the `then` property of x (i.e.
	 *  clever/malicious getters may do weird things)
	 * @param {*} x anything
	 * @returns {boolean} true if x is promise-like
	 */
	function isPromiseLike(x) {
		return x && typeof x.then === 'function';
	}

	/**
	 * Return a promise that will resolve only once all the supplied arguments
	 * have resolved. The resolution value of the returned promise will be an array
	 * containing the resolution values of each of the arguments.
	 * @param {...*} arguments may be a mix of promises and values
	 * @returns {Promise}
	 */
	function join(/* ...promises */) {
		return Promise.all(arguments);
	}

	/**
	 * Return a promise that will fulfill once all input promises have
	 * fulfilled, or reject when any one input promise rejects.
	 * @param {array|Promise} promises array (or promise for an array) of promises
	 * @returns {Promise}
	 */
	function all(promises) {
		return when(promises, Promise.all);
	}

	/**
	 * Return a promise that will always fulfill with an array containing
	 * the outcome states of all input promises.  The returned promise
	 * will only reject if `promises` itself is a rejected promise.
	 * @param {array|Promise} promises array (or promise for an array) of promises
	 * @returns {Promise} promise for array of settled state descriptors
	 */
	function settle(promises) {
		return when(promises, Promise.settle);
	}

	/**
	 * Promise-aware array map function, similar to `Array.prototype.map()`,
	 * but input array may contain promises or values.
	 * @param {Array|Promise} promises array of anything, may contain promises and values
	 * @param {function(x:*, index:Number):*} mapFunc map function which may
	 *  return a promise or value
	 * @returns {Promise} promise that will fulfill with an array of mapped values
	 *  or reject if any input promise rejects.
	 */
	function map(promises, mapFunc) {
		return when(promises, function(promises) {
			return Promise.map(promises, mapFunc);
		});
	}

	/**
	 * Filter the provided array of promises using the provided predicate.  Input may
	 * contain promises and values
	 * @param {Array|Promise} promises array of promises and values
	 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
	 *  Must return truthy (or promise for truthy) for items to retain.
	 * @returns {Promise} promise that will fulfill with an array containing all items
	 *  for which predicate returned truthy.
	 */
	function filter(promises, predicate) {
		return when(promises, function(promises) {
			return Promise.filter(promises, predicate);
		});
	}

	return when;
});
})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });

},{"./lib/Promise":279,"./lib/TimeoutError":281,"./lib/apply":282,"./lib/decorators/array":283,"./lib/decorators/flow":284,"./lib/decorators/fold":285,"./lib/decorators/inspect":286,"./lib/decorators/iterate":287,"./lib/decorators/progress":288,"./lib/decorators/timed":289,"./lib/decorators/unhandledRejection":290,"./lib/decorators/with":291}],"app":[function(require,module,exports){
'use strict';
var hermes = require('hermes'),
    DateFormat = require('date-format'),
    nymphError = require('error');

/**
 * # 应用程序框架（模块名：app）
 * @class nymph.app
 * @singleton
 */
var app = {
  // 插件ID。
  PLUGINID: '20e1b6eb8c9aadd6e657eda4fafaaada',

  instanceId: hermes.NULL,

  info: {},

  /**
   * @method start
   * 启动系统，做一些初始化。
   *
   *     // 不需要参数的初始化。
   *     var app = require('nymph-app');
   *     app.start(function (err) {
   *       if (err) {
   *         // 初始化失败的处理。
   *         console.warn(err.code + ' ' + err.message);
   *       }
   *     });
   *
   *     // 需要参数的初始化。
   *     // app.start({businessId : '123456'}, function (err) {
   *     //  if (err) {
   *     //    // 初始化失败的处理。
   *     //    console.warn(err.code + ' ' + err.message);
   *     //  }
   *     // });
   *
   * @param {Object} param (Optional) 初始化相关参数（可选）。
   * @param {String} param.businessId 商用 ID 号。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   * @param {String} callback.err.code 错误码
   * @param {String} callback.err.message 错误消息。
   * @param {Object} callback.result 启动结果。
   * @param {Boolean} callback.result.isEmvInitialized EMV 是否已初始化。
   * @member nymph.app
   */
  start: function (param, callback) {
    var self = this;
    // 调整参数。
    if (typeof param === 'function') {
      callback = param;
      param = {};
    }
    hermes.exec(self.PLUGINID, self.instanceId, 'start', [param], function (err, result) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        callback.call(self, null, result);
      }
    });
  },

  /**
   * @method stop
   * 停止系统。
   *
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   * @member nymph.app
   */
  stop: function (callback) {
    var self = this;
    hermes.exec(self.PLUGINID, self.instanceId, 'stop', function (err) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        callback.call(self, null);
      }
    });
  },

    /**
     * @method getProcessInfo
     * 获取进程信息
     *
     * @return {Object} 进程相关信息。
     * @return {Number} return.totalStorage 总存储空间，单位 byte
     * @return {Number} return.freeStorage 可用存储空间，单位 byte
     * @return {Number} return.appTotalSize 当前应用总大小，单位 byte
     * @return {Number} return.cacheSize 当前应用cache大小，单位 byte
     * @return {Number} return.dataSize 当前应用data大小，单位 byte
     * @return {Number} return.codeSize 当前应用code大小，单位 byte
     * @return {Number} return.totalMemory 总内存，单位 byte
     * @return {Number} return.freeMemory  可用内存，单位 byte
     * @return {Number} return.currentMemory  当前应用占用内存，单位 byte
     * @throws {nymph.error.NymphError} 如果获取终端信息有错误发生，将会抛出异常。
     * @member nymph.app
     */
    getProcessInfo: function () {
        var key, self = this, result, errorCode, info;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'getProcessInfo');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to get process information.', innerCode: result.innerCode};
        }
        info = result.data;
        return info;
    },

    /**
   * @method getTerminalInfo
   * 获取终端相关信息。
   *
   *     var app = require('nymph-app');
   *     try {
   *       var terminalInfo = app.getTerminalInfo();
   *     } catch (err) {
   *       // 获取信息失败的处理。
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @return {Object} 终端相关信息。
   * @return {String} return.vendor 厂商名称。
   * @return {String} return.model 机具型号。
   * @return {String} return.osVersion 系统版本号。
   * @return {String} return.sn 序列号。
   * @return {String} return.sdkVersion SDK 版本号。
   * @throws {nymph.error.NymphError} 如果获取终端信息有错误发生，将会抛出异常。
   * @member nymph.app
   */
  getTerminalInfo: function () {
    var key, self = this, result, errorCode, info;
    result = hermes.exec(self.PLUGINID, self.instanceId, 'getTerminalInfo');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: 'Failed to get terminal information.', innerCode: result.innerCode};
    }
    info = result.data;
    return info;
  },

  /**
   * @method setDateTime
   * 设置系统当前日期和时间。
   *
   *     var app = require('nymph-app');
   *     try {
   *       var date = new Date("2014-03-12 12:12:12");
   *       app.setDateTime(date);
   *     } catch (err) {
   *       // 设置日期和时间失败的处理。
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @param {String/Date} date 要设置的日期和时间。可传入一个 Date 类型的对象，也可传入格式为 'YYYYMMDDHHMMSS' 的字符串。
   * @throws {nymph.error.NymphError} 如果设置系统当前时间和日期有错误发生，将会抛出异常。
   * @member nymph.app
   */
  setDateTime: function (date) {
    var dateString, result, errorCode, dateFormat;
    if (typeof date === 'string') {
      dateString = date;
    } else {
      try {
        dateFormat = new DateFormat();
        dateString = dateFormat.format(date, dateFormat.DEFAULT_DATETIME_FORMAT2);
      } catch (err) {
        throw {code: nymphError.PARAM_ERR, message: 'The parameter date should be an instance of Date or a string of YYYYMMDDHHMMSS format.'};
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'setDateTime', [dateString]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: 'Failed to set system date time.', innerCode: result.innerCode};
    }
  },

  /**
   * @method showKeyBoard
   * 显示\隐藏系统软键盘。
   * @param {Boolean} isShow 是否显示系统软键盘，true 显示，false 隐藏。
   * @member nymph.app
   */
  showKeyBoard: function (isShow) {
    var result, errorCode;
    result = hermes.exec(this.PLUGINID, this.instanceId, 'showKeyBoard', [isShow]);
    errorCode = this.getError(result.innerCode);
    console.log('设置系统软键盘结果：' + JSON.stringify(result));
    if (errorCode !== nymphError.SUCCESS) {
      var errMsg = 'soft keyboard.';
      throw {code: errorCode, message: isShow ? 'Display' + errMsg : 'Hide' + errMsg, innerCode: result.innerCode};
    }
  },

  /**
   * @ignore
   * @method getVersion
   * 获取系统版本号。
   * @member nymph.app
   */
  getVersion: function () {

  },

    /**
     * @method gotoAndroidAPNUI
     * 跳转到安卓原生的APN设置界面。
     * @member nymph.app
     */
    gotoAndroidAPNUI: function () {
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'gotoAndroidAPNUI');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to gotoAndroidAPNUI.', innerCode: result.innerCode};
        }
    },


    /**
     * @method rebootSystem
     * 重启安卓系统。
     * @member nymph.app
     */
    rebootSystem: function () {
        var self = this, result, errorCode;
        result = hermes.exec(self.PLUGINID, self.instanceId, 'rebootSystem');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to rebootSystem.', innerCode: result.innerCode};
        }
    },

    /**
     * @method Call Transaction Result
     * @param {Object} params
     * @param {String} params.transId
     * @param {String} params.resultCode
     * @param {Object} params.transData
     * @param {Object} params.transData
     * @param {Object} params.transData.resCode
     * @param {Object} params.transData.resDesc
     * @param {Object} params.transData.merchantName
     * @param {Object} params.transData.merchantNo
     * @param {Object} params.transData.terminalNo
     * @param {Object} params.transData.operNo
     * @param {Object} params.transData.amt
     * @param {Object} params.transData.batchNo
     * @param {Object} params.transData.traceNo
     * @param {Object} params.transData.refNo
     * @param {Object} params.transData.authNo
     * @param {Object} params.transData.expDate
     * @param {Object} params.transData.cardNo
     * @param {Object} params.transData.cardIssuerCode
     * @param {Object} params.transData.cardAcquirerCode
     * @param {Object} params.transData.cardInputType
     * @param {Object} params.transData.transChnName
     * @param {Object} params.transData.transEngName
     * @param {Object} params.transData.date
     * @param {Object} params.transData.time
     * @param {Object} params.transData.memInfo
     * @param {Object} params.transData.isReprint
     * @param {Object} params.transData.vendor
     * @param {Object} params.transData.cardOrg
     * @param {Object} params.transData.serviceNo
     * @param {Object} params.transData.model
     * @param {Object} params.transData.version
     * @param {Object} params.transData.qrCode
     * @param {Object} params.transData.eSignJpeg
     * @param {Object} params.transData.ARQC
     * @param {Object} params.transData.UnprNo
     * @param {Object} params.transData.ATC
     * @param {Object} params.transData.TVR
     * @param {Object} params.transData.TSI
     * @param {Object} params.transData.AID
     * @param {Object} params.transData.AIP
     * @param {Object} params.transData.APPLAB
     * @param {Object} params.transData.APPNAME
     * @param {Object} params.transData.CVM
     * @param {Object} params.transData.TermCap
     * @param {Object} params.transData.IAD
     * @param {Object} params.transData.CSN
     * @member nymph.app
     */
    callTransResult: function (params) {
        var self = this, result, errorCode;

        if(!params) {
            throw {code: 139, message: this.getError(139)};
        }

        if (Number(params.resultCode) === 0 && !params.transData) {
            throw {code: 139, message: this.getError(139)};
        }

        result = hermes.exec(self.PLUGINID, self.instanceId, 'callTransResult', [params]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to callTransResult.', innerCode: result.innerCode};
        }
    },

  /**
   * @method exit
   * 退出应用。
   * 注：在退出应用之前，请先调用 {@link nymph.app#stop stop} 停止底层服务。
   * @member nymph.app
   */
  exit: function () {
    var self = this, result, errorCode;
    result = hermes.exec(self.PLUGINID, self.instanceId, 'exit');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: 'Failed to exit app.', innerCode: result.innerCode};
    }
  },

    listDevices: function(callback) {
        var self = this, errorCode;
        console.nativeLog('lins APP:进入listDevices');
/*        result = hermes.exec(self.PLUGINID, self.instanceId, 'listDevices');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to listDevices.', innerCode: result.innerCode};
        }
  */
        hermes.exec(self.PLUGINID, this.instanceId, 'listDevices', [], function (err,datas) {
            var data;
            console.nativeLog('lins: datas = ' + JSON.stringify(datas));
            if (err) {
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {

   //             for (var i in datas) {
   //                 console.nativeLog('lins(' + i + '): data = ' + JSON.stringify(datas[i]));
   //             }

                //     使用slice将类数组的对象转成数组.

              //  var result2 = Array.prototype.slice.call(datas);
               // console.nativeLog('lins: result2 = ' + JSON.stringify(result2));


                for (var i in datas)
                    if (datas[i])
                    {
                        console.nativeLog('lins(' + i + '): data = ' + JSON.stringify(datas[i]) + 'XdevName = ' +
                        datas[i].devName + ' Xstatus = ' + datas[i].status + ' Xdata = ' + datas[i].data);
                    }

                var result = [];
                var max;
                for(var i = 0, max = datas.length; i < max; i++){
                    if (datas[i]){
                        result.push(datas[i]);
                    }
                }for (var i in datas)
                    if (datas[i])
                    {
                        console.nativeLog('lins(' + i + '): data = ' + JSON.stringify(datas[i]) + 'XdevName = ' + datas[i].devName + ' Xstatus = ' + datas[i].status + ' Xdata = ' + datas[i].data);
                    }

                var result = [];
                for(var i=0 ; i<datas.length; i++){
                    if (datas[i]){
                        result.push(datas[i]);
                    }
                }
                console.nativeLog('lins: result = ' + JSON.stringify(result));

                callback.call(self, null);
            }
        })
    },
  getError: function (innerCode) {
    switch (innerCode) {
      default:
        return nymphError.getError(innerCode);
    }
  },

  callTransResultCode: {
    SUCCESS: 0,
    NO_EXIT_TRANS: -1,
    PARAM_ERROR: -2
  },
  callTransResultMsg: {
    SUCCESS: 'Success',
    NO_EXIT_TRANS: 'No Exit Transaction',
    PARAM_ERROR: 'Parameters Error'
  }

};

hermes.addJsPluginInstance(app.PLUGINID, app);
module.exports = app;

},{"date-format":"date-format","error":"error","hermes":"hermes"}],"autotest":[function(require,module,exports){
'use strict';

var hermes = require('hermes');
var nymphError = require('error');

/**
 * # JS测试框架自动测试（模块名：autotest）
 * @class nymph.autotest.autotest
 * @singleton
 */
var autotest = {
    /**
     * 插件名称。
     */
    PLUGINID: '4921f9eff026222accd949943b0e0101',


    /**
     * 输入自动输pin数据
     * @param pinData  输入的pindata数据
     *
     *
     * pinInput("111111");
     */
    pinInput: function (pinData) {
        return  hermes.exec(this.PLUGINID, hermes.NULL, 'pinInput', [pinData]);
    },

    /**
     * 输入自动输磁道数据
     * @param trk1，trk2，trk3 输入的磁道数据
     */
    writeMagCardNum: function (trk1,trk2,trk3) {
        return  hermes.exec(this.PLUGINID, hermes.NULL, 'magcardData', [trk1,trk2,trk3]);
    },

    /**
     * 清空磁道数据
     * @param 清空输入的磁道数据
     */
    setMagcardOff: function () {
        return  hermes.exec(this.PLUGINID, hermes.NULL, 'magcardOFF', []);
    },

    /**
     * 写入的日志到文件中
     * @param msg  日志
     *
     */
    writeLog: function (msg) {
        return  hermes.exec(this.PLUGINID, hermes.NULL, 'writeLog', [msg]);
    },

    /**
     * 写入的日志到文件中
     * @param msg  日志
     *
     */
    clearLog: function () {
        return  hermes.exec(this.PLUGINID, hermes.NULL, 'clearLog', []);
    },

    /**
     * 环境初始化
     */
    initEnv: function () {
        hermes.exec(this.PLUGINID, hermes.NULL, 'initEnv', []);
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @returns {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        console.nativeLog('getError:' + innerCode);
        return nymphError.getError(innerCode);
    }

};

hermes.addJsPluginInstance(autotest.PLUGINID, autotest);

module.exports = autotest;

},{"error":"error","hermes":"hermes"}],"buffer":[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":76,"ieee754":183,"isarray":106}],"card-reader":[function(require,module,exports){
/**
 * #  卡管理类（模块名：card-reader）
 *
 * @class nymph.dev.cardReader
 * @singleton
 * 本模块提供了各种卡的公共操作部分，具体卡的操作请查看各类卡内的定义。
 *
 * 例：
 *     //获取读卡器
 *     var cardReader = require('cardReader');
 *
 */
'use strict';

// 引用模块内部部件。
var CardType = require('./card-type'),
    SlotType = require('./Slot-type'),
    ic = require('./ic/ic-card'),
    magcard = require('./mag/magcard'),
    CpuCard = ic.CpuCard,
    Magcard = magcard.Magcard,
    M1Card = ic.M1Card,
    Sim4442Card = ic.Sim4442Card,

// 引用外部模块。
    nymphError = require('error'),
    Error = require('error').NymphError,
    hermes = require('hermes'),
    emv = require('emv'),
    when = require('when');

var cardReader = {
    /**
     * 单实例对象没有实例 ID
     * @ignore
     */
    instanceId: hermes.NULL,

    PLUGINID: '000334baf882b1e1a2f33f17cdc5ab87',

    /**
     * isReading 是否已启动获取卡片。
     * @type {Boolean}
     * @ignore
     */
    isAcquiring: false,

    /**
     * @method stopAcquireCard
     * 停止获取卡片。
     *
     * **若此前有调用了 {@link nymph.dev.cardReader#waitForCard waitForCard}，且 {@link nymph.dev.cardReader#waitForCard waitForCard} 的回调函数还未执行，此时调用 {@link nymph.dev.cardReader#stopAcquireCard stopAcquireCard}方法将触发 {@link nymph.dev.cardReader#waitForCard waitForCard} 还未执行的回调函数，并产生“CANCELLED”的通知。**
     *
     *     try {
     *       cardReader.stopAcquireCard();
     *     } catch (err) {
     *       // 停止获取卡片失败的处理。
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader
     */
    stopAcquireCard: function () {
        // 停止获取卡片操作。
        var result, errorCode;

        if (!this.isAcquiring) {
            // 如果当前并没有在请求获取卡片，则无需让底层停止获取卡片。
            return;
        }

        result = hermes.exec(this.PLUGINID, this.instanceId, 'stopAcquireCard');
        errorCode = this.getError(result.innerCode, null);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to stop acquiring card.', innerCode: result.innerCode};
        }
        this.isAcquiring = false;
    },

    /**
     * @method waitForCard
     * 获取需要等待用户刷卡/挥卡/插卡的卡片。
     * 调用此接口后，进入等待用户刷卡/挥卡/插卡的状态：
     * - 如果调用此接口之前有启动 EMV 流程，则在获取到支持 EMV 的卡的时候自动继续 EMV 流程处理，直到 EMV 处理完相关操作后回调。
     * - 如果在调用此接口之前没有启动 EMV 流程，一旦用户进行了刷卡/挥卡/插卡的动作，就返回一个该操作获取到的卡实例。
     *
     * **一般情况下，只要指定要获取的卡片类型和卡槽类型，各类卡使用默认参数即可。**
     *
     *     var cardReader = require('card-reader');
     *     var nymphError = reuqire('error'); // 一些通用的返回码
     *     cardReader.waitForCard([{type: cardReader.CardType.MAGCARD, slot: cardReader.SlotType.SWIPE}, {type: cardReader.CardType.CPUCARD, slot: cardReader.SlotType.ICC1}], function (err, card) {
     *       if (err) {
     *         // 获取卡片失败的处理。
     *         switch (err.code) {
     *         case cardReader.NO_CARD:
     *             // 没有获取到卡片的处理。
     *             break;
     *         case cardReader.TYPE_ERR:
     *             // 卡片类型错误的处理。当未匹配到用户传入的卡片类型的卡时，会出现此错误。
     *             break;
     *         case nymphError.ERROR:
     *             // 获取卡片时出错的处理，如卡片上电失败等。
     *             break;
     *         case nymphError.CANCELLED:
     *             // 取消获取卡片的处理。
     *             break;
     *         }
     *       } else {
     *         // 获取卡片成功的处理。
     *         // card：{Object} 当前卡片对象。当不再使用当前卡片了，需要调用 `card.release()` 来释放卡片。
     *         // 如果是通过插卡或者挥卡获取到的卡片对象，还必须调用 {@link nymph.dev.cardReader#waitForCardTaken waitForCardTaken} 来提示并确认用户已取走卡片。
     *       }
     *     });
     *
     * **特殊情况下，接触式 IC 卡需要指定给卡片上电的电压模式和上电模式。**
     *
     *     cardReader.waitForCard([{type: cardReader.CardType.MAGCARD, slot: cardReader.SlotType.SWIPE}, {type: cardReader.CardType.CPUCARD, slot: cardReader.SlotType.ICC1, options: {volMode : cardReader.VolMode.VOL18, powerMode : cardReader.PowerMode.TCRMODE}}], function (err, card) {
     *       if (err) {
     *         // 获取卡片失败的处理。
     *         switch (err.code) {
     *         case cardReader.NO_CARD:
     *             // 没有获取到卡片的处理。
     *             break;
     *         case cardReader.TYPE_ERR:
     *             // 卡片类型错误的处理。当未匹配到用户传入的卡片类型的卡时，会出现此错误。
     *             break;
     *         case nymphError.ERROR:
     *             // 获取卡片时出错的处理，如卡片上电失败等。
     *             break;
     *         case nymphError.CANCELLED:
     *             // 取消获取卡片的处理。
     *             break;
     *         }
     *       } else {
     *         // 获取卡片成功的处理。
     *         // card：{Object} 当前卡片对象。当不再使用当前卡片了，需要调用 `card.release()` 来释放卡片。
     *         // 如果是通过插卡或者挥卡获取到的卡片对象，还必须调用 `waitForCardTaken` 来提示并确认用户已取走卡片。
     *       }
     *     });
     *
     * @param {Object[]} cards 要获取的卡片配置。此方法将会同时打开要获取的卡槽等待卡片，并返回第一个有卡的卡槽。
     *
     * 每一个卡片配置对象包含以下内容：
     *
     * - type：卡片类型
     * - slot：卡槽类型
     * - options：卡片参数。不同的卡片类型需要传入的卡片参数不同：
     *     - 当 type = {@link nymph.dev.cardReader.CardType#MAGCARD MAGCARD} 时的卡片参数：
     *         - lrcFlag：LRC 开关。值为 true 时采用 LRC 进行校验，false 不采用 LRC 进行校验。
     *         - enableTrack1：是否读取 1 磁道信息。默认为 true（读取磁道一）。
     *         - enableTrack2：是否读取 2 磁道信息。默认为 true（读取磁道二）。
     *         - enableTrack3：是否读取 3 磁道信息。默认为 true（读取磁道三）。
     *     - 当 type = {@link nymph.dev.cardReader.CardType#CPUCARD CPUCARD} ，slot = {@link nymph.dev.cardReader.SlotType#ICC1 ICC1}，{@link nymph.dev.cardReader.SlotType#ICC2 ICC2}，{@link nymph.dev.cardReader.SlotType#ICC3 ICC3} 时的卡片参数：
     *         - volMode：电压模式。取值参见 {@link nymph.dev.cardReader.ic.VolMode VolMode}
     *         - powerMode：电源模式。取值参见 {@link nymph.dev.cardReader.ic.PowerMode PowerMode}
     *
     * @param {Object} [options] 获取各类卡片需要的公共参数（可选）。
     * @param {Number} options.timeout 获取卡片超时时间。以秒（s）为单位。默认为永不超时。
     * @param {Boolean} options.isEmv 是否为 EMV 流程中请求卡片。如果没有启动 emv，但是此参数设置为 true，则会回调参数错误。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.card 当前卡片对象。
     * @member nymph.dev.cardReader
     */
    waitForCard: function (cards, options, callback) {
        var cb, err = new Error(), self = this, isParamErr = false;
        if (!cards && !options && !callback) {
            // 用户一个参数都没有传进来，此时无法回调错误出去，只能抛异常
            err.code = nymphError.PARAM_ERR;
            err.message = 'Please specify cards and callback at least.';
            throw err;
        }

        if (typeof cards !== 'function' && typeof options !== 'function' && typeof callback !== 'function') {
            err.code = nymphError.PARAM_ERR;
            err.message = 'Please specify callback.';
            throw err;
        }

        if(cards === null || typeof cards === 'undefined' || cards.constructor !== Array){
            err.code = nymphError.PARAM_ERR;
            err.message = 'Please check the first parameter(cards).Make sure you have passed in an array of cards.';
            if (typeof cards === 'function') {
                callback = cards;
            } else if(typeof  options === 'function') {
                callback = options;
            } else if (typeof  callback === 'function'){
            } else {
                // 第一个参数必须为 cards 数组
                throw err;
            }
            callback.call(self, err);
            return;
        }

        // 调整参数。
        if (typeof options === 'function') {
            // 用户传入的 callback 在第二个参数
            callback = options;
            options = {};
        } else {
            if (typeof callback !== 'function') {
                err.code = nymphError.PARAM_ERR;
                err.message = 'The third parameter should be a function.';
                throw err;
            }

            if (!options.hasOwnProperty('isEmv') && !options.hasOwnProperty('timeout')) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'The second parameter(options) is invalid!';
                callback.call(self, err);
                return;
            }

            if (options.hasOwnProperty('isEmv')) {
                // 如果并没有启动 EMV 流程，则此参数不应该传入 true
                if (options.isEmv && !emv.isStarted) {
                    err.code = nymphError.PARAM_ERR;
                    err.message = 'EMV process did not start, you should not set isEmv true.';
                    callback.call(self, err);
                    return;
                }
            }
        }

        if (self.isAcquiring) {
            err.code = nymphError.DEVICE_USED;
            err.message = 'Already acquiring for card, please stop last request first.';
            callback.call(self, err);
            return;
        }

        cards.forEach(function (card, index) {
            if (!card.hasOwnProperty('type') || !card.hasOwnProperty('slot')) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'Please specify card type and slot.';
                isParamErr = true;
            }

            switch (card.slot) {
                case self.SlotType.SWIPE:
                    if (card.type !== self.CardType.MAGCARD) {
                        err.code = nymphError.PARAM_ERR;
                        err.message = 'Slot ' + card.slot + ' can not read ' + card.type;
                        isParamErr = true;
                        return;
                    }
                    break;
                case self.SlotType.ICC1:
                case self.SlotType.ICC2:
                case self.SlotType.ICC3:
                    if (card.type !== self.CardType.CPUCARD &&
                        card.type !== self.CardType.SLE44X2 &&
                        card.type !== self.CardType.SLE44X8 &&
                        card.type !== self.CardType.AT24CXX &&
                        card.type !== self.CardType.AT88SC102 &&
                        card.type !== self.CardType.AT88SC1604 &&
                        card.type !== self.CardType.AT88SC1608){
                        err.code = nymphError.PARAM_ERR;
                        err.message = 'Slot ' + card.slot + ' can not read ' + card.type;
                        isParamErr = true;
                        return;
                    }
                    break;
                case self.SlotType.PSAM1:
                case self.SlotType.PSAM2:
                case self.SlotType.PSAM3:
                    if (card.type !== self.CardType.CPUCARD) {
                        err.code = nymphError.PARAM_ERR;
                        err.message = 'Slot ' + card.slot + ' can not read ' + card.type;
                        isParamErr = true;
                        return;
                    }
                    break;
                case self.SlotType.RF:
                case self.SlotType.RF_EX:
                    if (card.type !== self.CardType.CPUCARD &&
                        card.type !== self.CardType.M1CARD &&
                        card.type !== self.CardType.ACARD &&
                        card.type !== self.CardType.BCARD){
                        err.code = nymphError.PARAM_ERR;
                        err.message = 'Slot ' + card.slot + ' can not read ' + card.type;
                        isParamErr = true;
                        return;
                    }
                    break;
                default:
                    err.code = nymphError.PARAM_ERR;
                    err.message = 'Not support this kind of slot: ' + card.slot;
                    isParamErr = true;
                    return;
            }

            if(card.hasOwnProperty('options')){
                var cardOptions = card.options;
                if (cardOptions.hasOwnProperty('volMode')){
                    switch (cardOptions.volMode){
                        case self.ic.VolMode.VOL18:
                        case self.ic.VolMode.VOL3:
                        case self.ic.VolMode.VOL5:
                            break;
                        default:
                            err.code = nymphError.PARAM_ERR;
                            err.message = 'Can not support volMode: ' + cardOptions.volMode;
                            isParamErr = true;
                            return;
                    }
                }
                if (cardOptions.hasOwnProperty('powerMode')){
                    switch (cardOptions.powerMode){
                        case self.ic.PowerMode.EMVMODE:
                        case self.ic.PowerMode.MODE384:
                        case self.ic.PowerMode.MODE192:
                        case self.ic.PowerMode.ISOMODE:
                        case self.ic.PowerMode.SHBMODE:
                        case self.ic.PowerMode.MODE576:
                        case self.ic.PowerMode.TCRMODE:
                            break;
                        default:
                            err.code = nymphError.PARAM_ERR;
                            err.message = 'Can not support powerMode: ' + cardOptions.powerMode;
                            isParamErr = true;
                            return;
                    }
                }
            }
        });

        if (isParamErr) {
            callback.call(self, err);
            return;
        }

        // 检测卡片是否在位/寻卡。
        // 接触式 IC 卡初始化。
        // 上电。
        self.isAcquiring = true;

        // card 包含以下内容：
        // card.type：当前卡片类型
        // card.slot：当前卡槽类型
        // card.options：当前卡片参数
        // card.data：不同的卡返回的数据不同：
        // - 磁条卡返回一个 tracks 对象，该对象包含 {track1，track2，track3}，每个磁道数据包含 flag、data（base64字符串）、errMsg
        // - M1 卡返回卡片序列号
        // - 其他卡根据情况返回数据。
        cb = function (err, card) {
            self.isAcquiring = false;
            var asyncCard = null;
            if (!err) {
                // 获取卡片成功，根据卡片类型创建卡片实例。
                switch (card.type) {
                    case CardType.CPUCARD:
                        // 接触式和非接触式 CPU 卡都是 CpuCard 的实例。
                        asyncCard = new CpuCard(card);
                        break;
                    case CardType.MAGCARD:
                        asyncCard = new Magcard(card);
                        break;
                    case CardType.M1CARD:
                        asyncCard = new M1Card(card);
                        break;
                    case CardType.SLE44X2:
                        asyncCard = new Sim4442Card(card);
                        break;
                    default:
                        err = new Error();
                        err.code = self.TYPE_ERR;
                        err.message = 'Not support this kind of card: ' + card.type;
                        break;
                }

                if (asyncCard !== null) {
                    asyncCard.init(function (error) {
                        if (error) {
                            callback.call(self, error ,asyncCard);
                        } else {
                            callback.call(self, null, asyncCard);
                        }
                    });
                }
            } else {
                if (card) {
                    err.code = self.getError(err.innerCode, card.slot);
                } else {
                    err.code = self.getError(err.innerCode, null);
                }
                err.card = card;
                callback.call(self, err);
            }
        };

        // 本机有哪些卡槽是由配置表设置的，底层的轮询操作可以从配置表获取卡槽列表后进行轮询操作的。
        hermes.exec(self.PLUGINID, this.instanceId, 'waitForCard', [cards, options], cb.bind(self));
    },

    /**
     * @method getFixedCards
     * 获取常在位的卡片实例。
     * 此接口与 {@link nymph.dev.cardReader#waitForCard} 的区别在于：此接口无需等待用户刷卡、插卡的动作，调用此接口可即时获得常在位的一个或者多个卡片实例。
     *
     * **一般情况下，只要指定要获取的卡片类型，各类卡使用默认参数即可。**
     *
     *     var cardReader = require('card-reader');
     *     cardReader.getFixedCards([{type: cardReader.CardType.CPUCARD, slot: cardReader.SlotType.PSAM1}, {type: cardReader.CardType.CPUCARD, slot: cardReader.SlotType.PSAM2}], function (err, cards) {
     *         if (err) {
     *             // 错误处理
     *         } else {
     *             // 获取到了各个卡片实例
     *            cards.forEach(function (card,index){
     *              if (!card.hasOwnProperty('acquireErr')) {
     *                 // 说明获取该卡片实例失败，失败信息参见 acquireErr。
     *              } else {
     *                 // 获取该卡片实例成功，可对卡片进行相关操作。
     *                 // 使用完卡片实例后，请调用 `card.release()` 释放卡片。
     *              }
     *            });
     *         }
     *     });
     *
     * **特殊情况下，接触式 IC 卡需要指定给卡片上电的电压模式和上电模式。**
     *
     *     var cardReader = require('card-reader');
     *     cardReader.getFixedCards([{type: cardReader.CardType.CPUCARD, slot: cardReader.SlotType.PSAM1, options: {volMode : cardReader.VolMode.VOL18, powerMode : cardReader.PowerMode.TCRMODE}}, {type: cardReader.CardType.CPUCARD, slot: cardReader.SlotType.PSAM2}], function (err, cards) {
     *         if (err) {
     *             // 错误处理
     *         } else {
     *             // 获取到了各个卡片实例
     *            cards.forEach(function (card,index){
     *              if (!card.hasOwnProperty('acquireErr')) {
     *                 // 说明获取该卡片实例失败，失败信息参见 acquireErr。
     *              } else {
     *                 // 获取该卡片实例成功，可对卡片进行相关操作。
     *                 // 使用完卡片实例后，请调用 `card.release()` 释放卡片。
     *              }
     *            });
     *         }
     *     });
     *
     * @param {Object[]} cards 要获取的卡片配置。此方法对传入的卡片类型按顺序进行轮询，并返回第一个匹配成功的卡对象。
     *
     * 每一个卡片配置对象包含以下内容：
     *
     * - type：卡片类型
     * - slot：卡槽类型
     * - options：卡片参数。不同的卡片类型需要传入的卡片参数不同：
     *     - 当 type = {@link nymph.dev.cardReader.CardType#CPUCARD CPUCARD} ，slot = {@link nymph.dev.cardReader.SlotType} 时的卡片参数：
     *         - volMode：电压模式。取值参见 {@link nymph.dev.cardReader.ic.VolMode VolMode}
     *         - powerMode：电源模式。取值参见 {@link nymph.dev.cardReader.ic.PowerMode PowerMode}
     *
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.cards 获取到的卡片对象。如果某个卡片获取失败，则返回的该卡片对象会有一个 acquireErr 属性。
     * @member nymph.dev.cardReader
     */
    getFixedCards: function (cards, callback) {
        var resultCards = [], self = this, result, errorCode, pList = [], err = new Error();
        if (!cards && !callback) {
            // 用户一个参数都没有传进来，此时无法回调错误出去，只能抛异常
            err.code = nymphError.PARAM_ERR;
            err.message = 'Please pass in cards and callback!';
            throw err;
        }
        if (cards === null || typeof cards === 'undefined' || cards.constructor !== Array || cards.length === 0) {
            err.code = nymphError.PARAM_ERR;
            err.message = 'Please check the first parameter(cards).Make sure you have passed in an array of cards.';
            if (typeof cards === 'function') {
                callback = cards;
            }  else if (typeof  callback === 'function'){
            } else {
                // 第一个参数必须为 cards 数组
                throw err;
            }
            callback.call(self, err);
            return;
        }
        if (typeof callback !== 'function') {
            err.code = nymphError.PARAM_ERR;
            err.message = 'Please make sure you have passed in callback.';
            if (typeof cards === 'function') {
                callback = cards;
            } else {
                throw err;
            }
            callback.call(self, err);
            return;
        }
        for (var i = 0; i < cards.length; i++) {
            var cardInfo = cards[i], card = null;
            if (!cardInfo.hasOwnProperty('type') || !cardInfo.hasOwnProperty('slot')) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'Please specify card type and slot.';
                callback.call(self, err);
                return;
            }

            switch (cardInfo.slot) {
                case SlotType.PSAM1:
                case SlotType.PSAM2:
                case SlotType.PSAM3:
                    if (cardInfo.type !== self.CardType.CPUCARD) {
                        err.code = nymphError.PARAM_ERR;
                        err.message = 'Not support this kind of card:' + cardInfo.type;
                        callback.call(self, err);
                        return;
                    }
                    break;
                default:
                    err.code = nymphError.PARAM_ERR;
                    err.message = 'Not support this kind of slot:' + cardInfo.slot;
                    callback.call(self, err);
                    return;
            }
            if(cardInfo.hasOwnProperty('options')){
                var cardOptions = cardInfo.options;
                if (cardOptions.hasOwnProperty('volMode')){
                    switch (cardOptions.volMode){
                        case self.ic.VolMode.VOL18:
                        case self.ic.VolMode.VOL3:
                        case self.ic.VolMode.VOL5:
                            break;
                        default:
                            err.code = nymphError.PARAM_ERR;
                            err.message = 'Not support this volMode:' + cardOptions.volMode;
                            callback.call(self, err);
                            return;
                    }
                }
                if (cardOptions.hasOwnProperty('powerMode')){
                    switch (cardOptions.powerMode){
                        case self.ic.PowerMode.EMVMODE:
                        case self.ic.PowerMode.MODE384:
                        case self.ic.PowerMode.MODE192:
                        case self.ic.PowerMode.ISOMODE:
                        case self.ic.PowerMode.SHBMODE:
                        case self.ic.PowerMode.MODE576:
                        case self.ic.PowerMode.TCRMODE:
                            break;
                        default:
                            err.code = nymphError.PARAM_ERR;
                            err.message = 'Not support this powerMode:' + cardOptions.powerMode;
                            resultCards.push(cardInfo);
                            callback.call(self, err);
                            return;
                    }
                }
            }
            if (!cardInfo.hasOwnProperty('acquireErr')) {
                // 如果没有 acquireErr，说明是允许获取的卡片
                result = hermes.exec(self.PLUGINID, this.instanceId, 'initSlot', [cardInfo]);
                errorCode = self.getError(result.innerCode, cardInfo);
                if (errorCode !== nymphError.SUCCESS) {
                    cardInfo.acquireErr = {code: errorCode, message: 'Failed to get PSAM card.'};
                    resultCards.push(cardInfo);
                } else {
                    card = new CpuCard(cardInfo);
                    pList.push(self.initCardPromise(card, resultCards));
                }
            }
        }
        if (pList.length > 0) {
            when.all(pList).then(function () {
                callback.call(self, null, resultCards);
            }, function (err) {
                callback.call(self, err);
            });
        } else {
            callback.call(self, null, resultCards);
        }
    },

    /**
     * @ignore
     */
    initCardPromise: function (card, cards) {
        var defered = when.defer();

        card.init(function (err) {
            if (err) {
                card.acquireErr = err;
            }
            cards.push(card);
            defered.resolve();
        });

        return defered.promise;
    },

    /**
     * @method isCardIn
     * 检测 IC 卡 是否还在位。
     *
     *     try {
     *         // icCard 为通过 {@link nymph.dev.cardReader#waitForCard waitForCard} 接口回调返回的 IC 卡实例。
     *         var isCardIn = cardReader.isCardIn(icCard);
     *         if (isCardIn) {
     *             // 当前操作卡在位的处理
     *         } else {
     *             // 当前操作卡不在位的处理
     *         }
     *     } catch (err) {
     *         // 异常处理
     *     }
     *
     * @param {Object} card 需要判断是否还在位的卡实例。
     * @return {Boolean} 卡是否在位
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.cardReader
     */
    isCardIn: function (card) {
        // 检测卡槽中是否有卡。
        var result, errorCode;
        if (!card) {
            throw {code: nymphError.PARAM_ERR, message: 'Please pass in the card you want to check.'};
        }
        if (!card.hasOwnProperty('instanceId')) {
            throw {code: nymphError.PARAM_ERR, message: 'Please perform waiting for card first.'};
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'isCardIn', [card.instanceId, card.type, card.slot]);
        errorCode = this.getError(result.innerCode, card.slot);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Check card existence failed', innerCode: result.innerCode};
        }
        return result.data;
    },

    /**
     * @method waitForCardTaken
     * 等待取卡。
     * 此方法在释放了卡片以后调用，调用此方法后，如果用户已经取走卡了，会立即完成回调。如果用户还未取走卡片，则会一直等待用户取卡，直到用户取走卡片以后回调，以此来确保用户在交易完成以后有取走卡片。
     *
     *     // cpuCard 为通过 {@link nymph.dev.cardReader#waitForCard waitForCard} 接口回调返回的接触式 IC 卡实例。
     *     cardReader.waitForCardTaken(cpuCard, function (err) {
     *         if (err) {
     *             // 等待取卡出错处理
     *         } else {
     *             // 用户已经取走卡片
     *         }
     *     });
     *
     * @param {Object} card 通过 {@link nymph.dev.cardReader#waitForCard waitForCard} 取到的卡片对象。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @member nymph.dev.cardReader
     */
    waitForCardTaken: function (card, callback) {
        var self = this;

        if(typeof callback !== 'function') {
            if (typeof card === 'function') {
                callback = card;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please make sure that callback is the last parameter!'});
                return;
            } else {
                throw {code: nymphError.PARAM_ERR, message: 'Please make sure you have passed in callback!'};
            }
        }

        if(!card || !card.hasOwnProperty('slot')) {
            callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please make sure you have passed in a valid card instance.'});
            return;
        }
        hermes.exec(self.PLUGINID, self.instanceId, 'waitForCardTaken', [card], function (err) {
            if (err) {
                err.code = self.getError(err.innerCode, card.slot);
                callback.call(self, err);
            } else {
                callback.call(self, null);
            }
        });
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @return {String} 返回码对应的字符串
     */
    getError: function (innerCode, slot) {
        // todo 完善 error。
        var self = this;
        switch (innerCode) {
            case -6000: // IC 读卡器基础错误码
                return self.IC_CARDREADER_BASE_ERR;
            case -6999: // IC 读卡器其他错误码
                return self.IC_CARDREADER_OTHER_ERR;
            case -10000: // 卡类基础错误
                return self.CARD_BASE_ERR;
            default:
                var code;
                if (slot === SlotType.SWIPE) {
                    code = Magcard.prototype.getError(innerCode);
                    if (code !== nymphError.UNKNOWN) {
                        return code;
                    }
                } else {
                    code = ic.ErrorCode.getError(innerCode);
                    if (code !== nymphError.UNKNOWN) {
                        return code;
                    }

                    code = CpuCard.prototype.getError(innerCode);
                    if (code !== nymphError.UNKNOWN) {
                        return code;
                    }

                    code = M1Card.prototype.getError(innerCode);
                    if (code !== nymphError.UNKNOWN) {
                        return code;
                    }
                }

                return nymphError.getError(innerCode);
        }
    },
};

/**
 * # 读卡器错误码
 * @class nymph.dev.cardReader.ErrorCode
 */
var ErrorCode = {
    /**
     * @property {String} [IC_CARDREADER_BASE_ERR='IC_CARDREADER_BASE_ERR'] IC 读卡器基础错误。
     * @member nymph.dev.cardReader.ErrorCode
     */
    IC_CARDREADER_BASE_ERR: 'IC_CARDREADER_BASE_ERR',

    /**
     * @property {String} [IC_CARDREADER_OTHER_ERR='IC_CARDREADER_OTHER_ERR'] IC 读卡器其他错误。
     * @member nymph.dev.cardReader.ErrorCode
     */
    IC_CARDREADER_OTHER_ERR: 'IC_CARDREADER_OTHER_ERR',

    /**
     * @property {String} [CARD_BASE_ERR='CARD_BASE_ERR'] 卡类基础错误。
     * @member nymph.dev.cardReader.ErrorCode
     */
    CARD_BASE_ERR: 'CARD_BASE_ERR'
};

/**
 * # 卡片状态
 * @class nymph.dev.cardReader.CardStatus
 */
var CardStatus = {
    /**
     * @property {String} [NO_EMV='NO_EMV'] 卡片没有被 EMV 流程受理。
     * @member  nymph.dev.cardReader.CardStatus
     */
    NO_EMV: 'NO_EMV',

    /**
     * @property {String} [EMV_PROCESSING='EMV_PROCESSING'] 卡片已被 EMV 流程受理。
     * @member  nymph.dev.cardReader.CardStatus
     */
    EMV_PROCESSING: 'EMV_PROCESSING',

    /**
     * @property {String} [EMV_FAILED='EMV_FAILED'] 流程受理卡片失败。
     * @member  nymph.dev.cardReader.CardStatus
     */
    EMV_FAILED: 'EMV_FAILED',

    /**
     * @property {String} [EMV_FINISHED='EMV_FINISHED'] 流程受理卡片结束。
     * @member  nymph.dev.cardReader.CardStatus
     */
    EMV_FINISHED: 'EMV_FINISHED'
};

/**
 * @property {nymph.dev.cardReader.ErrorCode} ErrorCode 错误码。
 * @member nymph.dev.cardReader
 */
cardReader.ErrorCode = ErrorCode;

/**
 * @property {nymph.dev.cardReader.CardStatus} CardStatus 卡片状态。
 * @member nymph.dev.cardReader
 */
cardReader.CardStatus = CardStatus;

/**
 * @property {nymph.dev.cardReader.CardType} CardType 卡类型枚举。
 * @member nymph.dev.cardReader
 */
cardReader.CardType = require('./card-type');

/**
 * @property {nymph.dev.cardReader.SlotType} SlotType 卡槽类型枚举。
 * @member nymph.dev.cardReader
 */
cardReader.SlotType = require('./slot-type');

/**
 * @property {nymph.dev.cardReader.magcard} magcard 包括磁条卡及相关类。
 * @member nymph.dev.cardReader
 */
cardReader.magcard = magcard;

/**
 * @property {nymph.dev.cardReader.ic} ic 包括 IC 卡各种卡类及相关类。
 * @member nymph.dev.cardReader
 */
cardReader.ic = ic;

hermes.addEventSupport(cardReader);
module.exports = cardReader;

},{"./Slot-type":29,"./card-type":30,"./ic/ic-card":33,"./mag/magcard":40,"./slot-type":42,"emv":"emv","error":"error","hermes":"hermes","when":296}],"connectivity-manager":[function(require,module,exports){
'use strict';

/**
 * # 通讯管理类（模块名：connectivityManager）
 * @class nymph.comm.connectivityManager
 * @singleton
 * 本模块主要负责通讯方式的建立和管理。
 */

// 引用外部模块。
var nymphError = require('error'),
    Error = require('error').NymphError,
    hermes = require('hermes');

// 引用模块内部部件。
var gprsManager = require('./gprs/gprs-manager');
var wifiManager = require('./wifi/wifi-manager');
var ethManager = require('./ethernet/ethernet-adapter');

var connectivityManager = {
  instanceId: hermes.NULL,

  /**
   * 插件名称。
   */
  PLUGINID: '4d35c6e75fa260890572a8fe4631b0a2',

  /**
   * 通讯参数。
   */
  commParam: null,

  /**
   * 当前网络（最后一次打开的网络类型）
   */
  currentNetwork: null,

  /**
   * 是否支持同时打开多种网络
   */
  isSupportMultiNetwork: false,

  /**
   * @method dnsResolve 不使用
   * DNS域名解析为IP地址
   *
   * @param {String} domain 域名
   * @return {String} 如果解析成功返回映射的 IP 地址，失败返回 null
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  dnsResolve: function (domain) {
    var result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'dnsResolve', [domain]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: 'DNS 域名解析失败。', innerCode: result.innerCode};
    }

    return result.data;
  },

  /**
   * @method preConnect 不使用
   * 预拨号。
   *
   * modem 进行非阻塞拨号，2G/3G 进行非阻塞连接 PPP。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
  preConnect: function (callback) {
  },

  /**
   * @method open
   * 打开设备
   *
   * @param {nymph.comm.connectivityManager.NetworkType} networkType 要打开的网络类型。
   *
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
  open: function (networkType, callback) {
    var self = this, actualParam = {};
    switch (networkType) {
        case self.NetworkType.GPRS:
        case self.NetworkType.LAN:
        case self.NetworkType.WIFI:
          break;
        default:
          callback.call(self, {code: nymphError.PARAM_ERR, message: 'Not support this network:' + networkType});
          return;
    }
      hermes.exec(self.PLUGINID, self.instanceId, 'open', [networkType], function (err) {
          if (err) {
              err.code = self.getError(err.innerCode);
              callback.call(self, err);
          } else {
              self.currentNetwork = networkType;
              callback.call(self, null);
          }
      });
  },

  /**
   * @method getNetworkManager
   * 获取指定通讯方式的管理器用来做该通讯方式特有的操作。
   * @param {nymph.comm.connectivityManager.NetworkType} networkType 要获取的网络类型。
   * @return {Object} 获取到的网络管理器。
   */
  getNetworkManager: function (networkType) {
      var self = this;
       switch (networkType) {
           case self.NetworkType.GPRS:
               return gprsManager;
           case self.NetworkType.WIFI:
               // 目前只有 WIFI 有需要特有操作的管理器。
               return wifiManager;
           case self.NetworkType.LAN:
               // 目前只有以太网有需要特有操作的管理器，目前以太网模块暂时没有特有操作，先预留
               return ethManager;
           default:
               return {};
       }
   },

  /**
   * @method config 不使用
   * 设置网络参数。
   *
   * @param {nymph.comm.connectivityManager.NetworkType} networkType 要设置的网络类型。
   *
   * @param {Object} param 通讯参数。
   * @param {Object} param.gprs GPRS 网络参数
   * @param {String} param.gprs.apn APN
   * @param {String} param.gprs.password 密码
   * @param {String} param.gprs.userName 用户名
   *
   * @param {Object} param.lan 有线网络参数（以太网接口需要os版本3.9.0以上支持）
   * @param {String} param.lan.dns1 DNS 地址
   * @param {String} param.lan.dns2 DNS 地址
   * @param {String} param.lan.gateway 网关地址
   * @param {String} param.lan.localIp 本地 IP
   * @param {String} param.lan.mask 网络掩码
   * @param {Boolean} param.lan.isDhcp 是否使用 DHCP 服务（如果设置成true，就不会去配置静态IP、网关、掩码、dns这些参数）
   *
   * @param {Object} param.wifi WIFI 网络参数
   * @param {String} param.lan.dns1 DNS 地址
   * @param {String} param.lan.dns2 DNS 地址
   * @param {String} param.lan.gateway 网关地址
   * @param {String} param.lan.localIp 本地 IP
   * @param {String} param.lan.mask 网络掩码
   * @param {Boolean} param.lan.isDhcp 是否使用 DHCP 服务
   *
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   */
   config: function (networkType, param, callback){
      var self = this;

      hermes.exec(self.PLUGINID, self.instanceId, 'config', [networkType, param], function (err) {
          if (err) {
              err.code = self.getError(err.innerCode);
              callback.call(self, err);
          } else {
              callback.call(self, null);
          }
      });
   },

    /**
     * @method connect 不使用
     * 按照 config 设置好的网络参数，连接指定网络。
      * @param {nymph.comm.connectivityManager.NetworkType} networkType 要打开的网络类型。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     */
   connect: function (networkType, callback) {
       var self = this;

       hermes.exec(self.PLUGINID, self.instanceId, 'connect', [networkType], function (err) {
           if (err) {
               err.code = self.getError(err.innerCode);
               callback.call(self, err);
           } else {
               self.currentNetwork = networkType;
               callback.call(self, null);
           }
       });
   },

  /**
   * @method close
   * 关闭设备。
   *
   * @param {nymph.comm.connectivityManager.NetworkType} networkType 要关闭的网络类型。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  close: function (networkType, callback) {
    var self = this;

    hermes.exec(self.PLUGINID, self.instanceId, 'close', [networkType], function (err) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        self.currentNetwork = null;
        callback.call(self, null);
      }
    });
  },

  /**
   * @method ping 不使用
   * 检测网络连通性，利用 ping 做 2-3 次 icmp 检测包的发送接收
   *
   * @param {String} serverIp 检测对端 IP 或者域名。
   * @param {Number} timeout 超时时间（单位：秒）。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   * @param {Number} callback.retCode 检测通道结果。
   */
  ping: function (serverIp, timeout, callback) {
    var self = this;

    hermes.exec(self.PLUGINID, self.instanceId, 'ping', [serverIp, timeout], function (err) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        callback.call(self, null);
      }
    });
  },

  getError: function (innerCode) {
    var ErrorCode = this.ErrorCode;
    switch (innerCode) {
      case -9000:
      case -9001:
        return nymphError.ERROR;
      case -9002:
        return ErrorCode.CABLE_NOT_INSERTED;
      case -9003:
        return nymphError.PARAM_ERR;
      case -9004:
        return ErrorCode.APN_ERR;
      case -9005:
        return ErrorCode.NO_SIM;
      case -9999:
        return nymphError.OTHER_ERR;
      default:
        return nymphError.getError(innerCode);
    }
  }
};

var ErrorCode = {
    /**
     * 网线没插
     */
    CABLE_NOT_INSERTED: 'CABLE_NOT_INSERTED',

    /**
     * APN 错误
     */
    APN_ERR: 'APN_ERR',

    /**
     * 没有 sim 卡
     */
    NO_SIM: 'NO_SIM',
};

/**
 * 网络类型
 * @class nymph.comm.connectivityManager.NetworkType
 */
var NetworkType = {
  /**
   * GPRS
   */
  GPRS: 'GPRS',

  /**
   * LAN
   */
  LAN: 'LAN',

  /**
   * WIFI
   */
  WIFI: 'WIFI'
};

/**
 * @property {nymph.comm.connectivityManager.ErrorCode} ErrorCode 错误码。
 * @member nymph.comm.connectivityManager
 */
connectivityManager.ErrorCode = ErrorCode;

/**
 * @property {nymph.comm.connectivityManager.NetworkType} NetworkType 网络类型。
 * @member nymph.comm.connectivityManager
 */
connectivityManager.NetworkType = NetworkType;

hermes.addJsPluginInstance(connectivityManager.PLUGINID, connectivityManager);

module.exports = connectivityManager;

},{"./ethernet/ethernet-adapter":26,"./gprs/gprs-manager":27,"./wifi/wifi-manager":28,"error":"error","hermes":"hermes"}],"console-patch":[function(require,module,exports){
'use strict';

var consolePatch = function () {
  return {
    log: prepareLogFn(window.console.log, 'LOG'),
    info: prepareLogFn(window.console.info, 'INFO'),
    warn: prepareLogFn(window.console.warn, 'WARN'),
    debug: prepareLogFn(window.console.debug, 'DEBUG'),
    error: prepareLogFn(window.console.error, 'ERROR')
  }
};
function prepareLogFn(logFn, level) {
  return function () {
    try {
      var args = Array.prototype.slice.call(arguments),
        now = new Date();

      // prepend a timestamp and optional classname to the original output message
      args[0] = now + ' - ' + 'hermes-app' + args[0];
      //发送日志消息给服务器
      if (window.socket) {
        window.socket.emit('log', {'source': 'APP', 'time': now, 'level': level, 'message': arguments});
      }
      logFn.apply(window.console, args);
    }
    catch (error) {
      window.console.error("LogDecorator ERROR: " + error);
    }
  }
}

module.exports = consolePatch;

},{}],"crypto-js":[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	return CryptoJS;

}));
},{"./aes":115,"./cipher-core":116,"./core":117,"./enc-base64":118,"./enc-utf16":119,"./evpkdf":120,"./format-hex":121,"./hmac":122,"./lib-typedarrays":123,"./md5":124,"./mode-cfb":125,"./mode-ctr":127,"./mode-ctr-gladman":126,"./mode-ecb":128,"./mode-ofb":129,"./pad-ansix923":130,"./pad-iso10126":131,"./pad-iso97971":132,"./pad-nopadding":133,"./pad-zeropadding":134,"./pbkdf2":135,"./rabbit":137,"./rabbit-legacy":136,"./rc4":138,"./ripemd160":139,"./sha1":140,"./sha224":141,"./sha256":142,"./sha3":143,"./sha384":144,"./sha512":145,"./tripledes":146,"./x64-core":147}],"date-format":[function(require,module,exports){
'use strict';

/**
 * @class nymph.util.dateFormat
 * @singleton
 *
 * 此JS文件是格式化JS中日期时间的工具类，其中包含了传入日期对象Date，格式化成想要的格式，<br>
 * 或者传入字符串格式的时间，此字符串日期对应的格式可以转换为相应的日期对象，<br>
 * 可以计算两个日期之间的差值
 *
 * y: 表示年
 * M：表示一年中的月份 1~12
 * d: 表示月份中的天数 1~31
 * H：表示一天中的小时数 00~23
 * m: 表示小时中的分钟数 00~59
 * s: 表示分钟中的秒数   00~59
 */

var DateFormat = function(){
  this.initialize();
};

DateFormat.prototype = {
  //定义一些常用的日期格式的常量
  DEFAULT_DATE_FORMAT: 'yyyy-MM-dd',
  DEFAULT_MONTH_FORMAT: 'yyyy-MM',
  DEFAULT_YEAR_FORMAT: 'yyyy',
  DEFAULT_TIME_FORMAT: 'HH:mm:ss',
  DEFAULT_DATETIME_FORMAT1: 'yyyy-MM-dd HH:mm:ss',
  DEFAULT_DATETIME_FORMAT2: 'yyyyMMddHHmmss',
  DEFAULT_YEAR: 'YEAR',
  DEFAULT_MONTH: 'MONTH',
  DEFAULT_DATE: 'DATE',


  //初始化当前日期
  initialize: function(){
    this.curDate = new Date();
  },

  /**
   * @method formatCurrentDate
   * 根据给定的日期时间格式，格式化当前日期
   * @param {String} strFormat 格式化字符串， 如："yyyy-MM-dd" ,默认：yyyy-MM-dd HH:mm:ss
   * @return {String} 返回根据给定格式的字符串表示的时间日期格式<br>
   *         若给定的格式不符合规定则返回原字符串格式
   */
  formatCurrentDate: function(strFormat){
    var tempFormat = strFormat === undefined? this.DEFAULT_DATETIME_FORMAT1: strFormat;
    var dates = this.getDateObject(this.curDate);
    if(/(y+)/.test(tempFormat)){
      var fullYear = this.curDate.getFullYear() + '';
      var year = RegExp.$1.length === 4? fullYear: fullYear.substr(4 - RegExp.$1.length);
      tempFormat = tempFormat.replace(RegExp.$1, year);
    }
    for(var i in dates){
      if(new RegExp('(' + i + ')').test(tempFormat)){
        var target = RegExp.$1.length === 1? dates[i]: ('0' + dates[i]).substr(('' + dates[i]).length - 1);
        tempFormat = tempFormat.replace(RegExp.$1, target);
      }
    }
    return tempFormat;
  },


  /**
   * @method format
   * 根据给定的格式，把给定的时间进行格式化
   * @param {Date} date 要格式化的日期
   * @param {String} strFormat 要得到的日期的格式的格式化字符串，如：'yyyy-MM-dd'，默认：yyyy-MM-dd HH:mm:ss
   * @return {String} 根据规定格式的时间格式
   */
  format: function(date, strFormat){
    if(typeof date === 'undefined'){
      this.curDate = new Date();
    }else if(!(date instanceof Date)){
      this.debug(date + '你输入的不是日期类型');
      return date;
    }else{
      this.curDate = date;
    }
    return this.formatCurrentDate(strFormat);
  },

  /**
   * @method parseDate
   * 根据给定的格式对给定的字符串日期时间进行解析，
   * @param {String} strDate 要解析的日期的字符串表示,此参数只能是字符串形式的日期，否则返回当前系统日期
   * @param {String} strFormat 解析给定日期的格式, 如果输入的strDate的格式为{Date.parse()}方法支持的格式，<br>
   *         则可以不传入，否则一定要传入与strDate对应的格式, 若不传入格式则返回当期系统日期。
   * @return {Date} 返回解析后的Date类型的时间<br>
   *        若不能解析则返回当前日期<br>
   *        若给定为时间格式 则返回的日期为 1970年1月1日的日期
   *
   * bug: 此方法目前只能实现类似'yyyy-MM-dd'格式的日期的转换，<br>
   *       而'yyyyMMdd'形式的日期，则不能实现
   */

  parseDate: function(strDate, strFormat){
    if(typeof strDate !== 'string'){
      return new Date();
    }
    var longTime = Date.parse(strDate);
    if(isNaN(longTime)){
      if(typeof strFormat === 'undefined'){
        this.debug('请输入日期的格式');
        return new Date();
      }
      var tmpDate = new Date();
      var regFormat = /(\w{4})|(\w{2})|(\w{1})/g;
      var regDate = /(\d{4})|(\d{2})|(\d{1})/g;
      var formats = strFormat.match(regFormat);
      var dates = strDate.match(regDate);
      if(typeof formats !== 'undefined' && typeof dates !== 'undefined' && formats.length === dates.length){
        for(var i = 0; i < formats.length; i++){
          var format = formats[i];
          if(format === 'yyyy'){
            tmpDate.setFullYear(parseInt(dates[i], 10));
          }else if(format === 'yy'){
            var prefix = (tmpDate.getFullYear() + '').substring(0, 2);
            var year = (parseInt(dates[i], 10) + '').length === 4? parseInt(dates[i], 10): prefix + (parseInt(dates[i], 10) + '00').substring(0, 2);
            var tmpYear = parseInt(year, 10);
            tmpDate.setFullYear(tmpYear);
          }else if(format === 'MM' || format === 'M'){
            tmpDate.setMonth(parseInt(dates[i], 10) - 1);
          }else if(format === 'dd' || format === 'd'){
            tmpDate.setDate(parseInt(dates[i], 10));
          }else if(format === 'HH' || format === 'H'){
            tmpDate.setHours(parseInt(dates[i], 10));
          }else if(format === 'mm' || format === 'm'){
            tmpDate.setMinutes(parseInt(dates[i], 10));
          }else if(format === 'ss' || format === 's'){
            tmpDate.setSeconds(parseInt(dates[i], 10));
          }
        }
        return tmpDate;
      }
      return tmpDate;
    }else{
      return new Date(longTime);
    }
  },

  /**
   * @method compareTo
   * 比较两个日期的差距
   * @param date1 Date类型的时间
   * @param date2 Date 类型的时间
   * @param isFormat boolean 是否对得出的时间进行格式化,<br>
   *       false:返回毫秒数，true：返回格式化后的数据
   * @return 返回两个日期之间的毫秒数 或者是格式化后的结果
   */
  compareTo: function(date1, date2, isFormat){
    var len = arguments.length;
    var tmpdate1 = new Date();
    var tmpdate2 = new Date();
    if(len === 1){
      tmpdate1 = date1;
    }else if(len >= 2){
      tmpdate1 = date1;
      tmpdate2 = date2;
    }
    if(!(tmpdate1 instanceof Date) || !(tmpdate2 instanceof Date)){
      //alert("请输入正确的参数！");
      return 0;
    }else{
      var time1 = tmpdate1.getTime();
      var time2 = tmpdate2.getTime();
      var time = Math.max(time1, time2) - Math.min(time1, time2);
      if(!isNaN(time) && time > 0){
        if(isFormat){
          var date = new Date(time);
          var result = {};
          /*result += (date.getFullYear() - 1970) > 0? (date.getFullYear() - 1970) + "年":"";
           result += (date.getMonth() - 1) > 0? (date.getMonth() - 1) + "月": "";
           result += (date.getDate() - 1) > 0? (date.getDate() - 1) + "日": "";
           result += (date.getHours() - 8) > 0? (date.getHours() - 1) + "小时": "";
           result += date.getMinutes() > 0? date.getMinutes() + "分钟": "";
           result += date.getSeconds() > 0? date.getSeconds() + "秒": "";*/
          result.year   = (date.getFullYear() - 1970) > 0? (date.getFullYear() - 1970): '0';
          result.month  = (date.getMonth() - 1) > 0? (date.getMonth() - 1): '0';
          result.day    = (date.getDate() - 1) > 0? (date.getDate() - 1): '0';
          result.hour   = (date.getHours() - 8) > 0? (date.getHours() - 1): '0';
          result.minute = date.getMinutes() > 0? date.getMinutes(): '0';
          result.second = date.getSeconds() > 0? date.getSeconds(): '0';
          return result;
        }else {
          return time;
        }
      }else{
        return 0;
      }
    }
  },

  /**
   * @method calculateMonth
   * 按月份进行加减 计算规则如下：<br>
   *   1、如果传入的日期的日数值小于对应月份总天数且小于计算的新的月份的总天数，则日为当前日数值，月份为新计算的月份<br>
   *   2、如果传入的日期的月份总天数大于等于新计算得到的月份的总天数，则日为新计算月份的最后一天，月份为新计算的月份<br>
   *   3、如果传入的日期的月份总天数小于新计算得到的月份的总天数，则日为新计算月份的最后一天，月份为新计算的月份<br>
   * @param {Date} date 日期
   * @param {Number} amount 月份加减的数值 负值代表减月，正值代表加月
   * @return {Date} 返回计算后的日期
   */
  calculateMonth: function(date, amount){
    if(undefined === date || !(date instanceof Date) ){
      return date;
    }
    if(typeof amount !== 'number'){
      return date;
    }
    var _month = date.getMonth();
    var _day = date.getDate();
    var _newMonth = parseInt((_month + amount) % 12); //根据传入的数值和日期月份计算出新的月份
    var _newYear = date.getFullYear() + parseInt((_month + amount) / 12); //根据传入的数值和日期计算出新的年份
    //START 当传入的数值为负值时重新计算新的月份和年份
    if(amount < 0){
      _newYear = date.getFullYear() - parseInt((12 - amount) / 12);
      _newMonth = parseInt((12 + (_month + amount)));
    }
    //END
    var _oldMonthDay = this.getMonthDays(date.getFullYear(), _month); //根据传入的日期年份和月份获取对应月份的总天数
    var mouthDays = this.getMonthDays(_newYear, _newMonth);  //根据计算出的新的年份和月份获取对应月份的总天数
    date.setFullYear(_newYear);
    if((_day < _oldMonthDay && _day < mouthDays)){
      date.setDate(_day);
      date.setMonth(_newMonth);
    }else if(mouthDays <= _oldMonthDay){
      date.setDate(mouthDays);
      date.setMonth(_newMonth);
    }else{
      date.setMonth(_newMonth);
      date.setDate(mouthDays);
    }
    return date;
  },

  /**
   * @method isLeapYear
   * 判断是否为闰年
   * @param {Number} year 要判断的年份
   * @return {Boolean} 是：true, 否：false
   */
  isLeapYear: function(year){
    var _year = year + '';
    if(!(/^\d{4}$/.test(_year))){
      return false;
    }
    _year = _year * 1;
    var is4 = (_year % 4 === 0) && (_year % 100 !== 0); //能被4整除，且不能被100整除
    var is400 = _year % 400 === 0; //能被400整除
    return is4 || is400;
  },

  /**
   * @method getMonthDays
   * 获取给定月份的天数,JS中获取的月份是从0开始计算
   * @param {Number} year 要判断的月份所在年份
   * @param {Number} month 给定月份
   * @return {Number} 给定月份的天数
   */
  getMonthDays: function(year, month){
    var _newMonth = month;
    //1,3,5,7,8,10,12月份为31天
    if(0 === _newMonth || 2 === _newMonth || 4 === _newMonth || 6 === _newMonth || 7 === _newMonth || 9 === _newMonth || 11 === _newMonth){
      return 31;
    }else if(3 === _newMonth || 5 === _newMonth || 8 === _newMonth || 10 === _newMonth){//4,6,9,11月份为30天
      return 30;
    }else{
      return (this.isLeapYear(year)? 29: 28); //2月份闰年29天,平年28天
    }
  },

  /**
   * @method getDateObject
   * 根据给定的日期得到日期的月，日，时，分和秒的对象
   * @param {Date} date 给定的日期 date为非Date类型， 则获取当前日期
   * @return {Object} 有给定日期的月、日、时、分和秒组成的对象
   */
  getDateObject: function(date){
    if(!(date instanceof Date)){
      date = new Date();
    }
    return {
      'M+' : date.getMonth() + 1,
      'd+' : date.getDate(),
      'H+' : date.getHours(),
      'm+' : date.getMinutes(),
      's+' : date.getSeconds()
    };
  },

  /**
   * @method debug
   *在控制台输出日志
   *@param {String} message 要输出的日志信息
   */
  debug: function(message){
    if(!window.console){
      window.console = {};
      window.console.log = function(){
        return;
      };
    }
    window.console.log(message + ' ');
  }
};

module.exports = DateFormat;

},{}],"device-status":[function(require,module,exports){
'use strict';

//引用外部模块
var hermes = require('hermes'),
    nymphError = require('error'),
    Error = require('error').NymphError;

//var deviceStatus= {};
/**
 * # 设备状态（模块名：device-status）
 * @class nymph.sys.deviceStatus
 * @singleton
 */


//var DeviceStatus = function(){
//    this.instanceId= hermes.NULL;
//};

//DeviceStatus.prototype = {
var deviceStatus = {
    /**
     * 插件ID。
     */
    PLUGINID: '95203a8a9ccaba6d239ad9075b08d27d',

    //constructor: DeviceStatus,

    instanceId: hermes.NULL,

    bindEvents: function () {
        var self = this;

        /**
         * @event onchanged
         * 设备状态变化时。
         * @param {String} devName 设备名称：printer-打印机 cardreader-读卡器 pinpad-密码键盘 scanner-扫描枪 emv-EMV
         * @param {String} status 设备状态：closed-未打开 opened-打开 activated-激活状态 failed-打开或者关闭异常状态
         * @param {Number} data 设备状态数据：目前待定
         *
         *
         * @member nymph.sys.deviceStatus
         */
        self.addListener('onchanged', function (devName, status, data) {
            self.emit('changed', devName, status, data);
        });

    },

    unBindEvents: function () {
        var self = this;
        self.removeAllListeners('onchanged');
    },

    /**
     * @method init
     * 初始化插件,(返回instanceID),使用本模块必须先调用本方法
     *
     *     try {
   *         deviceStatus.create();
   *     } catch (err) {
   *         // 创建失败的处理
   *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.sys.deviceStatus
     */
    init: function () {
        // 如果重复打开，则抛出异常。
        if (this.instanceId !== hermes.NULL) {
            var error = new Error();
            error.code = this.PLUGIN_CREATE;
            error.message = 'Plugin already created.';

            throw error;
        }
        var result, errorCode;
        result  = hermes.exec(this.PLUGINID, this.instanceId, 'init', []);

        console.log('createPlugin 的结果：' + JSON.stringify(result));
        errorCode = this.getError(result.innerCode);
        console.log('createPlugin errorCode:' + errorCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to create Device Status.', innerCode: result.innerCode};
        }
        console.log('createPlugin instanceId:' + result.data);
        this.instanceId = result.data;

    },

    /**
     * @property {String} [PLUGIN_CREATE='PLUGIN_CREATE'] 插件已经创建。
     * @member nymph.sys.deviceStatus
     */
    PLUGIN_CREATE: 'PLUGIN_CREATE',

    /**
     * @property {String} [CREATE_INSTANCE_FAIL='CREATE_INSTANCE_FAIL'] 创建实例失败。
     * @member nymph.sys.deviceStatus
     */
    CREATE_INSTANCE_FAIL:'CREATE_INSTANCE_FAIL',

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @returns {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        var self = this;
        switch (innerCode) {
            case -1:
                return nymphError.ERROR;
            case 6:
                return self.CREATE_INSTANCE_FAIL;
            default:
                return nymphError.getError(innerCode);
        }
    }
};
//deviceStatus.DeviceStatus = DeviceStatus;
hermes.addEventSupport(deviceStatus);
hermes.addJsPluginInstance(deviceStatus.PLUGINID, deviceStatus);
deviceStatus.bindEvents();
module.exports = deviceStatus;


},{"error":"error","hermes":"hermes"}],"emv-data":[function(require,module,exports){
'use strict';

var pubKeys, aids, defaultBasicParam, defaultPbocParam, defaultVisaParam, defaultMasterParam,
    basicParamList = [],
    visaParamList = [],
    pbocParamList = [],
    masterParamList = [],
    pubKeys = [],
    Buffer = require('buffer').Buffer,
    encoding = require('nymph-encoding'),
    emv = require('emv'),
    hermes = require('hermes'),
    emvData = {};

var pubKey1 = new emv.PubKeyRsa();
pubKey1.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
pubKey1.index = 0xE1;
pubKey1.mod = new Buffer([0x99, 0xC5, 0xB7, 0x0A, 0xA6, 0x1B, 0x4F, 0x4C, 0x51, 0xB6,
    0xF9, 0x0B, 0x0E, 0x3B, 0xFB, 0x7A, 0x3E, 0xE0, 0xE7, 0xDB,
    0x41, 0xBC, 0x46, 0x68, 0x88, 0xB3, 0xEC, 0x8E, 0x99, 0x77,
    0xC7, 0x62, 0x40, 0x7E, 0xF1, 0xD7, 0x9E, 0x0A, 0xFB, 0x28,
    0x23, 0x10, 0x0A, 0x02, 0x0C, 0x3E, 0x80, 0x20, 0x59, 0x3D,
    0xB5, 0x0E, 0x90, 0xDB, 0xEA, 0xC1, 0x8B, 0x78, 0xD1, 0x3F,
    0x96, 0xBB, 0x2F, 0x57, 0xEE, 0xDD, 0xC3, 0x0F, 0x25, 0x65,
    0x92, 0x41, 0x7C, 0xDF, 0x73, 0x9C, 0xA6, 0x80, 0x4A, 0x10,
    0xA2, 0x9D, 0x28, 0x06, 0xE7, 0x74, 0xBF, 0xA7, 0x51, 0xF2,
    0x2C, 0xF3, 0xB6, 0x5B, 0x38, 0xF3, 0x7F, 0x91, 0xB4, 0xDA,
    0xF8, 0xAE, 0xC9, 0xB8, 0x03, 0xF7, 0x61, 0x0E, 0x06, 0xAC,
    0x9E, 0x6B]);
pubKey1.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey1);

var pubKey2 = new emv.PubKeyRsa();
pubKey2.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
pubKey2.index = 0xE2;
pubKey2.mod = new Buffer([0xBD, 0x23, 0x2E, 0x34, 0x8B, 0x11, 0x8E, 0xB3, 0xF6, 0x44,
    0x6E, 0xF4, 0xDA, 0x6C, 0x3B, 0xAC, 0x9B, 0x2A, 0xE5, 0x10,
    0xC5, 0xAD, 0x10, 0x7D, 0x38, 0x34, 0x32, 0x55, 0xD2, 0x1C,
    0x4B, 0xDF, 0x49, 0x52, 0xA4, 0x2E, 0x92, 0xC6, 0x33, 0xB1,
    0xCE, 0x4B, 0xFE, 0xC3, 0x9A, 0xFB, 0x6D, 0xFE, 0x14, 0x7E,
    0xCB, 0xB9, 0x1D, 0x68, 0x1D, 0xAC, 0x15, 0xFB, 0x0E, 0x19,
    0x8E, 0x9A, 0x7E, 0x46, 0x36, 0xBD, 0xCA, 0x10, 0x7B, 0xCD,
    0xA3, 0x38, 0x4F, 0xCB, 0x28, 0xB0, 0x6A, 0xFE, 0xF9, 0x0F,
    0x09, 0x9E, 0x70, 0x84, 0x51, 0x1F, 0x3C, 0xC0, 0x10, 0xD4,
    0x34, 0x35, 0x03, 0xE1, 0xE5, 0xA6, 0x72, 0x64, 0xB4, 0x36,
    0x7D, 0xAA, 0x9A, 0x39, 0x49, 0x49, 0x92, 0x72, 0xE9, 0xB5,
    0x02, 0x2F]);
pubKey2.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey2);

var pubKey3 = new emv.PubKeyRsa();
pubKey3.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
pubKey3.index = 0xE3;
pubKey3.mod = new Buffer([0xBC, 0x01, 0xE1, 0x22, 0x23, 0xE1, 0xA4, 0x1E, 0x88, 0xBF,
    0xFA, 0x80, 0x10, 0x93, 0xC5, 0xF8, 0xCE, 0xC5, 0xCD, 0x05,
    0xDB, 0xBD, 0xBB, 0x78, 0x7C, 0xE8, 0x72, 0x49, 0xE8, 0x80,
    0x83, 0x27, 0xC2, 0xD2, 0x18, 0x99, 0x1F, 0x97, 0xA1, 0x13,
    0x1E, 0x8A, 0x25, 0xB0, 0x12, 0x2E, 0xD1, 0x1E, 0x70, 0x9C,
    0x53, 0x3E, 0x88, 0x86, 0xA1, 0x25, 0x9A, 0xDD, 0xFD, 0xCB,
    0xB3, 0x96, 0x60, 0x4D, 0x24, 0xE5, 0x05, 0xA2, 0xD0, 0xB5,
    0xDD, 0x03, 0x84, 0xFB, 0x00, 0x02, 0xA7, 0xA1, 0xEB, 0x39,
    0xBC, 0x8A, 0x11, 0x33, 0x9C, 0x7A, 0x94, 0x33, 0xA9, 0x48,
    0x33, 0x77, 0x61, 0xBE, 0x73, 0xBC, 0x49, 0x7B, 0x8E, 0x58,
    0x73, 0x6D, 0xA4, 0x63, 0x65, 0x38, 0xAD, 0x28, 0x2D, 0x3C,
    0xD3, 0xDB]);
pubKey3.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey3);

var pubKey4 = new emv.PubKeyRsa();
pubKey4.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
pubKey4.index = 0xE4;
pubKey4.mod = new Buffer([0xCB, 0xF2, 0xE4, 0x0F, 0x08, 0x36, 0xC9, 0xA5, 0xE3, 0x90,
    0xA3, 0x7B, 0xE3, 0xB8, 0x09, 0xBD, 0xF5, 0xD7, 0x40, 0xCB,
    0x1D, 0xA3, 0x8C, 0xFC, 0x05, 0xD5, 0xF8, 0xD6, 0xB7, 0x74,
    0x5B, 0x5E, 0x9A, 0x3F, 0xA6, 0x96, 0x1E, 0x55, 0xFF, 0x20,
    0x41, 0x21, 0x08, 0x52, 0x5E, 0x66, 0xB9, 0x70, 0xF9, 0x02,
    0xF7, 0xFF, 0x43, 0x05, 0xDD, 0x83, 0x2C, 0xD0, 0x76, 0x3E,
    0x3A, 0xA8, 0xB8, 0x17, 0x3F, 0x84, 0x77, 0x71, 0x00, 0xB1,
    0x04, 0x7B, 0xD1, 0xD7, 0x44, 0x50, 0x93, 0x12, 0xA0, 0x93,
    0x2E, 0xD2, 0x5F, 0xED, 0x52, 0xA9, 0x59, 0x43, 0x07, 0x68,
    0xCC, 0xD9, 0x02, 0xFD, 0x8C, 0x8A, 0xD9, 0x12, 0x3E, 0x6A,
    0xDD, 0xB3, 0xF3, 0x4B, 0x92, 0xE7, 0x92, 0x4D, 0x72, 0x9C,
    0xB6, 0x47, 0x35, 0x33, 0xAE, 0x2B, 0x2B, 0x55, 0xBF, 0x0E,
    0x44, 0x96, 0x4F, 0xDE, 0xA8, 0x44, 0x01, 0x17]);
pubKey4.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey4);

var pubKey5 = new emv.PubKeyRsa();
pubKey5.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
pubKey5.index = 0xE5;
pubKey5.mod = new Buffer([0xD4, 0xFD, 0xAE, 0x94, 0xDE, 0xDB, 0xEC, 0xC6, 0xD2, 0x0D,
    0x38, 0xB0, 0x1E, 0x91, 0x82, 0x6D, 0xC6, 0x95, 0x43, 0x38,
    0x37, 0x99, 0x17, 0xB2, 0xBB, 0x8A, 0x6B, 0x36, 0xB5, 0xD3,
    0xB0, 0xC5, 0xED, 0xA6, 0x0B, 0x33, 0x74, 0x48, 0xBA, 0xFF,
    0xEB, 0xCC, 0x3A, 0xBD, 0xBA, 0x86, 0x9E, 0x8D, 0xAD, 0xEC,
    0x6C, 0x87, 0x01, 0x10, 0xC4, 0x2F, 0x5A, 0xAB, 0x90, 0xA1,
    0x8F, 0x4F, 0x86, 0x7F, 0x72, 0xE3, 0x38, 0x6F, 0xFC, 0x7E,
    0x67, 0xE7, 0xFF, 0x94, 0xEB, 0xA0, 0x79, 0xE5, 0x31, 0xB3,
    0xCF, 0x32, 0x95, 0x17, 0xE8, 0x1C, 0x5D, 0xD9, 0xB3, 0xDC,
    0x65, 0xDB, 0x5F, 0x90, 0x43, 0x19, 0x0B, 0xE0, 0xBE, 0x89,
    0x7E, 0x5F, 0xE4, 0x8A, 0xDF, 0x5D, 0x3B, 0xFA, 0x05, 0x85,
    0xE0, 0x76, 0xE5, 0x54, 0xF2, 0x6E, 0xC6, 0x98, 0x14, 0x79,
    0x7F, 0x15, 0x66, 0x9F, 0x4A, 0x25, 0x5C, 0x13]);
pubKey5.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey5);

var pubKey6 = new emv.PubKeyRsa();
pubKey6.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
pubKey6.index = 0xE6;
pubKey6.mod = new Buffer([0xEB, 0xF9, 0xFA, 0xEC, 0xC3, 0xE5, 0xC3, 0x15, 0x70, 0x96,
    0x94, 0x66, 0x47, 0x75, 0xD3, 0xFB, 0xDA, 0x5A, 0x50, 0x4D,
    0x89, 0x34, 0x4D, 0xD9, 0x20, 0xC5, 0x56, 0x96, 0xE8, 0x91,
    0xD9, 0xAB, 0x62, 0x25, 0x98, 0xA9, 0xD6, 0xAB, 0x8F, 0xBF,
    0x35, 0xE4, 0x59, 0x9C, 0xAB, 0x7E, 0xB2, 0x2F, 0x95, 0x69,
    0x92, 0xF8, 0xAB, 0x2E, 0x65, 0x35, 0xDE, 0xCB, 0x6B, 0x57,
    0x6F, 0xA0, 0x67, 0x5F, 0x97, 0xC2, 0x3D, 0xD4, 0xC3, 0x74,
    0xA6, 0x6E, 0x6A, 0xF4, 0x19, 0xC9, 0xD2, 0x04, 0xD0, 0xB9,
    0xF9, 0x3C, 0x08, 0xD7, 0x89, 0xD6, 0x38, 0x05, 0x66, 0x0F,
    0xBB, 0x62, 0x9D, 0xF1, 0xB4, 0x88, 0xCF, 0xA1, 0xD7, 0xA1,
    0x3E, 0x9B, 0x72, 0x94, 0x37, 0xEE, 0xAF, 0xE7, 0x18, 0xEF,
    0xA8, 0x59, 0x34, 0x8B, 0xA0, 0xD7, 0x68, 0x12, 0xA9, 0x9F,
    0x31, 0xCD, 0x36, 0x4F, 0x2A, 0x4F, 0xD4, 0x2F]);
pubKey6.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey6);

var pubKey7 = new emv.PubKeyRsa();
pubKey7.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x25]);
pubKey7.index = 0x60;
pubKey7.mod = 'A8EE74EDEF3C0DCA5102FF9B5707975FF67B60D64B5E7322D48DE9D3BB6153F63512A091B606DD8FD5F6A14588324EF8827844C7FFC0BAB2334AE5207770078B69CDC3F2C666CF69E28E16E1816714C4DF313BEF539CC01DA9DD2D6F47DE4F247C500B561C099166AD4FC16DF12DFB684AC48D35CDD2C47A13A86A5A162306F64E33B092AB74EDA71A4091D96E3DAA47';
pubKey7.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey7);

var pubKey8 = new emv.PubKeyRsa();
pubKey8.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x25]);
pubKey8.index = 0x61;
pubKey8.mod = '86C7254665E17CE6934DF7D082569F208D1CC1AD8E9FB2FE23E3D7467BE50B4F874F906ADF2280EC9D204F6D10C037A23CE5FD8283C9ED47D1C669ABDD7C1CB356C70BCDC44E5C8AE231555F7B786AC9C3155BCD51F28EFBC1B33CC87277049219B2C890952736C4713487111678911D9F42E08074CF524E65D721D727F054E6B5E85EC92B3EB59FFEE926DD6C314DF555C94AD487A99B67CB7C7BA5E46A5B813DDB918B8E3E0423F4302A58686D1263C0BACA9E82068C493289E3E6936ECA5F9F77E06B0D6FBDA718818B835020098C671C5DD7E9B8E8E841D2DF32EE94A7F4748484CA44108AB241A5263BA1FF00D51360DDDC749D30A1';
pubKey8.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey8);

var pubKey9 = new emv.PubKeyRsa();
pubKey9.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey9.index = 0xFE;
pubKey9.mod = new Buffer([0xE7, 0x63, 0x17, 0x96, 0x51, 0x75, 0xA0, 0x8B, 0xEE, 0x51, 0x0F, 0x58, 0x83, 0x0E, 0x87, 0xB2, 0x62, 0xC7, 0x0D, 0x52,
    0x98, 0x03, 0x24, 0x5F, 0xA8, 0xB8, 0x8E, 0x0C, 0x75, 0x35, 0x62, 0xDE, 0x7A, 0xEB, 0x5A, 0x9E, 0x3E, 0x6C, 0x1A, 0x98,
    0xE9, 0x4D, 0x8D, 0xB7, 0xC3, 0x14, 0x07, 0xDA, 0xC5, 0xD0, 0x71, 0xE0, 0x6B, 0x80, 0xB0, 0x9E, 0x14, 0x6F, 0x22, 0xDB,
    0x85, 0xF1, 0xD7, 0x2D, 0x1E, 0xA1, 0x8D, 0x22, 0x60, 0x00, 0x32, 0xC6, 0xDD, 0x40, 0xE3, 0x71, 0x4D, 0x5A, 0xDA, 0x7D,
    0xE9, 0xD7, 0xD0, 0x1E, 0x88, 0x39, 0x1F, 0x89, 0x31, 0x56, 0xD6, 0xF4, 0xBF, 0x13, 0xE9, 0x06, 0x35, 0x59, 0xDA, 0x07,
    0x86, 0xDE, 0x9B, 0xDE, 0x6B, 0x1C, 0x9B, 0x0B, 0xB9, 0x68, 0xED, 0xDE, 0x07, 0x14, 0x5A, 0xBF, 0x87, 0x7B, 0x93, 0x16,
    0x82, 0xCC, 0xB1, 0xFB, 0x80, 0x07, 0x28, 0x72, 0x4D, 0x04, 0xAF, 0x24, 0x1E, 0x28, 0x27, 0xE0, 0xFA, 0x1F, 0x62, 0x59,
    0x19, 0x14, 0xFF, 0x25]);
pubKey9.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey9);

var pubKey10 = new emv.PubKeyRsa();
pubKey10.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey10.index = 0xFC;
pubKey10.mod = new Buffer([0xB3, 0x29, 0x6C, 0x91, 0xF4, 0x79, 0x5B, 0xD9, 0x71, 0x12, 0x60, 0x69, 0x03, 0x40, 0x7B, 0x6E, 0xFF, 0x3A, 0xB3, 0x92,
    0x46, 0xE9, 0x10, 0x95, 0xE5, 0x1D, 0x17, 0x86, 0x7D, 0xA4, 0xAD, 0xE5, 0x9A, 0x48, 0xBE, 0x2F, 0xE9, 0xB5, 0x27, 0x10,
    0x28, 0x3D, 0x3D, 0x32, 0x26, 0x0E, 0x2C, 0x7D, 0x24, 0x72, 0x14, 0xC5, 0x7D, 0x46, 0xAA, 0x64, 0x65, 0xE4, 0x7E, 0x0A,
    0x4B, 0x3F, 0xFA, 0xAD, 0x8A, 0x7F, 0x6A, 0x19, 0x07, 0x55, 0xBC, 0xCF, 0xE3, 0xF3, 0xFB, 0x39, 0x89, 0xA9, 0xF6, 0xB1,
    0xC9, 0xE1, 0x84, 0x5B, 0xCC, 0xCA, 0xD6, 0xF2, 0x0B, 0x1D, 0xAC, 0x60, 0x33, 0x60, 0x02, 0x34, 0xE8, 0x1D, 0xAC, 0x41,
    0x53, 0x21, 0x2B, 0x0F, 0x76, 0x0C, 0x23, 0x09, 0x91, 0x92, 0xAA, 0x6C, 0x4C, 0x90, 0x83, 0xBE, 0xFF, 0xD9, 0xA7, 0x9D,
    0x2A, 0x27, 0xB0, 0x8F, 0xEC, 0xC8, 0xE5, 0xD4, 0x37, 0xD6, 0xC6, 0x85, 0x50, 0xA8, 0x39, 0xB1, 0x29, 0x41, 0x51, 0xDA,
    0xBA, 0x9D, 0x9C, 0xB2, 0xF1, 0x60, 0xF6, 0x0F, 0x74, 0x92, 0x89, 0xF5, 0x00, 0xC8, 0xC7, 0xF3, 0x34, 0xBD, 0x20, 0xEB,
    0xAC, 0x4A, 0xB1, 0x09, 0xCF, 0x3C, 0x18, 0x2F, 0x1B, 0x78, 0x1C, 0x7C, 0x09, 0x7A, 0x79, 0x03, 0x53, 0x07, 0x46, 0xC4,
    0x49, 0xB9, 0x9E, 0x39, 0xE4, 0xDB, 0x64, 0x93, 0xDD, 0x2A, 0x02, 0xE3, 0x7C, 0x62, 0xAE, 0x8B, 0xC9, 0xA7, 0x47, 0x0E,
    0xCC, 0xCF, 0x8D, 0xC0, 0x6A, 0x18, 0xC3, 0x3C, 0xD2, 0x4B, 0x30, 0xD5, 0x6F, 0x25, 0xD2, 0x75, 0x5C, 0xE8, 0x2A, 0xA4,
    0xDE, 0x4D, 0x2E, 0xAE, 0xC0, 0x77, 0x50, 0xA0, 0x3D, 0xB7, 0x5E, 0xBD, 0x0D, 0x8E, 0xBC, 0x9F, 0x2A, 0x1D, 0x85, 0xA0,
    0xD2, 0x52, 0xEF, 0xF4, 0x03, 0x29, 0xBE, 0x05]);
pubKey10.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey10);

var pubKey11 = new emv.PubKeyRsa();
pubKey11.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey11.index = 0xFD;
pubKey11.mod = new Buffer([0xC9, 0x48, 0x5D, 0xBE, 0xB5, 0xE4, 0x04, 0x15, 0xD1, 0xB3, 0x97, 0x52, 0x4F, 0x47, 0x68, 0x5F, 0x30, 0x6C, 0xFD, 0xC4,
    0x99, 0xD4, 0xE2, 0xE7, 0xD0, 0xCB, 0xAF, 0x22, 0x2C, 0xFA, 0x81, 0x84, 0xBD, 0x11, 0x1D, 0xAE, 0xED, 0xC9, 0xCC, 0x6E,
    0xC8, 0x54, 0x0C, 0x3F, 0x72, 0x71, 0xEA, 0x99, 0x90, 0x11, 0x9C, 0xC5, 0xC4, 0x31, 0x80, 0x50, 0x1D, 0x9F, 0x45, 0x25,
    0x2D, 0x68, 0x35, 0x05, 0x3F, 0xAE, 0x35, 0x69, 0x6A, 0xE8, 0xCD, 0x67, 0xA3, 0x25, 0x64, 0x74, 0x49, 0xCF, 0x5E, 0x59,
    0x4D, 0xA8, 0xF6, 0x27, 0x20, 0x9F, 0x7F, 0x03, 0xAE, 0x8D, 0x6D, 0xFC, 0x0D, 0xB3, 0xE7, 0x9E, 0x28, 0xE4, 0x15, 0xDF,
    0x29, 0xA5, 0xB5, 0x7D, 0x68, 0x14, 0x85, 0x6C, 0xC3, 0x0A, 0x96, 0xDA, 0x5B, 0x88, 0x90, 0x36, 0x3E, 0x50, 0x7F, 0xCB,
    0x2E, 0x28, 0x3D, 0xA1, 0xEB, 0xB5, 0xF1, 0x8E, 0x8E, 0x24, 0x10, 0x2B, 0x7D, 0x01, 0x92, 0xBB, 0x8E, 0x35, 0xA4, 0xF7,
    0xCD, 0x05, 0xA4, 0x35]);
pubKey11.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey11);

var pubKey12 = new emv.PubKeyRsa();
pubKey12.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey12.index = 0xFB;
pubKey12.mod = new Buffer([0x9B, 0x17, 0x06, 0x03, 0xA4, 0x89, 0xC7, 0x54, 0x6C, 0x45, 0xDA, 0x57, 0xB8, 0xFF, 0xD1, 0xDB, 0x20, 0x61, 0x24, 0x0F,
    0x0E, 0x8C, 0x6D, 0x1F, 0x9A, 0xBD, 0xC6, 0xB2, 0x65, 0xAA, 0x89, 0x11, 0x91, 0x5C, 0x1A, 0x4E, 0xAB, 0xD8, 0xD0, 0xED,
    0x47, 0x55, 0xD1, 0xB9, 0x02, 0xBA, 0x06, 0xFE, 0x5A, 0x64, 0x5B, 0x78, 0x6C, 0xD2, 0x41, 0x29, 0x55, 0x17, 0xD4, 0x4E,
    0xF1, 0xA7, 0xC2, 0x5D, 0x75, 0xAF, 0xE0, 0xEB, 0x28, 0x06, 0x6E, 0x4D, 0x69, 0xFE, 0xE7, 0xAB, 0xAF, 0xDD, 0x5E, 0xEB,
    0x23, 0x0F, 0x14, 0xE4, 0x02, 0xC9, 0x84, 0x08, 0x25, 0xFA, 0x77, 0xEA, 0xD1, 0x2B, 0x5F, 0x1C, 0x54, 0x94, 0x70, 0x1D,
    0xE1, 0x89, 0x7F, 0x65, 0xFE, 0x6B, 0xF1, 0x06, 0xD4, 0x75, 0x45, 0xEB, 0xF7, 0x0C, 0xE7, 0xC1, 0x58, 0x06, 0x8C, 0x61,
    0xF0, 0x77, 0x35, 0x34, 0xDB, 0x74, 0x2A, 0xB8, 0x3C, 0x28, 0x03, 0x8C, 0x14, 0x94, 0xF1, 0x59, 0x05, 0xD0, 0xAD, 0x17,
    0xCF, 0x1B, 0xD3, 0x8D]);
pubKey12.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey12);

var pubKey13 = new emv.PubKeyRsa();
pubKey13.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey13.index = 0xFA;
pubKey13.mod = new Buffer([
    0xA9, 0x0F, 0xCD, 0x55, 0xAA, 0x2D, 0x5D, 0x99, 0x63, 0xE3, 0x5E, 0xD0, 0xF4, 0x40, 0x17, 0x76, 0x99, 0x83, 0x2F, 0x49,
    0xC6, 0xBA, 0xB1, 0x5C, 0xDA, 0xE5, 0x79, 0x4B, 0xE9, 0x3F, 0x93, 0x4D, 0x44, 0x62, 0xD5, 0xD1, 0x27, 0x62, 0xE4, 0x8C,
    0x38, 0xBA, 0x83, 0xD8, 0x44, 0x5D, 0xEA, 0xA7, 0x41, 0x95, 0xA3, 0x01, 0xA1, 0x02, 0xB2, 0xF1, 0x14, 0xEA, 0xDA, 0x0D,
    0x18, 0x0E, 0xE5, 0xE7, 0xA5, 0xC7, 0x3E, 0x0C, 0x4E, 0x11, 0xF6, 0x7A, 0x43, 0xDD, 0xAB, 0x5D, 0x55, 0x68, 0x3B, 0x14,
    0x74, 0xCC, 0x06, 0x27, 0xF4, 0x4B, 0x8D, 0x30, 0x88, 0xA4, 0x92, 0xFF, 0xAA, 0xDA, 0xD4, 0xF4, 0x24, 0x22, 0xD0, 0xE7,
    0x01, 0x35, 0x36, 0xC3, 0xC4, 0x9A, 0xD3, 0xD0, 0xFA, 0xE9, 0x64, 0x59, 0xB0, 0xF6, 0xB1, 0xB6, 0x05, 0x65, 0x38, 0xA3,
    0xD6, 0xD4, 0x46, 0x40, 0xF9, 0x44, 0x67, 0xB1, 0x08, 0x86, 0x7D, 0xEC, 0x40, 0xFA, 0xAE, 0xCD, 0x74, 0x0C, 0x00, 0xE2,
    0xB7, 0xA8, 0x85, 0x2D]);
pubKey13.exponent = new Buffer([0x03]);
pubKeys.push(pubKey13);

var pubKey14 = new emv.PubKeyRsa();
pubKey14.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey14.index = 0xFF;
pubKey14.mod = new Buffer([0xF6, 0x9D, 0xBB, 0x5E, 0x15, 0x98, 0x3E, 0xAE, 0x3C, 0xCF, 0x31, 0xCF, 0x4E, 0x47, 0x09, 0x8C, 0x2F, 0xC1, 0x6F, 0x97,
    0xA0, 0xC7, 0x10, 0xF8, 0x47, 0x77, 0xEF, 0xA9, 0x96, 0x22, 0xD8, 0x65, 0x02, 0xB1, 0x38, 0x72, 0x8A, 0xB1, 0x2E, 0x34,
    0x81, 0xA8, 0x4D, 0x20, 0xE0, 0x14, 0xAD, 0x2D, 0x63, 0x4D, 0x28, 0x36, 0xF2, 0x7F, 0x29, 0x49, 0x24, 0xB8, 0x95, 0xA8,
    0x7F, 0x91, 0xF8, 0x1B, 0x81, 0x69, 0xD4, 0xDF, 0xDA, 0xD8, 0xD7, 0xCB, 0xD7, 0x41, 0x80, 0x4C, 0xD6, 0x1B, 0x46, 0x7C,
    0x7A, 0x9A, 0xCF, 0xEC, 0xEB, 0x71, 0x18, 0x8C, 0xAA, 0x73, 0xA9, 0x07, 0x54, 0x76, 0x99, 0xD4, 0x5C, 0x9C, 0x7D, 0x20,
    0x98, 0xAC, 0x29, 0x66, 0x26, 0x64, 0x17, 0xF6, 0x65, 0xA4, 0x6B, 0xDD, 0x01, 0x2C, 0x09, 0x7D, 0xBD, 0x33, 0xD1, 0xD1,
    0x1A, 0xFF, 0x6E, 0xC8, 0xA9, 0xC0, 0xAD, 0x81, 0x4A, 0x65, 0xB4, 0x82, 0x62, 0xCA, 0x01, 0x16, 0x36, 0x07, 0x9A, 0x32,
    0x8C, 0x1A, 0xAE, 0xB7]);
pubKey14.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey14);

var pubKey15 = new emv.PubKeyRsa();
pubKey15.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey15.index = 0xF3;
pubKey15.mod = new Buffer([0x98, 0xF0, 0xC7, 0x70, 0xF2, 0x38, 0x64, 0xC2, 0xE7, 0x66, 0xDF, 0x02, 0xD1, 0xE8, 0x33, 0xDF,
    0xF4, 0xFF, 0xE9, 0x2D, 0x69, 0x6E, 0x16, 0x42, 0xF0, 0xA8, 0x8C, 0x56, 0x94, 0xC6, 0x47, 0x9D,
    0x16, 0xDB, 0x15, 0x37, 0xBF, 0xE2, 0x9E, 0x4F, 0xDC, 0x6E, 0x6E, 0x8A, 0xFD, 0x1B, 0x0E, 0xB7,
    0xEA, 0x01, 0x24, 0x72, 0x3C, 0x33, 0x31, 0x79, 0xBF, 0x19, 0xE9, 0x3F, 0x10, 0x65, 0x8B, 0x2F,
    0x77, 0x6E, 0x82, 0x9E, 0x87, 0xDA, 0xED, 0xA9, 0xC9, 0x4A, 0x8B, 0x33, 0x82, 0x19, 0x9A, 0x35,
    0x0C, 0x07, 0x79, 0x77, 0xC9, 0x7A, 0xFF, 0x08, 0xFD, 0x11, 0x31, 0x0A, 0xC9, 0x50, 0xA7, 0x2C,
    0x3C, 0xA5, 0x00, 0x2E, 0xF5, 0x13, 0xFC, 0xCC, 0x28, 0x6E, 0x64, 0x6E, 0x3C, 0x53, 0x87, 0x53,
    0x5D, 0x50, 0x95, 0x14, 0xB3, 0xB3, 0x26, 0xE1, 0x23, 0x4F, 0x9C, 0xB4, 0x8C, 0x36, 0xDD, 0xD4,
    0x4B, 0x41, 0x6D, 0x23, 0x65, 0x40, 0x34, 0xA6, 0x6F, 0x40, 0x3B, 0xA5, 0x11, 0xC5, 0xEF, 0xA3]);
pubKey15.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey15);

var pubKey16 = new emv.PubKeyRsa();
pubKey16.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey16.index = 0x99;
pubKey16.mod = 'AB79FCC9520896967E776E64444E5DCDD6E13611874F3985722520425295EEA4BD0C2781DE7F31CD3D041F565F747306EED62954B17EDABA3A6C5B85A1DE1BEB9A34141AF38FCF8279C9DEA0D5A6710D08DB4124F041945587E20359BAB47B7575AD94262D4B25F264AF33DEDCF28E09615E937DE32EDC03C54445FE7E382777';
pubKey16.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey16.hash = '4ABFFD6B1C51212D05552E431C5B17007D2F5E6D';
pubKeys.push(pubKey16);

var pubKey17 = new emv.PubKeyRsa();
pubKey17.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey17.index = 0x95;
pubKey17.mod = 'BE9E1FA5E9A803852999C4AB432DB28600DCD9DAB76DFAAA47355A0FE37B1508AC6BF38860D3C6C2E5B12A3CAAF2A7005A7241EBAA7771112C74CF9A0634652FBCA0E5980C54A64761EA101A114E0F0B5572ADD57D010B7C9C887E104CA4EE1272DA66D997B9A90B5A6D624AB6C57E73C8F919000EB5F684898EF8C3DBEFB330C62660BED88EA78E909AFF05F6DA627B';
pubKey17.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey17.hash = 'EE1511CEC71020A9B90443B37B1D5F6E703030F6';
pubKeys.push(pubKey17);

var pubKey18 = new emv.PubKeyRsa();
pubKey18.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey18.index = 0x92;
pubKey18.mod = '996AF56F569187D09293C14810450ED8EE3357397B18A2458EFAA92DA3B6DF6514EC060195318FD43BE9B8F0CC669E3F844057CBDDF8BDA191BB64473BC8DC9A730DB8F6B4EDE3924186FFD9B8C7735789C23A36BA0B8AF65372EB57EA5D89E7D14E9C7B6B557460F10885DA16AC923F15AF3758F0F03EBD3C5C2C949CBA306DB44E6A2C076C5F67E281D7EF56785DC4D75945E491F01918800A9E2DC66F60080566CE0DAF8D17EAD46AD8E30A247C9F';
pubKey18.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey18.hash = '429C954A3859CEF91295F663C963E582ED6EB253';
pubKeys.push(pubKey18);

var pubKey19 = new emv.PubKeyRsa();
pubKey19.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey19.index = 0x09;
pubKey19.mod = '9D912248DE0A4E39C1A7DDE3F6D2588992C1A4095AFBD1824D1BA74847F2BC4926D2EFD904B4B54954CD189A54C5D1179654F8F9B0D2AB5F0357EB642FEDA95D3912C6576945FAB897E7062CAA44A4AA06B8FE6E3DBA18AF6AE3738E30429EE9BE03427C9D64F695FA8CAB4BFE376853EA34AD1D76BFCAD15908C077FFE6DC5521ECEF5D278A96E26F57359FFAEDA19434B937F1AD999DC5C41EB11935B44C18100E857F431A4A5A6BB65114F174C2D7B59FDF237D6BB1DD0916E644D709DED56481477C75D95CDD68254615F7740EC07F330AC5D67BCD75BF23D28A140826C026DBDE971A37CD3EF9B8DF644AC385010501EFC6509D7A41';
pubKey19.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey19.hash = '1FF80A40173F52D7D27E0F26A146A1C8CCB29046';
pubKeys.push(pubKey19);

var pubKey20 = new emv.PubKeyRsa();
pubKey20.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey20.index = 0x08;
pubKey20.mod = 'D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0B';
pubKey20.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey20.hash = '20D213126955DE205ADC2FD2822BD22DE21CF9A8';
pubKeys.push(pubKey20);

var pubKey21 = new emv.PubKeyRsa();
pubKey21.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey21.index = 0x07;
pubKey21.mod = 'A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F';
pubKey21.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey21.hash = 'B4BC56CC4E88324932CBC643D6898F6FE593B172';
pubKeys.push(pubKey21);

var pubKey22 = new emv.PubKeyRsa();
pubKey22.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey22.index = 0x01;
pubKey22.mod = 'C696034213D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1228DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75';
pubKey22.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey22.hash = 'D34A6A776011C7E7CE3AEC5F03AD2F8CFC5503CC';
pubKeys.push(pubKey22);

var pubKey23 = new emv.PubKeyRsa();
pubKey23.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey23.index = 0x50;
pubKey23.mod = new Buffer([0xD1, 0x11, 0x97, 0x59, 0x00, 0x57, 0xB8, 0x41, 0x96, 0xC2, 0xF4, 0xD1, 0x1A, 0x8F, 0x3C, 0x05, 0x40, 0x8F, 0x42, 0x2A,
    0x35, 0xD7, 0x02, 0xF9, 0x01, 0x06, 0xEA, 0x5B, 0x01, 0x9B, 0xB2, 0x8A, 0xE6, 0x07, 0xAA, 0x9C, 0xDE, 0xBC, 0xD0, 0xD8,
    0x1A, 0x38, 0xD4, 0x8C, 0x7E, 0xBB, 0x00, 0x62, 0xD2, 0x87, 0x36, 0x9E, 0xC0, 0xC4, 0x21, 0x24, 0x24, 0x6A, 0xC3, 0x0D,
    0x80, 0xCD, 0x60, 0x2A, 0xB7, 0x23, 0x8D, 0x51, 0x08, 0x4D, 0xED, 0x46, 0x98, 0x16, 0x2C, 0x59, 0xD2, 0x5E, 0xAC, 0x1E,
    0x66, 0x25, 0x5B, 0x4D, 0xB2, 0x35, 0x25, 0x26, 0xEF, 0x09, 0x82, 0xC3, 0xB8, 0xAD, 0x3D, 0x1C, 0xCE, 0x85, 0xB0, 0x1D,
    0xB5, 0x78, 0x8E, 0x75, 0xE0, 0x9F, 0x44, 0xBE, 0x73, 0x61, 0x36, 0x6D, 0xEF, 0x9D, 0x1E, 0x13, 0x17, 0xB0, 0x5E, 0x5D,
    0x0F, 0xF5, 0x29, 0x0F, 0x88, 0xA0, 0xDB, 0x47]);
pubKey23.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey23);

var pubKey24 = new emv.PubKeyRsa();
pubKey24.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey24.index = 0x51;
pubKey24.mod = new Buffer([0xDB, 0x5F, 0xA2, 0x9D, 0x1F, 0xDA, 0x8C, 0x16, 0x34, 0xB0, 0x4D, 0xCC, 0xFF, 0x14, 0x8A, 0xBE, 0xE6, 0x3C, 0x77, 0x20,
    0x35, 0xC7, 0x98, 0x51, 0xD3, 0x51, 0x21, 0x07, 0x58, 0x6E, 0x02, 0xA9, 0x17, 0xF7, 0xC7, 0xE8, 0x85, 0xE7, 0xC4, 0xA7,
    0xD5, 0x29, 0x71, 0x0A, 0x14, 0x53, 0x34, 0xCE, 0x67, 0xDC, 0x41, 0x2C, 0xB1, 0x59, 0x7B, 0x77, 0xAA, 0x25, 0x43, 0xB9,
    0x8D, 0x19, 0xCF, 0x2C, 0xB8, 0x0C, 0x52, 0x2B, 0xDB, 0xEA, 0x0F, 0x1B, 0x11, 0x3F, 0xA2, 0xC8, 0x62, 0x16, 0xC8, 0xC6,
    0x10, 0xA2, 0xD5, 0x8F, 0x29, 0xCF, 0x33, 0x55, 0xCE, 0xB1, 0xBD, 0x3E, 0xF4, 0x10, 0xD1, 0xED, 0xD1, 0xF7, 0xAE, 0x0F,
    0x16, 0x89, 0x79, 0x79, 0xDE, 0x28, 0xC6, 0xEF, 0x29, 0x3E, 0x0A, 0x19, 0x28, 0x2B, 0xD1, 0xD7, 0x93, 0xF1, 0x33, 0x15,
    0x23, 0xFC, 0x71, 0xA2, 0x28, 0x80, 0x04, 0x68, 0xC0, 0x1A, 0x36, 0x53, 0xD1, 0x4C, 0x6B, 0x48, 0x51, 0xA5, 0xC0, 0x29,
    0x47, 0x8E, 0x75, 0x7F]);
pubKey24.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey24.hash = 'B9D248075A3F23B522FE45573E04374DC4995D71';
pubKeys.push(pubKey24);

var pubKey25 = new emv.PubKeyRsa();
pubKey25.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey25.index = 0x53;
pubKey25.mod = new Buffer([0xBC, 0xD8, 0x37, 0x21, 0xBE, 0x52, 0xCC, 0xCC, 0x4B, 0x64, 0x57, 0x32, 0x1F, 0x22, 0xA7, 0xDC, 0x76, 0x9F, 0x54, 0xEB,
    0x80, 0x25, 0x91, 0x3B, 0xE8, 0x04, 0xD9, 0xEA, 0xBB, 0xFA, 0x19, 0xB3, 0xD7, 0xC5, 0xD3, 0xCA, 0x65, 0x8D, 0x76, 0x8C,
    0xAF, 0x57, 0x06, 0x7E, 0xEC, 0x83, 0xC7, 0xE6, 0xE9, 0xF8, 0x1D, 0x05, 0x86, 0x70, 0x3E, 0xD9, 0xDD, 0xDA, 0xDD, 0x20,
    0x67, 0x5D, 0x63, 0x42, 0x49, 0x80, 0xB1, 0x0E, 0xB3, 0x64, 0xE8, 0x1E, 0xB3, 0x7D, 0xB4, 0x0E, 0xD1, 0x00, 0x34, 0x4C,
    0x92, 0x88, 0x86, 0xFF, 0x4C, 0xCC, 0x37, 0x20, 0x3E, 0xE6, 0x10, 0x6D, 0x5B, 0x59, 0xD1, 0xAC, 0x10, 0x2E, 0x2C, 0xD2,
    0xD7, 0xAC, 0x17, 0xF4, 0xD9, 0x6C, 0x39, 0x8E, 0x5F, 0xD9, 0x93, 0xEC, 0xB4, 0xFF, 0xDF, 0x79, 0xB1, 0x75, 0x47, 0xFF,
    0x9F, 0xA2, 0xAA, 0x8E, 0xEF, 0xD6, 0xCB, 0xDA, 0x12, 0x4C, 0xBB, 0x17, 0xA0, 0xF8, 0x52, 0x81, 0x46, 0x38, 0x71, 0x35,
    0xE2, 0x26, 0xB0, 0x05, 0xA4, 0x74, 0xB9, 0x06, 0x2F, 0xF2, 0x64, 0xD2, 0xFF, 0x8E, 0xFA, 0x36, 0x81, 0x4A, 0xA2, 0x95,
    0x00, 0x65, 0xB1, 0xB0, 0x4C, 0x0A, 0x1A, 0xE9, 0xB2, 0xF6, 0x9D, 0x4A, 0x4A, 0xA9, 0x79, 0xD6, 0xCE, 0x95, 0xFE, 0xE9,
    0x48, 0x5E, 0xD0, 0xA0, 0x3A, 0xEE, 0x9B, 0xD9, 0x53, 0xE8, 0x1C, 0xFD, 0x1E, 0xF6, 0xE8, 0x14, 0xDF, 0xD3, 0xC2, 0xCE,
    0x37, 0xAE, 0xFA, 0x38, 0xC1, 0xF9, 0x87, 0x73, 0x71, 0xE9, 0x1D, 0x6A, 0x5E, 0xB5, 0x9F, 0xDE, 0xDF, 0x75, 0xD3, 0x32,
    0x5F, 0xA3, 0xCA, 0x66, 0xCD, 0xFB, 0xA0, 0xE5, 0x71, 0x46, 0xCC, 0x78, 0x98, 0x18, 0xFF, 0x06, 0xBE, 0x5F, 0xCC, 0x50,
    0xAB, 0xD3, 0x62, 0xAE, 0x4B, 0x80, 0x99, 0x6D]);
pubKey25.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey25);

var pubKey26 = new emv.PubKeyRsa();
pubKey26.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey26.index = 0x54;
pubKey26.mod = new Buffer([0xC6, 0xDD, 0xC0, 0xB7, 0x64, 0x5F, 0x7F, 0x16, 0x28, 0x6A, 0xB7, 0xE4, 0x11, 0x66, 0x55, 0xF5,
    0x6D, 0xD0, 0xC9, 0x44, 0x76, 0x60, 0x40, 0xDC, 0x68, 0x66, 0x4D, 0xD9, 0x73, 0xBD, 0x3B, 0xFD,
    0x4C, 0x52, 0x5B, 0xCB, 0xB9, 0x52, 0x72, 0xB6, 0xB3, 0xAD, 0x9B, 0xA8, 0x86, 0x03, 0x03, 0xAD,
    0x08, 0xD9, 0xE8, 0xCC, 0x34, 0x4A, 0x40, 0x70, 0xF4, 0xCF, 0xB9, 0xEE, 0xAF, 0x29, 0xC8, 0xA3,
    0x46, 0x08, 0x50, 0xC2, 0x64, 0xCD, 0xA3, 0x9B, 0xBE, 0x3A, 0x7E, 0x7D, 0x08, 0xA6, 0x9C, 0x31,
    0xB5, 0xC8, 0xDD, 0x9F, 0x94, 0xDD, 0xBC, 0x92, 0x65, 0x75, 0x8C, 0x0E, 0x73, 0x99, 0xAD, 0xCF,
    0x43, 0x62, 0xCA, 0xEE, 0x45, 0x8D, 0x41, 0x4C, 0x52, 0xB4, 0x98, 0x27, 0x48, 0x81, 0xB1, 0x96,
    0xDA, 0xCC, 0xA7, 0x27, 0x3F, 0x68, 0x7F, 0x2A, 0x65, 0xFA, 0xEB, 0x80, 0x9D, 0x4B, 0x2A, 0xC1,
    0xD3, 0xD1, 0xEF, 0xB4, 0xF6, 0x49, 0x03, 0x22, 0x31, 0x8B, 0xD2, 0x96, 0xD1, 0x53, 0xB3, 0x07,
    0xA3, 0x28, 0x3A, 0xB4, 0xE5, 0xBE, 0x6E, 0xBD, 0x91, 0x03, 0x59, 0xA8, 0x56, 0x5E, 0xB9, 0xC4,
    0x36, 0x0D, 0x24, 0xBA, 0xAC, 0xA3, 0xDB, 0xFE, 0x39, 0x3F, 0x3D, 0x6C, 0x83, 0x0D, 0x60, 0x3C,
    0x6F, 0xC1, 0xE8, 0x34, 0x09, 0xDF, 0xCD, 0x80, 0xD3, 0xA3, 0x3B, 0xA2, 0x43, 0x81, 0x3B, 0xBB,
    0x4C, 0xEA, 0xF9, 0xCB, 0xAB, 0x6B, 0x74, 0xB0, 0x01, 0x16, 0xF7, 0x2A, 0xB2, 0x78, 0xA8, 0x8A,
    0x01, 0x1D, 0x70, 0x07, 0x1E, 0x06, 0xCA, 0xB1, 0x40, 0x64, 0x64, 0x38, 0xD9, 0x86, 0xD4, 0x82,
    0x81, 0x62, 0x4B, 0x85, 0xB3, 0xB2, 0xEB, 0xB9, 0xA6, 0xAB, 0x3B, 0xF2, 0x17, 0x8F, 0xCC, 0x30,
    0x11, 0xE7, 0xCA, 0xF2, 0x48, 0x97, 0xAE, 0x7D]);
pubKey26.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey26);

var pubKey27 = new emv.PubKeyRsa();
pubKey27.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey27.index = 0x96;
pubKey27.mod = new Buffer([0xB7, 0x45, 0x86, 0xD1, 0x9A, 0x20, 0x7B, 0xE6, 0x62, 0x7C, 0x5B, 0x0A, 0xAF, 0xBC, 0x44, 0xA2, 0xEC, 0xF5, 0xA2, 0x94, 0x2D, 0x3A, 0x26,
    0xCE, 0x19, 0xC4, 0xFF, 0xAE, 0xEE, 0x92, 0x05, 0x21, 0x86, 0x89, 0x22, 0xE8, 0x93, 0xE7, 0x83, 0x82, 0x25, 0xA3, 0x94, 0x7A, 0x26, 0x14,
    0x79, 0x6F, 0xB2, 0xC0, 0x62, 0x8C, 0xE8, 0xC1, 0x1E, 0x38, 0x25, 0xA5, 0x6D, 0x3B, 0x1B, 0xBA, 0xEF, 0x78, 0x3A, 0x5C, 0x6A, 0x81, 0xF3,
    0x6F, 0x86, 0x25, 0x39, 0x51, 0x26, 0xFA, 0x98, 0x3C, 0x52, 0x16, 0xD3, 0x16, 0x6D, 0x48, 0xAC, 0xDE, 0x8A, 0x43, 0x12, 0x12, 0xFF, 0x76,
    0x3A, 0x7F, 0x79, 0xD9, 0xED, 0xB7, 0xFE, 0xD7, 0x6B, 0x48, 0x5D, 0xE4, 0x5B, 0xEB, 0x82, 0x9A, 0x3D, 0x47, 0x30, 0x84, 0x8A, 0x36, 0x6D,
    0x33, 0x24, 0xC3, 0x02, 0x70, 0x32, 0xFF, 0x8D, 0x16, 0xA1, 0xE4, 0x4D, 0x8D]);
pubKey27.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey27);

var pubKey28 = new emv.PubKeyRsa();
pubKey28.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey28.index = 0x57;
pubKey28.mod = new Buffer([0x94, 0x2B, 0x7F, 0x2B, 0xA5, 0xEA, 0x30, 0x73, 0x12, 0xB6, 0x3D, 0xF7, 0x7C, 0x52, 0x43, 0x61,
    0x8A, 0xCC, 0x20, 0x02, 0xBD, 0x7E, 0xCB, 0x74, 0xD8, 0x21, 0xFE, 0x7B, 0xDC, 0x78, 0xBF, 0x28,
    0xF4, 0x9F, 0x74, 0x19, 0x0A, 0xD9, 0xB2, 0x3B, 0x97, 0x13, 0xB1, 0x40, 0xFF, 0xEC, 0x1F, 0xB4,
    0x29, 0xD9, 0x3F, 0x56, 0xBD, 0xC7, 0xAD, 0xE4, 0xAC, 0x07, 0x5D, 0x75, 0x53, 0x2C, 0x1E, 0x59,
    0x0B, 0x21, 0x87, 0x4C, 0x79, 0x52, 0xF2, 0x9B, 0x8C, 0x0F, 0x0C, 0x1C, 0xE3, 0xAE, 0xED, 0xC8,
    0xDA, 0x25, 0x34, 0x31, 0x23, 0xE7, 0x1D, 0xCF, 0x86, 0xC6, 0x99, 0x8E, 0x15, 0xF7, 0x56, 0xE3]);
pubKey28.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey28);

var pubKey29 = new emv.PubKeyRsa();
pubKey29.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey29.index = 0x58;
pubKey29.mod = new Buffer([0x99, 0x55, 0x2C, 0x4A, 0x1E, 0xCD, 0x68, 0xA0, 0x26, 0x01, 0x57, 0xFC, 0x41, 0x51, 0xB5, 0x99,
    0x28, 0x37, 0x44, 0x5D, 0x3F, 0xC5, 0x73, 0x65, 0xCA, 0x56, 0x92, 0xC8, 0x7B, 0xE3, 0x58, 0xCD,
    0xCD, 0xF2, 0xC9, 0x2F, 0xB6, 0x83, 0x75, 0x22, 0x84, 0x2A, 0x48, 0xEB, 0x11, 0xCD, 0xFF, 0xE2,
    0xFD, 0x91, 0x77, 0x0C, 0x72, 0x21, 0xE4, 0xAF, 0x62, 0x07, 0xC2, 0xDE, 0x40, 0x04, 0xC7, 0xDE,
    0xE1, 0xB6, 0x27, 0x6D, 0xC6, 0x2D, 0x52, 0xA8, 0x7D, 0x2C, 0xD0, 0x1F, 0xBF, 0x2D, 0xC4, 0x06,
    0x5D, 0xB5, 0x28, 0x24, 0xD2, 0xA2, 0x16, 0x7A, 0x06, 0xD1, 0x9E, 0x6A, 0x0F, 0x78, 0x10, 0x71,
    0xCD, 0xB2, 0xDD, 0x31, 0x4C, 0xB9, 0x44, 0x41, 0xD8, 0xDC, 0x0E, 0x93, 0x63, 0x17, 0xB7, 0x7B,
    0xF0, 0x6F, 0x51, 0x77, 0xF6, 0xC5, 0xAB, 0xA3, 0xA3, 0xBC, 0x6A, 0xA3, 0x02, 0x09, 0xC9, 0x72,
    0x60, 0xB7, 0xA1, 0xAD, 0x3A, 0x19, 0x2C, 0x9B, 0x8C, 0xD1, 0xD1, 0x53, 0x57, 0x0A, 0xFC, 0xC8,
    0x7C, 0x3C, 0xD6, 0x81, 0xD1, 0x3E, 0x99, 0x7F, 0xE3, 0x3B, 0x39, 0x63, 0xA0, 0xA1, 0xC7, 0x97,
    0x72, 0xAC, 0xF9, 0x91, 0x03, 0x3E, 0x1B, 0x83, 0x97, 0xAD, 0x03, 0x41, 0x50, 0x0E, 0x48, 0xA2,
    0x47, 0x70, 0xBC, 0x4C, 0xBE, 0x19, 0xD2, 0xCC, 0xF4, 0x19, 0x50, 0x4F, 0xDB, 0xF0, 0x38, 0x9B,
    0xC2, 0xF2, 0xFD, 0xCD, 0x4D, 0x44, 0xE6, 0x1F]);
pubKey29.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey29);

var pubKey30 = new emv.PubKeyRsa();
pubKey30.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey30.index = 0x94;
pubKey30.mod = new Buffer([0xD1, 0xBE, 0x39, 0x61, 0x5F, 0x39, 0x5A, 0xC9, 0x33, 0x7E, 0x33, 0x07, 0xAA, 0x5A, 0x7A, 0xC3, 0x5E, 0xAE, 0x00, 0x36, 0xBF, 0x20, 0xB9,
    0x2F, 0x9A, 0x45, 0xD1, 0x90, 0xB2, 0xF4, 0x61, 0x6A, 0xBF, 0x9D, 0x34, 0x0C, 0xBF, 0x5F, 0xBB, 0x3A, 0x2B, 0x94, 0xBD, 0x8F, 0x2F, 0x97,
    0x7C, 0x0A, 0x10, 0xB9, 0x0E, 0x59, 0xD4, 0x20, 0x1A, 0xA3, 0x26, 0x69, 0xE8, 0xCB, 0xE7, 0x53, 0xF5, 0x36, 0x11, 0x9D, 0xF4, 0xFB, 0x5E,
    0x63, 0xCE, 0xD8, 0x7F, 0x11, 0x53, 0xCE, 0x91, 0x4B, 0x12, 0x4F,
    0x3E, 0x6B, 0x64, 0x8C, 0xD5, 0xC9, 0x76, 0x55, 0xF7, 0xAB, 0x4D, 0xF6, 0x26, 0x07, 0xC9, 0x5D, 0xA5, 0x05, 0x17, 0xAB, 0x8B, 0xE3, 0x83,
    0x66, 0x72, 0xD1, 0xC7, 0x1B, 0xCD, 0xE9, 0xBA, 0x72, 0x93, 0xFF, 0x34, 0x82, 0xF1, 0x24, 0xF8, 0x66, 0x91, 0x13, 0x0A, 0xB0, 0x81, 0x77,
    0xB0, 0x2F, 0x45, 0x9C, 0x02, 0x5A, 0x1F, 0x3D, 0xFF, 0xE0, 0x88, 0x4C, 0xE7, 0x81, 0x22, 0x54, 0x2E, 0xA1, 0xC8, 0xEA, 0x09, 0x2B, 0x55,
    0x2B, 0x58, 0x69, 0x07, 0xC8, 0x3A, 0xD6, 0x5E, 0x0C, 0x6F, 0x91,
    0xA4, 0x00, 0xE4, 0x85, 0xE1, 0x11, 0x92, 0xAA, 0x4C, 0x17, 0x1C, 0x5A, 0x1E, 0xF5, 0x63, 0x81, 0xF4, 0xD0, 0x91, 0xCC, 0x7E, 0xF6, 0xBD,
    0x86, 0x04, 0xCB, 0xC4, 0xC7, 0x4D, 0x5D, 0x77, 0xFF, 0xA0, 0x7B, 0x64, 0x1D, 0x53, 0x99, 0x8C, 0xDB, 0x5C, 0x21, 0xB7, 0xBC, 0x65, 0xE0,
    0x82, 0xA6, 0x51, 0x3F, 0x42, 0x4A, 0x4B, 0x25, 0x2E, 0x0D, 0x77, 0xFA, 0x40, 0x56, 0x98, 0x6A, 0x0A, 0xB0, 0xCD, 0xA6, 0x15, 0x5E, 0xD9,
    0xA8, 0x83, 0xC6, 0x9C, 0xC2, 0x99, 0x2D, 0x49, 0xEC, 0xBD, 0x47,
    0x97, 0xDD, 0x28, 0x64, 0xFF, 0xC9, 0x6B, 0x8D]);
pubKey30.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey30);

var pubKey31 = new emv.PubKeyRsa();
pubKey31.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x03]);
pubKey31.index = 0x97;
pubKey31.mod = new Buffer([0xAF, 0x07, 0x54, 0xEA, 0xED, 0x97, 0x70, 0x43, 0xAB, 0x6F, 0x41, 0xD6, 0x31, 0x2A, 0xB1, 0xE2, 0x2A, 0x68, 0x09, 0x17, 0x5B, 0xEB, 0x28,
    0xE7, 0x0D, 0x5F, 0x99, 0xB2, 0xDF, 0x18, 0xCA, 0xE7, 0x35, 0x19, 0x34, 0x1B, 0xBB, 0xD3, 0x27, 0xD0,
    0xB8, 0xBE, 0x9D, 0x4D, 0x0E, 0x15, 0xF0, 0x7D, 0x36, 0xEA, 0x3E, 0x3A, 0x05, 0xC8, 0x92, 0xF5, 0xB1, 0x9A, 0x3E, 0x9D, 0x34, 0x13, 0xB0,
    0xD9, 0x7E, 0x7A, 0xD1, 0x0A, 0x5F, 0x5D, 0xE8, 0xE3, 0x88, 0x60, 0xC0, 0xAD, 0x00, 0x4B, 0x1E, 0x06, 0xF4, 0x04, 0x0C, 0x29, 0x5A, 0xCB,
    0x45, 0x7A, 0x78, 0x85, 0x51, 0xB6, 0x12, 0x7C, 0x0B, 0x29]);
pubKey31.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey31);

var pubKey31 = new emv.PubKeyRsa();
pubKey31.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x65]);
pubKey31.index = 0x02;
pubKey31.mod = new Buffer([0xBB, 0x7F, 0x51, 0x98, 0x3F, 0xD8, 0x70, 0x7F, 0xD6, 0x22, 0x7C, 0x23, 0xDE, 0xF5, 0xD5, 0x37,
    0x7A, 0x5A, 0x73, 0x7C, 0xEF, 0x3C, 0x52, 0x52, 0xE5, 0x78, 0xEF, 0xE1, 0x36, 0xDF, 0x87, 0xB5,
    0x04, 0x73, 0xF9, 0x34, 0x1F, 0x16, 0x40, 0xC8, 0xD2, 0x58, 0x03, 0x4E, 0x14, 0xC1, 0x69, 0x93,
    0xFC, 0xE6, 0xC6, 0xB8, 0xC3, 0xCE, 0xEB, 0x65, 0xFC, 0x8F, 0xBC, 0xD8, 0xEB, 0x77, 0xB3, 0xB0,
    0x5A, 0xC7, 0xC4, 0xD0, 0x9E, 0x0F, 0xA1, 0xBA, 0x2E, 0xFE, 0x87, 0xD3, 0x18, 0x4D, 0xB6, 0x71,
    0x8A, 0xE4, 0x1A, 0x7C, 0xAD, 0x89, 0xB8, 0xDC, 0xE0, 0xFE, 0x80, 0xCE, 0xB5, 0x23, 0xD5, 0xD6,
    0x47, 0xF9, 0xDB, 0x58, 0xA3, 0x1D, 0x2E, 0x71, 0xAC, 0x67, 0x7E, 0x67, 0xFA, 0x6E, 0x75, 0x82,
    0x07, 0x36, 0xC9, 0x89, 0x37, 0x61, 0xEE, 0x4A, 0xCD, 0x11, 0xF3, 0x1D, 0xBD, 0xC3, 0x49, 0xEF]);
pubKey31.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey31);

var pubKey32 = new emv.PubKeyRsa();
pubKey32.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x65]);
pubKey32.index = 0x03;
pubKey32.mod = new Buffer([0xC9, 0xE6, 0xC1, 0xF3, 0xC6, 0x94, 0x9A, 0x8A, 0x42, 0xA9,
    0x1F, 0x8D, 0x02, 0x24, 0x13, 0x2B, 0x28, 0x65, 0xE6, 0xD9,
    0x53, 0xA5, 0xB5, 0xA5, 0x4C, 0xFF, 0xB0, 0x41, 0x24, 0x39,
    0xD5, 0x4A, 0xEB, 0xA7, 0x9E, 0x9B, 0x39, 0x9A, 0x6C, 0x10,
    0x46, 0x84, 0xDF, 0x3F, 0xB7, 0x27, 0xC7, 0xF5, 0x59, 0x84,
    0xDB, 0x7A, 0x45, 0x0E, 0x6A, 0xA9, 0x17, 0xE1, 0x10, 0xA7,
    0xF2, 0x34, 0x3A, 0x00, 0x24, 0xD2, 0x78, 0x5D, 0x9E, 0xBE,
    0x09, 0xF6, 0x01, 0xD5, 0x92, 0x36, 0x2F, 0xDB, 0x23, 0x77,
    0x00, 0xB5, 0x67, 0xBA, 0x14, 0xBB, 0xE2, 0xA6, 0xD3, 0xD2,
    0x3C, 0xF1, 0x27, 0x0B, 0x3D, 0xD8, 0x22, 0xB5, 0x49, 0x65,
    0x49, 0xBF, 0x88, 0x49, 0x48, 0xF5, 0x5A, 0x0D, 0x30, 0x83,
    0x48, 0xC4, 0xB7, 0x23, 0xBA, 0xFB, 0x6A, 0x7F, 0x39, 0x75,
    0xAC, 0x39, 0x7C, 0xAD, 0x3C, 0x5D, 0x0F, 0xC2, 0xD1, 0x78,
    0x71, 0x6F, 0x5E, 0x8E, 0x79, 0xE7, 0x5B, 0xEB, 0x1C, 0x84,
    0xFA, 0x20, 0x2F, 0x80, 0xE6, 0x80, 0x69, 0xA9, 0x84, 0xE0,
    0x08, 0x70, 0x6B, 0x30, 0xC2, 0x12, 0x30, 0x54, 0x56, 0x20,
    0x15, 0x40, 0x78, 0x79, 0x25, 0xE8, 0x6A, 0x8B, 0x28, 0xB1,
    0x29, 0xA1, 0x1A, 0xF2, 0x04, 0xB3, 0x87, 0xCB, 0x6E, 0xE4,
    0x3D, 0xB5, 0x3D, 0x15, 0xA4, 0x6E, 0x13, 0x90, 0x1B, 0xEB,
    0xD5, 0xCE, 0xCF, 0x48, 0x54, 0x25, 0x1D, 0x9E, 0x98, 0x75,
    0xB1, 0x6E, 0x82, 0xAD, 0x1C, 0x59, 0x38, 0xA9, 0x72, 0x84,
    0x2C, 0x8F, 0x1A, 0x42, 0xEB, 0xB5, 0xAE, 0x53, 0x36, 0xB0,
    0x4F, 0xF3, 0xDA, 0x8B, 0x8D, 0xFB, 0xE6, 0x06, 0xFC, 0xA8,
    0xB9, 0x08, 0x4E, 0xE0, 0x5B, 0xF6, 0x79, 0x50, 0xBA, 0x89,
    0x89, 0x7C, 0xD0, 0x89, 0xF9, 0x24, 0xDB, 0xCD]);
pubKey32.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey32);

var pubKey33 = new emv.PubKeyRsa();
pubKey33.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey33.index = 0x02;
pubKey33.mod = new Buffer([0xA3, 0x76, 0x7A, 0xBD, 0x1B, 0x6A, 0xA6, 0x9D, 0x7F, 0x3F, 0xBF, 0x28, 0xC0, 0x92, 0xDE, 0x9E, 0xD1, 0xE6, 0x58, 0xBA,
    0x5F, 0x09, 0x09, 0xAF, 0x7A, 0x1C, 0xCD, 0x90, 0x73, 0x73, 0xB7, 0x21, 0x0F, 0xDE, 0xB1, 0x62, 0x87, 0xBA, 0x8E, 0x78,
    0xE1, 0x52, 0x9F, 0x44, 0x39, 0x76, 0xFD, 0x27, 0xF9, 0x91, 0xEC, 0x67, 0xD9, 0x5E, 0x5F, 0x4E, 0x96, 0xB1, 0x27, 0xCA,
    0xB2, 0x39, 0x6A, 0x94, 0xD6, 0xE4, 0x5C, 0xDA, 0x44, 0xCA, 0x4C, 0x48, 0x67, 0x57, 0x0D, 0x6B, 0x07, 0x54, 0x2F, 0x8D,
    0x4B, 0xF9, 0xFF, 0x97, 0x97, 0x5D, 0xB9, 0x89, 0x15, 0x15, 0xE6, 0x6F, 0x52, 0x5D, 0x2B, 0x3C, 0xBE, 0xB6, 0xD6, 0x62,
    0xBF, 0xB6, 0xC3, 0xF3, 0x38, 0xE9, 0x3B, 0x02, 0x14, 0x2B, 0xFC, 0x44, 0x17, 0x3A, 0x37, 0x64, 0xC5, 0x6A, 0xAD, 0xD2,
    0x02, 0x07, 0x5B, 0x26, 0xDC, 0x2F, 0x9F, 0x7D, 0x7A, 0xE7, 0x4B, 0xD7, 0xD0, 0x0F, 0xD0, 0x5E, 0xE4, 0x30, 0x03, 0x26,
    0x63, 0xD2, 0x7A, 0x57]);
pubKey33.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey33);

var pubKey34 = new emv.PubKeyRsa();
pubKey34.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey34.index = 0x03;
pubKey34.mod = new Buffer([0xB0, 0x62, 0x7D, 0xEE, 0x87, 0x86, 0x4F, 0x9C, 0x18, 0xC1, 0x3B, 0x9A, 0x1F, 0x02, 0x54, 0x48, 0xBF, 0x13, 0xC5, 0x83,
    0x80, 0xC9, 0x1F, 0x4C, 0xEB, 0xA9, 0xF9, 0xBC, 0xB2, 0x14, 0xFF, 0x84, 0x14, 0xE9, 0xB5, 0x9D, 0x6A, 0xBA, 0x10, 0xF9,
    0x41, 0xC7, 0x33, 0x17, 0x68, 0xF4, 0x7B, 0x21, 0x27, 0x90, 0x7D, 0x85, 0x7F, 0xA3, 0x9A, 0xAF, 0x8C, 0xE0, 0x20, 0x45,
    0xDD, 0x01, 0x61, 0x9D, 0x68, 0x9E, 0xE7, 0x31, 0xC5, 0x51, 0x15, 0x9B, 0xE7, 0xEB, 0x2D, 0x51, 0xA3, 0x72, 0xFF, 0x56,
    0xB5, 0x56, 0xE5, 0xCB, 0x2F, 0xDE, 0x36, 0xE2, 0x30, 0x73, 0xA4, 0x4C, 0xA2, 0x15, 0xD6, 0xC2, 0x6C, 0xA6, 0x88, 0x47,
    0xB3, 0x88, 0xE3, 0x95, 0x20, 0xE0, 0x02, 0x6E, 0x62, 0x29, 0x4B, 0x55, 0x7D, 0x64, 0x70, 0x44, 0x0C, 0xA0, 0xAE, 0xFC,
    0x94, 0x38, 0xC9, 0x23, 0xAE, 0xC9, 0xB2, 0x09, 0x8D, 0x6D, 0x3A, 0x1A, 0xF5, 0xE8, 0xB1, 0xDE, 0x36, 0xF4, 0xB5, 0x30,
    0x40, 0x10, 0x9D, 0x89, 0xB7, 0x7C, 0xAF, 0xAF, 0x70, 0xC2, 0x6C, 0x60, 0x1A, 0xBD, 0xF5, 0x9E, 0xEC, 0x0F, 0xDC, 0x8A,
    0x99, 0x08, 0x91, 0x40, 0xCD, 0x2E, 0x81, 0x7E, 0x33, 0x51, 0x75, 0xB0, 0x3B, 0x7A, 0xA3, 0x3D]);
pubKey34.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey34);

var pubKey35 = new emv.PubKeyRsa();
pubKey35.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey35.index = 0x05;
pubKey35.mod = '97CF8BAD30CAE0F9A89285454DDDE967AAFBCD4BC0B78F29ECB1005286F15F6D7532A9C476607C73FF7424316DFC741894AA52EDBAF909719C7B53448343B45CF2F00A8ABFB78CEEBE848933AAED97DBE84F0730F34FB1AA1528D3D6EC75B73252A30D0C717518BE36458ADD0FBF854C65497F3F54084154B60F51561361EE8E85F742A54005524CB00FEBC334276E0E63DAD86C079A9A3DF5DD32BECADE1AB2B71F5F0A0E95A4000D01F1044A578AAD92E9FDE92E3C6AA3DCD4913DFA5552537E7DE75E241FAED455D76CB8FCAFEED3FD6DAB24D7A9C32852F866C751D7710F494A0DF11B67FAECDD87A9A4E2CC44F6F27E46E3C0CCCD0F';
pubKey34.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey35);

var pubKey36 = new emv.PubKeyRsa();
pubKey36.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey36.index = 0x08;
pubKey36.mod = new Buffer([0xB6, 0x16, 0x45, 0xED, 0xFD, 0x54, 0x98, 0xFB, 0x24, 0x64, 0x44, 0x03, 0x7A, 0x0F, 0xA1, 0x8C,
    0x0F, 0x10, 0x1E, 0xBD, 0x8E, 0xFA, 0x54, 0x57, 0x3C, 0xE6, 0xE6, 0xA7, 0xFB, 0xF6, 0x3E, 0xD2,
    0x1D, 0x66, 0x34, 0x08, 0x52, 0xB0, 0x21, 0x1C, 0xF5, 0xEE, 0xF6, 0xA1, 0xCD, 0x98, 0x9F, 0x66,
    0xAF, 0x21, 0xA8, 0xEB, 0x19, 0xDB, 0xD8, 0xDB, 0xC3, 0x70, 0x6D, 0x13, 0x53, 0x63, 0xA0, 0xD6,
    0x83, 0xD0, 0x46, 0x30, 0x4F, 0x5A, 0x83, 0x6B, 0xC1, 0xBC, 0x63, 0x28, 0x21, 0xAF, 0xE7, 0xA2,
    0xF7, 0x5D, 0xA3, 0xC5, 0x0A, 0xC7, 0x4C, 0x54, 0x5A, 0x75, 0x45, 0x62, 0x20, 0x41, 0x37, 0x16,
    0x96, 0x63, 0xCF, 0xCC, 0x0B, 0x06, 0xE6, 0x7E, 0x21, 0x09, 0xEB, 0xA4, 0x1B, 0xC6, 0x7F, 0xF2,
    0x0C, 0xC8, 0xAC, 0x80, 0xD7, 0xB6, 0xEE, 0x1A, 0x95, 0x46, 0x5B, 0x3B, 0x26, 0x57, 0x53, 0x3E,
    0xA5, 0x6D, 0x92, 0xD5, 0x39, 0xE5, 0x06, 0x43, 0x60, 0xEA, 0x48, 0x50, 0xFE, 0xD2, 0xD1, 0xBF]);
pubKey36.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey36);

var pubKey37 = new emv.PubKeyRsa();
pubKey37.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey37.index = 0x80;
pubKey37.mod = new Buffer([0xCC, 0xDB, 0xA6, 0x86, 0xE2, 0xEF, 0xB8, 0x4C, 0xE2, 0xEA, 0x01, 0x20, 0x9E, 0xEB, 0x53, 0xBE,
    0xF2, 0x1A, 0xB6, 0xD3, 0x53, 0x27, 0x4F, 0xF8, 0x39, 0x1D, 0x70, 0x35, 0xD7, 0x6E, 0x21, 0x56,
    0xCA, 0xED, 0xD0, 0x75, 0x10, 0xE0, 0x7D, 0xAF, 0xCA, 0xCA, 0xBB, 0x7C, 0xCB, 0x09, 0x50, 0xBA,
    0x2F, 0x0A, 0x3C, 0xEC, 0x31, 0x3C, 0x52, 0xEE, 0x6C, 0xD0, 0x9E, 0xF0, 0x04, 0x01, 0xA3, 0xD6,
    0xCC, 0x5F, 0x68, 0xCA, 0x5F, 0xCD, 0x0A, 0xC6, 0x13, 0x21, 0x41, 0xFA, 0xFD, 0x1C, 0xFA, 0x36,
    0xA2, 0x69, 0x2D, 0x02, 0xDD, 0xC2, 0x7E, 0xDA, 0x4C, 0xD5, 0xBE, 0xA6, 0xFF, 0x21, 0x91, 0x3B,
    0x51, 0x3C, 0xE7, 0x8B, 0xF3, 0x3E, 0x68, 0x77, 0xAA, 0x5B, 0x60, 0x5B, 0xC6, 0x9A, 0x53, 0x4F,
    0x37, 0x77, 0xCB, 0xED, 0x63, 0x76, 0xBA, 0x64, 0x9C, 0x72, 0x51, 0x6A, 0x7E, 0x16, 0xAF, 0x85]);
pubKey37.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey37);


var pubKey38 = new emv.PubKeyRsa();
pubKey38.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey38.index = 0x61;
pubKey38.mod = '834D2A387C5A5F176EF3E66CAAF83F194B15AAD2470C78C77D6EB38EDAE3A2F9BA1623F6A58C892CC925632DFF48CE954B21A53E1F1E4366BE403C279B90027CBC72605DB6C79049B8992CB4912EFA270BECAB3A7CEFE05BFA46E4C7BBCF7C7A173BD988D989B32CB79FAC8E35FBE1860E7EA9F238A92A3593552D03D1E38601';
pubKey38.exponent = new Buffer([0x03]);
pubKey38.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey38);

var pubKey39 = new emv.PubKeyRsa();
pubKey39.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey39.index = 0x62;
pubKey39.mod = 'B5CDD1E5368819FC3EA65B80C68117BBC29F9096EBD217269B583B0745E0C16433D54B8EF387B1E6CDDAED4923C39E370E5CADFE041773023A6BC0A033B0031B0048F18AC159773CB6695EE99F551F414883FB05E52640E893F4816082241D7BFA3640960003AD7517895C50E184AA956367B7BFFC6D8616A7B57E2D447AB3E1';
pubKey39.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey39.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey39);

var pubKey40 = new emv.PubKeyRsa();
pubKey40.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey40.index = 0x63;
pubKey40.mod = '867ECA26A57472DEFB6CA94289312BA39C63052518DC480B6ED491ACC37C028846F4D7B79AFAEEFA07FB011DAA46C06021E932D501BF52F2834ADE3AC7689E94B248B28F3FE2803669DEDA000988DA1249F9A891558A05A1E5A7BD2C282FE18D204189A9994D4ADD86C0CE50952ED8BCEC0CE633679188285E51E1BED840FCBFC10953939AF49DB90048912E48B44181';
pubKey40.exponent = new Buffer([0x03]);
pubKey40.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey40);

var pubKey41 = new emv.PubKeyRsa();
pubKey41.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey41.index = 0x64;
pubKey41.mod = '91123ECF0230E3CB245C88DDFA3EE57BC58ED00B367B3875FCB79548872680F601E8C839AC0721BAB3B89ED21607281C8919BF726266EAB848502AD874B5107A4E654EF6D37773343F461435C86E4A8F866FB18C7CBA497B426290C38D196E2AFF33C0906F9296F297E156DC602A5E653CA1168F1109261114BF7BE8127A3E8007191830134299395CE2B322228667B76E072EB7FD5D0FB3A83E8AD1D7F6FD81';
pubKey41.exponent = new Buffer([0x03]);
pubKey41.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey41);

var pubKey42 = new emv.PubKeyRsa();
pubKey42.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey42.index = 0x65;
pubKey42.mod = '81BA1E6B9F671CFC848CA2ACD8E17AF406B4D329D1ECA5D01BC094A87C30AF49867944C632E8185074655FA535AD8CA42A83B41AAAEA859F432FA0B818E72DC07ED3F77FB318A475A261C0760A156E5DDC157AE8B79BA72D89D69FFF754619E928F1516A2A72C0F86B09B8EA25F86DC5A48EBC5A16F83FBA8FC4E3A98278912249F4E079BCBC06E7BED9AED397879D279ED91925394901260949BCCE6FA1169798A2715DAE32988BEFBE9621AE15E0C1';
pubKey42.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey42.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey42);

var pubKey43 = new emv.PubKeyRsa();
pubKey43.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey43.index = 0x66;
pubKey43.mod = '7F5A3945794D6B15F5F26B4A21A63A5EF35540D8C8C099151F2279780A5C18A317703C98632E804D25576A7B460C05061E03975E50FBD7495B3ADC8E425E53DF76FA40B035E87F69ABF8765A52523F3B1A39B19528B002239015FADBA5921051';
pubKey43.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey43.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey43);

var pubKey44 = new emv.PubKeySm();
pubKey44.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey44.index = 0x57;
pubKey44.mod = 'E8105E77861FD2EB727C84E36D3D4A5666BD0ADCE8781F0145D3D82D72B92748E22D5404C6C41F3EC8B790DE2F61CF29FAECB168C79F5C8666762D53CC26A460';
pubKey44.expDate = '20201231';
pubKeys.push(pubKey44);

var pubKey45 = new emv.PubKeySm();
pubKey45.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey45.index = 0x58;
pubKey45.mod = 'FFC2B1513320C275411DBADD2188203F7B62519F8C7BA98EF8AA9FD6D2E475984E383C3E12784B42B066960EEA0C8FC8099E14128055D67A666CCA5A058C26A4';
pubKey45.expDate = '20201231';
pubKeys.push(pubKey45);

var pubKey46 = new emv.PubKeyRsa();
pubKey46.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey46.index = 0x85;
pubKey46.mod = 'C9242EC6030F10E5225E722AA17D9DC894299233AEC3219B950D4F243AF530FA13E3A31AFAA0D4BF4DE562B6B4C3108AEBBC6CB080F90770D532F241BC153641E1BF72F9DC1B08933B9BF77403F6A0FB5777BAA4C9BE91574BBBFB521342A20386790512221F477FBC53FF1B6533A015815435410EC272F0A34EA0735C43967D7E46FBA766EC00CED59B6715E3412D6FB8A934BF9D1497A24A6252C52D7586FD66A450FB5D2B4484EC923061439622BC0535316CD4231C13C627BF4D2EDE102C802464658F1B9D7FF23A3698510FA90D0C3164942FB359255CD823CB2635B3F167FBDFC900641B970D602A2771A7F4F94DF6D34BE8BBBB2669012D';
pubKey46.exponent = new Buffer([0x03]);
pubKey46.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey46);

var pubKey47 = new emv.PubKeyRsa();
pubKey47.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey47.index = 0x84;
pubKey47.mod = 'F9EA5503CFE43038596C720645A94E0154793DE73AE5A935D1FB9D0FE77286B61261E3BB1D3DFEC547449992E2037C01FF4EFB88DA8A82F30FEA3198D5D1675247A1626E9CFFB4CD9E31399990E43FCA77C744A93685A260A20E6A607F3EE3FAE2ABBE99678C9F19DFD2D8EA76789239D13369D7D2D56AF3F2793068950B5B808C462571662D4364B30A2582959DB238333BADACB442F9516B5C336C8A613FE014B7D773581AE10FDF7BDB2669012D';
pubKey47.exponent = new Buffer([0x03]);
pubKey47.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey47);

var pubKey48 = new emv.PubKeyRsa();
pubKey48.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey48.index = 0xC0;
pubKey48.mod = 'C7CDB6F2A3FE80A8834CDDDD326E1082AA2288F47C464D57B34718193431711A44119148055044CFE3313708BED0C98E1C589B0F53CF6D7E829FCD906D21A90FD4CB6BAF13110C4685107C27E00981DB29DC0AC186E6D701577F23865626244E1F9B2CD1DDFCB9E899B41F5084D8CCC178A7C3F4546CF93187106FAB055A7AC67DF62E778CB88823BA58CF7546C2B09F';
pubKey48.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey48.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey48);

var pubKey49 = new emv.PubKeyRsa();
pubKey49.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey49.index = 0xC1;
pubKey49.mod = '92F083CBE46F8DCC0C04E498BA9952BA9D4C09C80DD277E579F07E45772846FA43DD3AB31CC6B08DD18695715949FB108E53A071D393A7FDDBF9C5FB0B0507138797317480FC48D633ED38B401A451443AD7F15FACDA45A62ABE24FF6343ADD0909EA8389348E54E26F842880D1A69F9214368BA30C18DE5C5E0CB9253B5ABC55FB6EF0A738D927494A30BBF82E340285363B6FAA15673829DBB210E710DA58EE9E578E7CE55DC812AB7D6DCCE0E3B1AE179D664F3356EB951E3C91A1CBBF6A7CA8D0C7EC9C6AF7A4941C5051099B9784E56C9162067B8C3B15C5FA4480A645CD2526A69C80BA8EF361BE2AA9417DEFCE35B62B0C9CF097D';
pubKey49.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey49.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey49);

var pubKey50 = new emv.PubKeyRsa();
pubKey50.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey50.index = 0x87;
pubKey50.mod = new Buffer([0x94, 0x2B, 0x7F, 0x2B, 0xA5, 0xEA, 0x30, 0x73, 0x12, 0xB6, 0x3D, 0xF7, 0x7C, 0x52, 0x43, 0x61,
    0x8A, 0xCC, 0x20, 0x02, 0xBD, 0x7E, 0xCB, 0x74, 0xD8, 0x21, 0xFE, 0x7B, 0xDC, 0x78, 0xBF, 0x28,
    0xF4, 0x9F, 0x74, 0x19, 0x0A, 0xD9, 0xB2, 0x3B, 0x97, 0x13, 0xB1, 0x40, 0xFF, 0xEC, 0x1F, 0xB4,
    0x29, 0xD9, 0x3F, 0x56, 0xBD, 0xC7, 0xAD, 0xE4, 0xAC, 0x07, 0x5D, 0x75, 0x53, 0x2C, 0x1E, 0x59,
    0x0B, 0x21, 0x87, 0x4C, 0x79, 0x52, 0xF2, 0x9B, 0x8C, 0x0F, 0x0C, 0x1C, 0xE3, 0xAE, 0xED, 0xC8,
    0xDA, 0x25, 0x34, 0x31, 0x23, 0xE7, 0x1D, 0xCF, 0x86, 0xC6, 0x99, 0x8E, 0x15, 0xF7, 0x56, 0xE3]);
pubKey50.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey50);

var pubKey51 = new emv.PubKeyRsa();
pubKey51.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey51.index = 0x88;
pubKey51.mod = new Buffer([0x99, 0x55, 0x2C, 0x4A, 0x1E, 0xCD, 0x68, 0xA0, 0x26, 0x01, 0x57, 0xFC, 0x41, 0x51, 0xB5, 0x99,
    0x28, 0x37, 0x44, 0x5D, 0x3F, 0xC5, 0x73, 0x65, 0xCA, 0x56, 0x92, 0xC8, 0x7B, 0xE3, 0x58, 0xCD,
    0xCD, 0xF2, 0xC9, 0x2F, 0xB6, 0x83, 0x75, 0x22, 0x84, 0x2A, 0x48, 0xEB, 0x11, 0xCD, 0xFF, 0xE2,
    0xFD, 0x91, 0x77, 0x0C, 0x72, 0x21, 0xE4, 0xAF, 0x62, 0x07, 0xC2, 0xDE, 0x40, 0x04, 0xC7, 0xDE,
    0xE1, 0xB6, 0x27, 0x6D, 0xC6, 0x2D, 0x52, 0xA8, 0x7D, 0x2C, 0xD0, 0x1F, 0xBF, 0x2D, 0xC4, 0x06,
    0x5D, 0xB5, 0x28, 0x24, 0xD2, 0xA2, 0x16, 0x7A, 0x06, 0xD1, 0x9E, 0x6A, 0x0F, 0x78, 0x10, 0x71,
    0xCD, 0xB2, 0xDD, 0x31, 0x4C, 0xB9, 0x44, 0x41, 0xD8, 0xDC, 0x0E, 0x93, 0x63, 0x17, 0xB7, 0x7B,
    0xF0, 0x6F, 0x51, 0x77, 0xF6, 0xC5, 0xAB, 0xA3, 0xA3, 0xBC, 0x6A, 0xA3, 0x02, 0x09, 0xC9, 0x72,
    0x60, 0xB7, 0xA1, 0xAD, 0x3A, 0x19, 0x2C, 0x9B, 0x8C, 0xD1, 0xD1, 0x53, 0x57, 0x0A, 0xFC, 0xC8,
    0x7C, 0x3C, 0xD6, 0x81, 0xD1, 0x3E, 0x99, 0x7F, 0xE3, 0x3B, 0x39, 0x63, 0xA0, 0xA1, 0xC7, 0x97,
    0x72, 0xAC, 0xF9, 0x91, 0x03, 0x3E, 0x1B, 0x83, 0x97, 0xAD, 0x03, 0x41, 0x50, 0x0E, 0x48, 0xA2,
    0x47, 0x70, 0xBC, 0x4C, 0xBE, 0x19, 0xD2, 0xCC, 0xF4, 0x19, 0x50, 0x4F, 0xDB, 0xF0, 0x38, 0x9B,
    0xC2, 0xF2, 0xFD, 0xCD, 0x4D, 0x44, 0xE6, 0x1F]);
pubKey51.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey51);

var pubKey52 = new emv.PubKeyRsa();
pubKey52.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey52.index = 0x53;
pubKey52.mod = new Buffer([0xBC, 0xD8, 0x37, 0x21, 0xBE, 0x52, 0xCC, 0xCC, 0x4B, 0x64, 0x57, 0x32, 0x1F, 0x22, 0xA7, 0xDC, 0x76, 0x9F, 0x54, 0xEB,
    0x80, 0x25, 0x91, 0x3B, 0xE8, 0x04, 0xD9, 0xEA, 0xBB, 0xFA, 0x19, 0xB3, 0xD7, 0xC5, 0xD3, 0xCA, 0x65, 0x8D, 0x76, 0x8C,
    0xAF, 0x57, 0x06, 0x7E, 0xEC, 0x83, 0xC7, 0xE6, 0xE9, 0xF8, 0x1D, 0x05, 0x86, 0x70, 0x3E, 0xD9, 0xDD, 0xDA, 0xDD, 0x20,
    0x67, 0x5D, 0x63, 0x42, 0x49, 0x80, 0xB1, 0x0E, 0xB3, 0x64, 0xE8, 0x1E, 0xB3, 0x7D, 0xB4, 0x0E, 0xD1, 0x00, 0x34, 0x4C,
    0x92, 0x88, 0x86, 0xFF, 0x4C, 0xCC, 0x37, 0x20, 0x3E, 0xE6, 0x10, 0x6D, 0x5B, 0x59, 0xD1, 0xAC, 0x10, 0x2E, 0x2C, 0xD2,
    0xD7, 0xAC, 0x17, 0xF4, 0xD9, 0x6C, 0x39, 0x8E, 0x5F, 0xD9, 0x93, 0xEC, 0xB4, 0xFF, 0xDF, 0x79, 0xB1, 0x75, 0x47, 0xFF,
    0x9F, 0xA2, 0xAA, 0x8E, 0xEF, 0xD6, 0xCB, 0xDA, 0x12, 0x4C, 0xBB, 0x17, 0xA0, 0xF8, 0x52, 0x81, 0x46, 0x38, 0x71, 0x35,
    0xE2, 0x26, 0xB0, 0x05, 0xA4, 0x74, 0xB9, 0x06, 0x2F, 0xF2, 0x64, 0xD2, 0xFF, 0x8E, 0xFA, 0x36, 0x81, 0x4A, 0xA2, 0x95,
    0x00, 0x65, 0xB1, 0xB0, 0x4C, 0x0A, 0x1A, 0xE9, 0xB2, 0xF6, 0x9D, 0x4A, 0x4A, 0xA9, 0x79, 0xD6, 0xCE, 0x95, 0xFE, 0xE9,
    0x48, 0x5E, 0xD0, 0xA0, 0x3A, 0xEE, 0x9B, 0xD9, 0x53, 0xE8, 0x1C, 0xFD, 0x1E, 0xF6, 0xE8, 0x14, 0xDF, 0xD3, 0xC2, 0xCE,
    0x37, 0xAE, 0xFA, 0x38, 0xC1, 0xF9, 0x87, 0x73, 0x71, 0xE9, 0x1D, 0x6A, 0x5E, 0xB5, 0x9F, 0xDE, 0xDF, 0x75, 0xD3, 0x32,
    0x5F, 0xA3, 0xCA, 0x66, 0xCD, 0xFB, 0xA0, 0xE5, 0x71, 0x46, 0xCC, 0x78, 0x98, 0x18, 0xFF, 0x06, 0xBE, 0x5F, 0xCC, 0x50,
    0xAB, 0xD3, 0x62, 0xAE, 0x4B, 0x80, 0x99, 0x6D]);
pubKey52.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey52);

var pubKey53 = new emv.PubKeyRsa();
pubKey53.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey53.index = 0x54;
pubKey53.mod = new Buffer([0xC6, 0xDD, 0xC0, 0xB7, 0x64, 0x5F, 0x7F, 0x16, 0x28, 0x6A, 0xB7, 0xE4, 0x11, 0x66, 0x55, 0xF5,
    0x6D, 0xD0, 0xC9, 0x44, 0x76, 0x60, 0x40, 0xDC, 0x68, 0x66, 0x4D, 0xD9, 0x73, 0xBD, 0x3B, 0xFD,
    0x4C, 0x52, 0x5B, 0xCB, 0xB9, 0x52, 0x72, 0xB6, 0xB3, 0xAD, 0x9B, 0xA8, 0x86, 0x03, 0x03, 0xAD,
    0x08, 0xD9, 0xE8, 0xCC, 0x34, 0x4A, 0x40, 0x70, 0xF4, 0xCF, 0xB9, 0xEE, 0xAF, 0x29, 0xC8, 0xA3,
    0x46, 0x08, 0x50, 0xC2, 0x64, 0xCD, 0xA3, 0x9B, 0xBE, 0x3A, 0x7E, 0x7D, 0x08, 0xA6, 0x9C, 0x31,
    0xB5, 0xC8, 0xDD, 0x9F, 0x94, 0xDD, 0xBC, 0x92, 0x65, 0x75, 0x8C, 0x0E, 0x73, 0x99, 0xAD, 0xCF,
    0x43, 0x62, 0xCA, 0xEE, 0x45, 0x8D, 0x41, 0x4C, 0x52, 0xB4, 0x98, 0x27, 0x48, 0x81, 0xB1, 0x96,
    0xDA, 0xCC, 0xA7, 0x27, 0x3F, 0x68, 0x7F, 0x2A, 0x65, 0xFA, 0xEB, 0x80, 0x9D, 0x4B, 0x2A, 0xC1,
    0xD3, 0xD1, 0xEF, 0xB4, 0xF6, 0x49, 0x03, 0x22, 0x31, 0x8B, 0xD2, 0x96, 0xD1, 0x53, 0xB3, 0x07,
    0xA3, 0x28, 0x3A, 0xB4, 0xE5, 0xBE, 0x6E, 0xBD, 0x91, 0x03, 0x59, 0xA8, 0x56, 0x5E, 0xB9, 0xC4,
    0x36, 0x0D, 0x24, 0xBA, 0xAC, 0xA3, 0xDB, 0xFE, 0x39, 0x3F, 0x3D, 0x6C, 0x83, 0x0D, 0x60, 0x3C,
    0x6F, 0xC1, 0xE8, 0x34, 0x09, 0xDF, 0xCD, 0x80, 0xD3, 0xA3, 0x3B, 0xA2, 0x43, 0x81, 0x3B, 0xBB,
    0x4C, 0xEA, 0xF9, 0xCB, 0xAB, 0x6B, 0x74, 0xB0, 0x01, 0x16, 0xF7, 0x2A, 0xB2, 0x78, 0xA8, 0x8A,
    0x01, 0x1D, 0x70, 0x07, 0x1E, 0x06, 0xCA, 0xB1, 0x40, 0x64, 0x64, 0x38, 0xD9, 0x86, 0xD4, 0x82,
    0x81, 0x62, 0x4B, 0x85, 0xB3, 0xB2, 0xEB, 0xB9, 0xA6, 0xAB, 0x3B, 0xF2, 0x17, 0x8F, 0xCC, 0x30,
    0x11, 0xE7, 0xCA, 0xF2, 0x48, 0x97, 0xAE, 0x7D]);
pubKey53.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey53);

var pubKey54 = new emv.PubKeyRsa();
pubKey54.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey54.index = 0x96;
pubKey54.mod = new Buffer([0xB7, 0x45, 0x86, 0xD1, 0x9A, 0x20, 0x7B, 0xE6, 0x62, 0x7C, 0x5B, 0x0A, 0xAF, 0xBC, 0x44, 0xA2, 0xEC, 0xF5, 0xA2, 0x94, 0x2D, 0x3A, 0x26,
    0xCE, 0x19, 0xC4, 0xFF, 0xAE, 0xEE, 0x92, 0x05, 0x21, 0x86, 0x89, 0x22, 0xE8, 0x93, 0xE7, 0x83, 0x82, 0x25, 0xA3, 0x94, 0x7A, 0x26, 0x14,
    0x79, 0x6F, 0xB2, 0xC0, 0x62, 0x8C, 0xE8, 0xC1, 0x1E, 0x38, 0x25, 0xA5, 0x6D, 0x3B, 0x1B, 0xBA, 0xEF, 0x78, 0x3A, 0x5C, 0x6A, 0x81, 0xF3,
    0x6F, 0x86, 0x25, 0x39, 0x51, 0x26, 0xFA, 0x98, 0x3C, 0x52, 0x16, 0xD3, 0x16, 0x6D, 0x48, 0xAC, 0xDE, 0x8A, 0x43, 0x12, 0x12, 0xFF, 0x76,
    0x3A, 0x7F, 0x79, 0xD9, 0xED, 0xB7, 0xFE, 0xD7, 0x6B, 0x48, 0x5D, 0xE4, 0x5B, 0xEB, 0x82, 0x9A, 0x3D, 0x47, 0x30, 0x84, 0x8A, 0x36, 0x6D,
    0x33, 0x24, 0xC3, 0x02, 0x70, 0x32, 0xFF, 0x8D, 0x16, 0xA1, 0xE4, 0x4D, 0x8D]);
pubKey54.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey54);

var pubKey55 = new emv.PubKeyRsa();
pubKey55.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey55.index = 0x50;
pubKey55.mod = new Buffer([0xD1, 0x11, 0x97, 0x59, 0x00, 0x57, 0xB8, 0x41, 0x96, 0xC2, 0xF4, 0xD1, 0x1A, 0x8F, 0x3C, 0x05, 0x40, 0x8F, 0x42, 0x2A,
    0x35, 0xD7, 0x02, 0xF9, 0x01, 0x06, 0xEA, 0x5B, 0x01, 0x9B, 0xB2, 0x8A, 0xE6, 0x07, 0xAA, 0x9C, 0xDE, 0xBC, 0xD0, 0xD8,
    0x1A, 0x38, 0xD4, 0x8C, 0x7E, 0xBB, 0x00, 0x62, 0xD2, 0x87, 0x36, 0x9E, 0xC0, 0xC4, 0x21, 0x24, 0x24, 0x6A, 0xC3, 0x0D,
    0x80, 0xCD, 0x60, 0x2A, 0xB7, 0x23, 0x8D, 0x51, 0x08, 0x4D, 0xED, 0x46, 0x98, 0x16, 0x2C, 0x59, 0xD2, 0x5E, 0xAC, 0x1E,
    0x66, 0x25, 0x5B, 0x4D, 0xB2, 0x35, 0x25, 0x26, 0xEF, 0x09, 0x82, 0xC3, 0xB8, 0xAD, 0x3D, 0x1C, 0xCE, 0x85, 0xB0, 0x1D,
    0xB5, 0x78, 0x8E, 0x75, 0xE0, 0x9F, 0x44, 0xBE, 0x73, 0x61, 0x36, 0x6D, 0xEF, 0x9D, 0x1E, 0x13, 0x17, 0xB0, 0x5E, 0x5D,
    0x0F, 0xF5, 0x29, 0x0F, 0x88, 0xA0, 0xDB, 0x47]);
pubKey55.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey55);

var pubKey56 = new emv.PubKeyRsa();
pubKey56.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey56.index = 0x51;
pubKey56.mod = new Buffer([0xDB, 0x5F, 0xA2, 0x9D, 0x1F, 0xDA, 0x8C, 0x16, 0x34, 0xB0, 0x4D, 0xCC, 0xFF, 0x14, 0x8A, 0xBE, 0xE6, 0x3C, 0x77, 0x20,
    0x35, 0xC7, 0x98, 0x51, 0xD3, 0x51, 0x21, 0x07, 0x58, 0x6E, 0x02, 0xA9, 0x17, 0xF7, 0xC7, 0xE8, 0x85, 0xE7, 0xC4, 0xA7,
    0xD5, 0x29, 0x71, 0x0A, 0x14, 0x53, 0x34, 0xCE, 0x67, 0xDC, 0x41, 0x2C, 0xB1, 0x59, 0x7B, 0x77, 0xAA, 0x25, 0x43, 0xB9,
    0x8D, 0x19, 0xCF, 0x2C, 0xB8, 0x0C, 0x52, 0x2B, 0xDB, 0xEA, 0x0F, 0x1B, 0x11, 0x3F, 0xA2, 0xC8, 0x62, 0x16, 0xC8, 0xC6,
    0x10, 0xA2, 0xD5, 0x8F, 0x29, 0xCF, 0x33, 0x55, 0xCE, 0xB1, 0xBD, 0x3E, 0xF4, 0x10, 0xD1, 0xED, 0xD1, 0xF7, 0xAE, 0x0F,
    0x16, 0x89, 0x79, 0x79, 0xDE, 0x28, 0xC6, 0xEF, 0x29, 0x3E, 0x0A, 0x19, 0x28, 0x2B, 0xD1, 0xD7, 0x93, 0xF1, 0x33, 0x15,
    0x23, 0xFC, 0x71, 0xA2, 0x28, 0x80, 0x04, 0x68, 0xC0, 0x1A, 0x36, 0x53, 0xD1, 0x4C, 0x6B, 0x48, 0x51, 0xA5, 0xC0, 0x29,
    0x47, 0x8E, 0x75, 0x7F]);
pubKey56.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
pubKey56.hash = 'B9D248075A3F23B522FE45573E04374DC4995D71';
pubKeys.push(pubKey56);

var pubKey57 = new emv.PubKeyRsa();
pubKey57.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey57.index = 0xE1;
pubKey57.mod = new Buffer([0x99, 0xC5, 0xB7, 0x0A, 0xA6, 0x1B, 0x4F, 0x4C, 0x51, 0xB6,
    0xF9, 0x0B, 0x0E, 0x3B, 0xFB, 0x7A, 0x3E, 0xE0, 0xE7, 0xDB,
    0x41, 0xBC, 0x46, 0x68, 0x88, 0xB3, 0xEC, 0x8E, 0x99, 0x77,
    0xC7, 0x62, 0x40, 0x7E, 0xF1, 0xD7, 0x9E, 0x0A, 0xFB, 0x28,
    0x23, 0x10, 0x0A, 0x02, 0x0C, 0x3E, 0x80, 0x20, 0x59, 0x3D,
    0xB5, 0x0E, 0x90, 0xDB, 0xEA, 0xC1, 0x8B, 0x78, 0xD1, 0x3F,
    0x96, 0xBB, 0x2F, 0x57, 0xEE, 0xDD, 0xC3, 0x0F, 0x25, 0x65,
    0x92, 0x41, 0x7C, 0xDF, 0x73, 0x9C, 0xA6, 0x80, 0x4A, 0x10,
    0xA2, 0x9D, 0x28, 0x06, 0xE7, 0x74, 0xBF, 0xA7, 0x51, 0xF2,
    0x2C, 0xF3, 0xB6, 0x5B, 0x38, 0xF3, 0x7F, 0x91, 0xB4, 0xDA,
    0xF8, 0xAE, 0xC9, 0xB8, 0x03, 0xF7, 0x61, 0x0E, 0x06, 0xAC,
    0x9E, 0x6B]);
pubKey57.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey57);

var pubKey58 = new emv.PubKeyRsa();
pubKey58.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey58.index = 0xE2;
pubKey58.mod = new Buffer([0xBD, 0x23, 0x2E, 0x34, 0x8B, 0x11, 0x8E, 0xB3, 0xF6, 0x44,
    0x6E, 0xF4, 0xDA, 0x6C, 0x3B, 0xAC, 0x9B, 0x2A, 0xE5, 0x10,
    0xC5, 0xAD, 0x10, 0x7D, 0x38, 0x34, 0x32, 0x55, 0xD2, 0x1C,
    0x4B, 0xDF, 0x49, 0x52, 0xA4, 0x2E, 0x92, 0xC6, 0x33, 0xB1,
    0xCE, 0x4B, 0xFE, 0xC3, 0x9A, 0xFB, 0x6D, 0xFE, 0x14, 0x7E,
    0xCB, 0xB9, 0x1D, 0x68, 0x1D, 0xAC, 0x15, 0xFB, 0x0E, 0x19,
    0x8E, 0x9A, 0x7E, 0x46, 0x36, 0xBD, 0xCA, 0x10, 0x7B, 0xCD,
    0xA3, 0x38, 0x4F, 0xCB, 0x28, 0xB0, 0x6A, 0xFE, 0xF9, 0x0F,
    0x09, 0x9E, 0x70, 0x84, 0x51, 0x1F, 0x3C, 0xC0, 0x10, 0xD4,
    0x34, 0x35, 0x03, 0xE1, 0xE5, 0xA6, 0x72, 0x64, 0xB4, 0x36,
    0x7D, 0xAA, 0x9A, 0x39, 0x49, 0x49, 0x92, 0x72, 0xE9, 0xB5,
    0x02, 0x2F]);
pubKey58.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey58);

var pubKey59 = new emv.PubKeyRsa();
pubKey59.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey59.index = 0xE3;
pubKey59.mod = new Buffer([0xBC, 0x01, 0xE1, 0x22, 0x23, 0xE1, 0xA4, 0x1E, 0x88, 0xBF,
    0xFA, 0x80, 0x10, 0x93, 0xC5, 0xF8, 0xCE, 0xC5, 0xCD, 0x05,
    0xDB, 0xBD, 0xBB, 0x78, 0x7C, 0xE8, 0x72, 0x49, 0xE8, 0x80,
    0x83, 0x27, 0xC2, 0xD2, 0x18, 0x99, 0x1F, 0x97, 0xA1, 0x13,
    0x1E, 0x8A, 0x25, 0xB0, 0x12, 0x2E, 0xD1, 0x1E, 0x70, 0x9C,
    0x53, 0x3E, 0x88, 0x86, 0xA1, 0x25, 0x9A, 0xDD, 0xFD, 0xCB,
    0xB3, 0x96, 0x60, 0x4D, 0x24, 0xE5, 0x05, 0xA2, 0xD0, 0xB5,
    0xDD, 0x03, 0x84, 0xFB, 0x00, 0x02, 0xA7, 0xA1, 0xEB, 0x39,
    0xBC, 0x8A, 0x11, 0x33, 0x9C, 0x7A, 0x94, 0x33, 0xA9, 0x48,
    0x33, 0x77, 0x61, 0xBE, 0x73, 0xBC, 0x49, 0x7B, 0x8E, 0x58,
    0x73, 0x6D, 0xA4, 0x63, 0x65, 0x38, 0xAD, 0x28, 0x2D, 0x3C,
    0xD3, 0xDB]);
pubKey59.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey59);

var pubKey60 = new emv.PubKeyRsa();
pubKey60.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey60.index = 0xE4;
pubKey60.mod = new Buffer([0xCB, 0xF2, 0xE4, 0x0F, 0x08, 0x36, 0xC9, 0xA5, 0xE3, 0x90,
    0xA3, 0x7B, 0xE3, 0xB8, 0x09, 0xBD, 0xF5, 0xD7, 0x40, 0xCB,
    0x1D, 0xA3, 0x8C, 0xFC, 0x05, 0xD5, 0xF8, 0xD6, 0xB7, 0x74,
    0x5B, 0x5E, 0x9A, 0x3F, 0xA6, 0x96, 0x1E, 0x55, 0xFF, 0x20,
    0x41, 0x21, 0x08, 0x52, 0x5E, 0x66, 0xB9, 0x70, 0xF9, 0x02,
    0xF7, 0xFF, 0x43, 0x05, 0xDD, 0x83, 0x2C, 0xD0, 0x76, 0x3E,
    0x3A, 0xA8, 0xB8, 0x17, 0x3F, 0x84, 0x77, 0x71, 0x00, 0xB1,
    0x04, 0x7B, 0xD1, 0xD7, 0x44, 0x50, 0x93, 0x12, 0xA0, 0x93,
    0x2E, 0xD2, 0x5F, 0xED, 0x52, 0xA9, 0x59, 0x43, 0x07, 0x68,
    0xCC, 0xD9, 0x02, 0xFD, 0x8C, 0x8A, 0xD9, 0x12, 0x3E, 0x6A,
    0xDD, 0xB3, 0xF3, 0x4B, 0x92, 0xE7, 0x92, 0x4D, 0x72, 0x9C,
    0xB6, 0x47, 0x35, 0x33, 0xAE, 0x2B, 0x2B, 0x55, 0xBF, 0x0E,
    0x44, 0x96, 0x4F, 0xDE, 0xA8, 0x44, 0x01, 0x17]);
pubKey60.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey60);

var pubKey61 = new emv.PubKeyRsa();
pubKey61.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey61.index = 0xE5;
pubKey61.mod = new Buffer([0xD4, 0xFD, 0xAE, 0x94, 0xDE, 0xDB, 0xEC, 0xC6, 0xD2, 0x0D,
    0x38, 0xB0, 0x1E, 0x91, 0x82, 0x6D, 0xC6, 0x95, 0x43, 0x38,
    0x37, 0x99, 0x17, 0xB2, 0xBB, 0x8A, 0x6B, 0x36, 0xB5, 0xD3,
    0xB0, 0xC5, 0xED, 0xA6, 0x0B, 0x33, 0x74, 0x48, 0xBA, 0xFF,
    0xEB, 0xCC, 0x3A, 0xBD, 0xBA, 0x86, 0x9E, 0x8D, 0xAD, 0xEC,
    0x6C, 0x87, 0x01, 0x10, 0xC4, 0x2F, 0x5A, 0xAB, 0x90, 0xA1,
    0x8F, 0x4F, 0x86, 0x7F, 0x72, 0xE3, 0x38, 0x6F, 0xFC, 0x7E,
    0x67, 0xE7, 0xFF, 0x94, 0xEB, 0xA0, 0x79, 0xE5, 0x31, 0xB3,
    0xCF, 0x32, 0x95, 0x17, 0xE8, 0x1C, 0x5D, 0xD9, 0xB3, 0xDC,
    0x65, 0xDB, 0x5F, 0x90, 0x43, 0x19, 0x0B, 0xE0, 0xBE, 0x89,
    0x7E, 0x5F, 0xE4, 0x8A, 0xDF, 0x5D, 0x3B, 0xFA, 0x05, 0x85,
    0xE0, 0x76, 0xE5, 0x54, 0xF2, 0x6E, 0xC6, 0x98, 0x14, 0x79,
    0x7F, 0x15, 0x66, 0x9F, 0x4A, 0x25, 0x5C, 0x13]);
pubKey61.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey61);

var pubKey62 = new emv.PubKeyRsa();
pubKey62.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey62.index = 0xE6;
pubKey62.mod = new Buffer([0xEB, 0xF9, 0xFA, 0xEC, 0xC3, 0xE5, 0xC3, 0x15, 0x70, 0x96,
    0x94, 0x66, 0x47, 0x75, 0xD3, 0xFB, 0xDA, 0x5A, 0x50, 0x4D,
    0x89, 0x34, 0x4D, 0xD9, 0x20, 0xC5, 0x56, 0x96, 0xE8, 0x91,
    0xD9, 0xAB, 0x62, 0x25, 0x98, 0xA9, 0xD6, 0xAB, 0x8F, 0xBF,
    0x35, 0xE4, 0x59, 0x9C, 0xAB, 0x7E, 0xB2, 0x2F, 0x95, 0x69,
    0x92, 0xF8, 0xAB, 0x2E, 0x65, 0x35, 0xDE, 0xCB, 0x6B, 0x57,
    0x6F, 0xA0, 0x67, 0x5F, 0x97, 0xC2, 0x3D, 0xD4, 0xC3, 0x74,
    0xA6, 0x6E, 0x6A, 0xF4, 0x19, 0xC9, 0xD2, 0x04, 0xD0, 0xB9,
    0xF9, 0x3C, 0x08, 0xD7, 0x89, 0xD6, 0x38, 0x05, 0x66, 0x0F,
    0xBB, 0x62, 0x9D, 0xF1, 0xB4, 0x88, 0xCF, 0xA1, 0xD7, 0xA1,
    0x3E, 0x9B, 0x72, 0x94, 0x37, 0xEE, 0xAF, 0xE7, 0x18, 0xEF,
    0xA8, 0x59, 0x34, 0x8B, 0xA0, 0xD7, 0x68, 0x12, 0xA9, 0x9F,
    0x31, 0xCD, 0x36, 0x4F, 0x2A, 0x4F, 0xD4, 0x2F]);
pubKey62.exponent = new Buffer([0x01, 0x00, 0x01]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey62);

var pubKey63 = new emv.PubKeyRsa();
pubKey63.rid = new Buffer([0xA0, 0x00, 0x00, 0x01, 0x52]);
pubKey63.index = 0xD0;
pubKey63.mod = 'D05C2A09D09C9031366EC092BCAC67D4B1B4F88B10005E1FC45C1B483AE7EB86FF0E884A19C0595A6C34F06386D776A21D620FC9F9C498ADCA00E66D129BCDD4789837B96DCC7F09DA94CCAC5AC7CFC07F4600DF78E493DC1957DEBA3F4838A4B8BD4CEFE4E4C6119085E5BB21077341C568A21D65D049D666807C39C401CDFEE7F7F99B8F9CB34A8841EA62E83E8D63';
pubKey63.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey63.expDate = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey63);

var pubKey64 = new emv.PubKeyRsa();
pubKey64.rid = new Buffer([0xA0, 0x00, 0x00, 0x01, 0x52]);
pubKey64.index = 0xD1;
pubKey64.mod = 'A71AF977C1079304D6DFF3F665AB6DB3FBDFA1B170287AC6D7BC0AFCB7A202A4C815E1FC2E34F75A052564EE2148A39CD6B0F39CFAEF95F0294A86C3198E349FF82EECE633D50E5860A15082B4B342A90928024057DD51A2401D781B67AE7598D5D1FF26A441970A19A3A58011CA19284279A85567D3119264806CAF761122A71FC0492AC8D8D42B036C394FC494E03B43600D7E02CB5267755ACE64437CFA7B475AD40DDC93B8C9BCAD63801FC492FD251640E41FD13F6E231F56F97283447AB44CBE11910DB3C75243784AA9BDF57539C31B51C9F35BF8BC2495762881255478264B792BBDCA6498777AE9120ED935BB3E8BEA3EAB13D9';
pubKey64.exponent = new Buffer([0x01, 0x00, 0x01]);
pubKey64.hash = '20301231';
//pubKey.hash = '';
pubKeys.push(pubKey64);

var pubKey65 = new emv.PubKeyRsa();
pubKey65.rid = new Buffer([0xA0, 0x00, 0x00, 0x00, 0x04]);
pubKey65.index = 0xF8;
//pubKey65.mod = new Buffer([0xA1, 0xF5, 0xE1, 0xC9, 0xBD, 0x86, 0x50, 0xBD, 0x43, 0xAB, 0x6E, 0xE5, 0x6B, 0x89, 0x1E, 0xF7,
//    0x45, 0x9C, 0x0A, 0x24, 0xFA, 0x84, 0xF9, 0x12, 0x7D, 0x1A, 0x6C, 0x79, 0xD4, 0x93, 0x0F, 0x6D,
//    0xB1, 0x85, 0x2E, 0x25, 0x10, 0xF1, 0x8B, 0x61, 0xCD, 0x35, 0x4D, 0xB8, 0x3A, 0x35, 0x6B, 0xD1,
//    0x90, 0xB8, 0x8A, 0xB8, 0xDF, 0x04, 0x28, 0x4D, 0x02, 0xA4, 0x20, 0x4A, 0x7B, 0x6C, 0xB7, 0xC5,
//    0x55, 0x19, 0x77, 0xA9, 0xB3, 0x63, 0x79, 0xCA, 0x3D, 0xE1, 0xA0, 0x8E, 0x69, 0xF3, 0x01, 0xC9,
//    0x5C, 0xC1, 0xC2, 0x05, 0x06, 0x95, 0x92, 0x75, 0xF4, 0x17, 0x23, 0xDD, 0x5D, 0x29, 0x25, 0x29,
//    0x05, 0x79, 0xE5, 0xA9, 0x5B, 0x0D, 0xF6, 0x32, 0x3F, 0xC8, 0xE9, 0x27, 0x3D, 0x6F, 0x84, 0x91,
//    0x98, 0xC4, 0x99, 0x62, 0x09, 0x16, 0x6D, 0x9B, 0xFC, 0x97, 0x3C, 0x36, 0x1C, 0xC8, 0x26, 0xE1]);
pubKey65.mod = new Buffer([0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x98,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x60,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55]);
pubKey65.exponent = new Buffer([0x03]);
//pubKey.expDate = '';
//pubKey.hash = '';
pubKeys.push(pubKey65);

var pubKey66 = new emv.PubKeyRsa();
pubKey66.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
pubKey66.index = 0xFE;
pubKey66.mod = 'C469BF4F82F1FA41A6287A592750DB700B0C6CE26C83397E45A2E476CFD3DD666C6D70A8471D9BED927D43852489D6ACEE88B279F1E3C936CD80423D52509F2BB421F37A42E542F282718315CC8B63DF172B43267336029EECDD245C6119A0FEFB48F218BAAA84AA5B94CC73B9515312080510480F08EE20DCC00A73FAB745332DEFEEB11FB3B9AE0A6B3BAB59B73AD5';
pubKey66.exponent = new Buffer([0x03]);
//pubKey66.hash = '20301231';
pubKeys.push(pubKey66);


aids = [];
aids.push({
    aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09],
    partSlt: true
});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x99, 0x90, 0x90], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x03], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x04], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x05], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x06], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x65, 0x10, 0x10], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x25, 0x01, 0x05, 0x01], partSlt: true});
//aid.push({aid: [0xA1, 0x22, 0x33, 0x44, 0x55], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x02], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x01, 0x52, 0x30, 0x10], partSlt: true});
aids.push({aid: [0xA0, 0x00, 0x00, 0x99, 0x99, 0x01], partSlt: false});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x07], partSlt: false});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03], partSlt: false});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10], partSlt: false});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04], partSlt: false});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x02], partSlt: false});
aids.push({aid: [0xA0, 0x00, 0x00, 0x00, 0x04, 0x30, 0x60], partSlt: false});

defaultBasicParam = new emv.BasicParams();
defaultBasicParam.floorLimit = 500;
defaultBasicParam.randomLimit = 100;
defaultBasicParam.randomPercent = 30;
defaultBasicParam.randomPercentMax = 90;

defaultPbocParam = new emv.PbocParams();
defaultPbocParam.isSupportECash = false;
defaultPbocParam.isSupportSM = true;
defaultPbocParam.transProp = '26060000';
defaultPbocParam.ecLimit = 500;
defaultPbocParam.rfTransLimit = 100000;
defaultPbocParam.rfCvmLimit = 200;
defaultPbocParam.rfFloorLimit = 500;

defaultVisaParam = new emv.VisaParams();
defaultVisaParam.rcp = getRcp(false, true, true, true, true, true);
defaultVisaParam.transProp = '26004000';
defaultVisaParam.rfTransLimit = 3000;// 超过此限额，不能做非接交易
defaultVisaParam.rfFloorLimit = 2000;// 超过此限额，需要联机，不能做脱机交易
defaultVisaParam.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
defaultVisaParam.cvn17Flag = true;
defaultVisaParam.track1Flag = true;
defaultVisaParam.track2Flag = true;

defaultMasterParam = new emv.MasterParams();
defaultMasterParam.mode = emv.MasterMode.MAG_EMV;
defaultMasterParam.balanceFlag = emv.MasterBalanceFlag.BOTH;
defaultMasterParam.recovery = false;
defaultMasterParam.cdv = false;
defaultMasterParam.rfTransLimit = 4000;// 超过此限额，不能做非接交易
defaultMasterParam.rfFloorLimit = 2000;// 超过此限额，需要联机，不能做脱机交易
defaultMasterParam.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
defaultMasterParam.rfTransLimitCdv = 3000;// 超过此限额，需要持卡人验证
defaultMasterParam.cvmCapReq = 0xF8;
defaultMasterParam.cvmCapNoReq = 0xA8;
defaultMasterParam.cvmCapMagReq = 0xF0;
defaultMasterParam.cvmCapMagNoReq = 0xF0;

var masterParam1 = new emv.MasterParams();
masterParam1.mode = emv.MasterMode.MAG_EMV;
masterParam1.balanceFlag = emv.MasterBalanceFlag.BOTH;
masterParam1.recovery = false;
masterParam1.cdv = false;
masterParam1.rfTransLimit = 4001;// 超过此限额，不能做非接交易
masterParam1.rfFloorLimit = 2001;// 超过此限额，需要联机，不能做脱机交易
masterParam1.rfCvmLimit = 1001;// 超过此限额，需要持卡人验证
masterParam1.rfTransLimitCdv = 3001;// 超过此限额，需要持卡人验证
masterParam1.cvmCapReq = 0xF8;
masterParam1.cvmCapNoReq = 0xA8;
masterParam1.cvmCapMagReq = 0xF0;
masterParam1.cvmCapMagNoReq = 0xF0;
masterParamList.push({key: [0xA0, 0x00, 0x00, 0x00, 0x99, 0x90], value: masterParam1});

var masterParam2 = new emv.MasterParams();
masterParam2.mode = emv.MasterMode.MAG_EMV;
masterParam2.balanceFlag = emv.MasterBalanceFlag.BOTH;
masterParam2.recovery = false;
masterParam2.cdv = false;
masterParam2.rfTransLimit = 4002;// 超过此限额，不能做非接交易
masterParam2.rfFloorLimit = 2002;// 超过此限额，需要联机，不能做脱机交易
masterParam2.rfCvmLimit = 1002;// 超过此限额，需要持卡人验证
masterParam2.rfTransLimitCdv = 3002;// 超过此限额，需要持卡人验证
masterParam2.cvmCapReq = 0xF8;
masterParam2.cvmCapNoReq = 0xA8;
masterParam2.cvmCapMagReq = 0xF0;
masterParam2.cvmCapMagNoReq = 0xF0;
masterParamList.push({key: [0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01], value: masterParam2});

var masterParam3 = new emv.MasterParams();
masterParam3.mode = emv.MasterMode.MAG_EMV;
masterParam3.balanceFlag = emv.MasterBalanceFlag.BOTH;
masterParam3.recovery = false;
masterParam3.cdv = false;
masterParam3.rfTransLimit = 4003;// 超过此限额，不能做非接交易
masterParam3.rfFloorLimit = 2003;// 超过此限额，需要联机，不能做脱机交易
masterParam3.rfCvmLimit = 1003;// 超过此限额，需要持卡人验证
masterParam3.rfTransLimitCdv = 3003;// 超过此限额，需要持卡人验证
masterParam3.cvmCapReq = 0xF8;
masterParam3.cvmCapNoReq = 0xA8;
masterParam3.cvmCapMagReq = 0xF0;
masterParam3.cvmCapMagNoReq = 0xF0;
masterParamList.push({key: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x08], value: masterParam3});

var basicParam1 = new emv.BasicParams();
basicParam1.floorLimit = 501;
basicParam1.randomLimit = 101;
basicParam1.randomPercent = 31;
basicParam1.randomPercentMax = 91;
basicParamList.push({key: [0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01], value: basicParam1});

var basicParam2 = new emv.BasicParams();
basicParam2.floorLimit = 502;
basicParam2.randomLimit = 102;
basicParam2.randomPercent = 32;
basicParam2.randomPercentMax = 92;
basicParamList.push({key: [0xA0, 0x00, 0x00, 0x00, 0x99, 0x90], value: basicParam2});

var basicParam3 = new emv.BasicParams();
basicParam3.floorLimit = 503;
basicParam3.randomLimit = 103;
basicParam3.randomPercent = 33;
basicParam3.randomPercentMax = 93;
basicParam3.countryCode = '0840';
basicParam3.curCode = '0840';
basicParamList.push({key: [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, 0x08], value: basicParam3});

var pbocParam1 = new emv.PbocParams();
pbocParam1.isSupportECash = false;
pbocParam1.isSupportSM = true;
pbocParam1.transProp = '26060000';
pbocParam1.ecLimit = 501;
pbocParam1.rfTransLimit = 100001;
pbocParam1.rfCvmLimit = 201;
pbocParam1.rfFloorLimit = 501;
pbocParamList.push({key: [0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01], value: pbocParam1});

var pbocParam2 = new emv.PbocParams();
pbocParam2.isSupportECash = false;
pbocParam2.isSupportSM = true;
pbocParam2.transProp = '26060000';
pbocParam2.ecLimit = 502;
pbocParam2.rfTransLimit = 100002;
pbocParam2.rfCvmLimit = 202;
pbocParam2.rfFloorLimit = 502;
pbocParamList.push({key: [0xA0, 0x00, 0x00, 0x00, 0x99, 0x90], value: pbocParam2});

var pbocParam3 = new emv.PbocParams();
pbocParam3.isSupportECash = false;
pbocParam3.isSupportSM = true;
pbocParam3.transProp = '26060000';
pbocParam3.ecLimit = 501;
pbocParam3.rfTransLimit = 100001;
pbocParam3.rfCvmLimit = 201;
pbocParam3.rfFloorLimit = 501;
pbocParamList.push({key: [0xA0, 0x00, 0x00, 0x00, 0x03], value: pbocParam3});

// CLM.D.016.00_04Change
var visaParam1 = new emv.VisaParams();
visaParam1.rcp = getRcp(false, true, true, true, false, true);
visaParam1.transProp = '26004000';
visaParam1.rfTransLimit = 10000;// 超过此限额，不能做非接交易
//visaParam1.rfFloorLimit = 500;// 超过此限额，需要联机，不能做脱机交易
visaParam1.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
visaParam1.cvn17Flag = true;
visaParam1.track1Flag = true;
visaParam1.track2Flag = true;
visaParamList.push({key: '04', value: visaParam1});

// CLQ.D.015.00/01_04、CLQ.D.017.00_04、CLQ.D.018/019.00_04
//var visaParam1 = new emv.VisaParams();
//visaParam1.rcp = getRcp(false, true, true, true, true, true);
//visaParam1.transProp = '26004000';
//visaParam1.rfTransLimit = 10000;// 超过此限额，不能做非接交易
//visaParam1.rfFloorLimit = 5000;// 超过此限额，需要联机，不能做脱机交易
//visaParam1.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
//visaParam1.cvn17Flag = true;
//visaParam1.track1Flag = true;
//visaParam1.track2Flag = true;
//visaParamList.push({key: '04', value: visaParam1});

//// CLQ.D.016.00_04Change
//var visaParam1 = new emv.VisaParams();
//visaParam1.rcp = getRcp(false, true, true, true, false, true);
//visaParam1.transProp = '26004000';
//visaParam1.rfTransLimit = 10000;// 超过此限额，不能做非接交易
////visaParam1.rfFloorLimit = 500;// 超过此限额，需要联机，不能做脱机交易
//visaParam1.rfCvmLimit = 1500;// 超过此限额，需要持卡人验证
//visaParam1.cvn17Flag = true;
//visaParam1.track1Flag = true;
//visaParam1.track2Flag = true;
//visaParamList.push({key: '04', value: visaParam1});

// CLQ.D.015.00/01_01
var visaParam2 = new emv.VisaParams();
visaParam2.rcp = getRcp(false, false, false, true, true, true);
visaParam2.transProp = '26004000';
visaParam2.rfTransLimit = 2000;// 超过此限额，不能做非接交易
visaParam2.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
visaParam2.rfCvmLimit = 500;// 超过此限额，需要持卡人验证
visaParam2.cvn17Flag = true;
visaParam2.track1Flag = true;
visaParam2.track2Flag = true;
visaParamList.push({key: '01', value: visaParam2});

// CLQ.D.016.00/01
//var visaParam2 = new emv.VisaParams();
//visaParam2.rcp = getRcp(true, true, false, true, true, true);
//visaParam2.transProp = '26004000';
//visaParam2.rfTransLimit = 3000;// 超过此限额，不能做非接交易
//visaParam2.rfFloorLimit = 2000;// 超过此限额，需要联机，不能做脱机交易
//visaParam2.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
//visaParam2.cvn17Flag = true;
//visaParam2.track1Flag = true;
//visaParam2.track2Flag = true;
//visaParamList.push({key: '01', value: visaParam2});

//// CLQ.D.016.01_01Change
//var visaParam2 = new emv.VisaParams();
//visaParam2.rcp = getRcp(false, false, false, false, true, true);
//visaParam2.transProp = '26004000';
////visaParam2.rfTransLimit = 2000;// 超过此限额，不能做非接交易
//visaParam2.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
//visaParam2.rfCvmLimit = 500;// 超过此限额，需要持卡人验证
//visaParam2.cvn17Flag = true;
//visaParam2.track1Flag = true;
//visaParam2.track2Flag = true;
//visaParamList.push({key: '01', value: visaParam2});

// CLQ.D.016.00_01Change、CLQ.D.017.00_01、CLQ.D.018/019.00_01
//var visaParam2 = new emv.VisaParams();
//visaParam2.rcp = getRcp(false, false, false, true, true, true);
//visaParam2.transProp = '26004000';
//visaParam2.rfTransLimit = 2000;// 超过此限额，不能做非接交易
//visaParam2.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
//visaParam2.rfCvmLimit = 500;// 超过此限额，需要持卡人验证
//visaParam2.cvn17Flag = true;
//visaParam2.track1Flag = true;
//visaParam2.track2Flag = true;
//visaParamList.push({key: '01', value: visaParam2});

// CLQ.D.015.00/01_02、CLQ.D.016.00_02Change、CLQ.D.017.00_02、CLQ.D.018/019.00_02
var visaParam3 = new emv.VisaParams();
visaParam3.rcp = getRcp(false, true, true, false, true, true);
visaParam3.transProp = '26004000';
//visaParam3.rfTransLimit = 2000;// 超过此限额，不能做非接交易
visaParam3.rfFloorLimit = 100000;// 超过此限额，需要联机，不能做脱机交易
visaParam3.rfCvmLimit = 50000;// 超过此限额，需要持卡人验证
visaParam3.cvn17Flag = true;
visaParam3.track1Flag = true;
visaParam3.track2Flag = true;
visaParamList.push({key: '02', value: visaParam3});

// CLQ.D.015.00/01_03、CLQ.D.017.00_03、CLQ.D.018/019.00_03
var visaParam4 = new emv.VisaParams();
visaParam4.rcp = getRcp(false, true, true, true, true, true);
visaParam4.transProp = '26004000';
visaParam4.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam4.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
visaParam4.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
visaParam4.cvn17Flag = true;
visaParam4.track1Flag = true;
visaParam4.track2Flag = true;
visaParamList.push({key: '03', value: visaParam4});

//// CLQ.D.016.00_03Change
//var visaParam4 = new emv.VisaParams();
//visaParam4.rcp = getRcp(false, true, true, true, true, false);
//visaParam4.transProp = '26004000';
//visaParam4.rfTransLimit = 10000;// 超过此限额，不能做非接交易
//visaParam4.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
////visaParam4.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
//visaParam4.cvn17Flag = true;
//visaParam4.track1Flag = true;
//visaParam4.track2Flag = true;
//visaParamList.push({key: '03', value: visaParam4});

// CLQ.D.016.01_02Change
var visaParam5 = new emv.VisaParams();
visaParam5.rcp = getRcp(false, true, true, false, true, false);
visaParam5.transProp = '26004000';
//visaParam5.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam5.rfFloorLimit = 100000;// 超过此限额，需要联机，不能做脱机交易
//visaParam5.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
visaParam5.cvn17Flag = true;
visaParam5.track1Flag = true;
visaParam5.track2Flag = true;
visaParamList.push({key: '02112233445566779900AABBCCDDEEFF', value: visaParam5});

// CLQ.D.016.01_03Change
var visaParam6 = new emv.VisaParams();
visaParam6.rcp = getRcp(false, true, true, false, true, true);
visaParam6.transProp = '26004000';
//visaParam6.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam6.rfFloorLimit = 100000;// 超过此限额，需要联机，不能做脱机交易
visaParam6.rfCvmLimit = 100000;// 超过此限额，需要持卡人验证
visaParam6.cvn17Flag = true;
visaParam6.track1Flag = true;
visaParam6.track2Flag = true;
visaParamList.push({key: '05112233445566', value: visaParam6});

// CLQ.D.016.01_04Change
var visaParam6 = new emv.VisaParams();
visaParam6.rcp = getRcp(false, true, true, false, false, false);
visaParam6.transProp = '26004000';
//visaParam6.rfTransLimit = 10000;// 超过此限额，不能做非接交易
//visaParam6.rfFloorLimit = 100000;// 超过此限额，需要联机，不能做脱机交易
//visaParam6.rfCvmLimit = 100000;// 超过此限额，需要持卡人验证
visaParam6.cvn17Flag = true;
visaParam6.track1Flag = true;
visaParam6.track2Flag = true;
visaParamList.push({key: '06AA', value: visaParam6});

// CLQ.D.017.01
var visaParam7 = new emv.VisaParams();
visaParam7.rcp = getRcp(false, true, true, false, true, true);
visaParam7.transProp = '26004000';
//visaParam7.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam7.rfFloorLimit = 3000;// 超过此限额，需要联机，不能做脱机交易
visaParam7.rfCvmLimit = 3000;// 超过此限额，需要持卡人验证
visaParam7.cvn17Flag = true;
visaParam7.track1Flag = true;
visaParam7.track2Flag = true;
visaParamList.push({key: 'FFFFAF', value: visaParam7});

// CLQ.D.020.00_01
var visaParam8 = new emv.VisaParams();
visaParam8.rcp = getRcp(false, false, false, true, true, true);
visaParam8.transProp = '26004000';
visaParam8.rfTransLimit = 20000;// 超过此限额，不能做非接交易
visaParam8.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
visaParam8.rfCvmLimit = 500;// 超过此限额，需要持卡人验证
visaParam8.cvn17Flag = true;
visaParam8.track1Flag = true;
visaParam8.track2Flag = true;
visaParamList.push({key: '10', value: visaParam8});

// CLQ.D.020.00_01
var visaParam9 = new emv.VisaParams();
visaParam9.rcp = getRcp(false, true, true, false, true, true);
visaParam9.transProp = '26004000';
//visaParam9.rfTransLimit = 20000;// 超过此限额，不能做非接交易
visaParam9.rfFloorLimit = 100000;// 超过此限额，需要联机，不能做脱机交易
visaParam9.rfCvmLimit = 50000;// 超过此限额，需要持卡人验证
visaParam9.cvn17Flag = true;
visaParam9.track1Flag = true;
visaParam9.track2Flag = true;
visaParamList.push({key: '110840', value: visaParam9});

// CLQ.D.020.00_03
var visaParam10 = new emv.VisaParams();
visaParam10.rcp = getRcp(false, true, true, true, true, true);
visaParam10.transProp = '26004000';
visaParam10.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam10.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
visaParam10.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
visaParam10.cvn17Flag = true;
visaParam10.track1Flag = true;
visaParam10.track2Flag = true;
visaParamList.push({key: '1508400840404550', value: visaParam10});

// CLQ.D.020.00_04
var visaParam11 = new emv.VisaParams();
visaParam11.rcp = getRcp(false, true, false, true, true, true);
visaParam11.transProp = '26004000';
visaParam11.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam11.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
visaParam11.rfCvmLimit = 1000;// 超过此限额，需要持卡人验证
visaParam11.cvn17Flag = true;
visaParam11.track1Flag = true;
visaParam11.track2Flag = true;
visaParamList.push({key: '19084008406677889900AABBCCDDEEFF', value: visaParam11});

// CLQ.D.020.01_01
var visaParam12 = new emv.VisaParams();
visaParam12.rcp = getRcp(false, true, false, true, true, true);
visaParam12.transProp = '26004000';
visaParam12.rfTransLimit = 5000;// 超过此限额，不能做非接交易
visaParam12.rfFloorLimit = 1000;// 超过此限额，需要联机，不能做脱机交易
visaParam12.rfCvmLimit = 3000;// 超过此限额，需要持卡人验证
visaParam12.cvn17Flag = true;
visaParam12.track1Flag = true;
visaParam12.track2Flag = true;
visaParamList.push({key: '20', value: visaParam12});

// CLQ.D.020.01_02
var visaParam13 = new emv.VisaParams();
visaParam13.rcp = getRcp(true, true, true, false, true, true);
visaParam13.transProp = '26004000';
//visaParam13.rfTransLimit = 500;// 超过此限额，不能做非接交易
visaParam13.rfFloorLimit = 100000;// 超过此限额，需要联机，不能做脱机交易
visaParam13.rfCvmLimit = 100000;// 超过此限额，需要持卡人验证
visaParam13.cvn17Flag = true;
visaParam13.track1Flag = true;
visaParam13.track2Flag = true;
visaParamList.push({key: '210124', value: visaParam13});

// CLQ.D.020.01_03
var visaParam14 = new emv.VisaParams();
visaParam14.rcp = getRcp(false, true, true, true, true, true);
visaParam14.transProp = '26004000';
visaParam14.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam14.rfFloorLimit = 10000;// 超过此限额，需要联机，不能做脱机交易
visaParam14.rfCvmLimit = 10000;// 超过此限额，需要持卡人验证
visaParam14.cvn17Flag = true;
visaParam14.track1Flag = true;
visaParam14.track2Flag = true;
visaParamList.push({key: '2501240124607080', value: visaParam14});

// CLQ.D.020.01_04
var visaParam15 = new emv.VisaParams();
visaParam15.rcp = getRcp(true, true, true, false, true, true);
visaParam15.transProp = '26004000';
//visaParam15.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam15.rfFloorLimit = 3000;// 超过此限额，需要联机，不能做脱机交易
visaParam15.rfCvmLimit = 2000;// 超过此限额，需要持卡人验证
visaParam15.cvn17Flag = true;
visaParam15.track1Flag = true;
visaParam15.track2Flag = true;
visaParamList.push({key: '29012401246655443322AABBCCDDEEFF', value: visaParam15});

// CLQ.D.020.02_01
var visaParam16 = new emv.VisaParams();
visaParam16.rcp = getRcp(true, true, true, true, true, true);
visaParam16.transProp = '26004000';
visaParam16.rfTransLimit = 3300;// 超过此限额，不能做非接交易
visaParam16.rfFloorLimit = 9900;// 超过此限额，需要联机，不能做脱机交易
visaParam16.rfCvmLimit = 5700;// 超过此限额，需要持卡人验证
visaParam16.cvn17Flag = true;
visaParam16.track1Flag = true;
visaParam16.track2Flag = true;
visaParamList.push({key: '30', value: visaParam16});

// CLQ.D.020.02_02
var visaParam17 = new emv.VisaParams();
visaParam17.rcp = getRcp(true, false, false, true, true, true);
visaParam17.transProp = '26004000';
visaParam17.rfTransLimit = 72200;// 超过此限额，不能做非接交易
visaParam17.rfFloorLimit = 54300;// 超过此限额，需要联机，不能做脱机交易
visaParam17.rfCvmLimit = 19100;// 超过此限额，需要持卡人验证
visaParam17.cvn17Flag = true;
visaParam17.track1Flag = true;
visaParam17.track2Flag = true;
visaParamList.push({key: '320978', value: visaParam17});

// CLQ.D.020.02_03
var visaParam18 = new emv.VisaParams();
visaParam18.rcp = getRcp(false, true, true, true, true, true);
visaParam18.transProp = '26004000';
visaParam18.rfTransLimit = 10000;// 超过此限额，不能做非接交易
visaParam18.rfFloorLimit = 10000;// 超过此限额，需要联机，不能做脱机交易
visaParam18.rfCvmLimit = 10000;// 超过此限额，需要持卡人验证
visaParam18.cvn17Flag = true;
visaParam18.track1Flag = true;
visaParam18.track2Flag = true;
visaParamList.push({key: '3609780250556677', value: visaParam18});

// CLQ.D.020.02_04
var visaParam19 = new emv.VisaParams();
visaParam19.rcp = getRcp(true, true, true, false, false, true);
visaParam19.transProp = '26004000';
//visaParam19.rfTransLimit = 10000;// 超过此限额，不能做非接交易
//visaParam19.rfFloorLimit = 10000;// 超过此限额，需要联机，不能做脱机交易
visaParam19.rfCvmLimit = 2000;// 超过此限额，需要持卡人验证
visaParam19.cvn17Flag = true;
visaParam19.track1Flag = true;
visaParam19.track2Flag = true;
visaParamList.push({key: '39082608266655443322FFEEDDCCBBAA', value: visaParam19});

// CLQ.D.020.03_01
var visaParam20 = new emv.VisaParams();
visaParam20.rcp = getRcp(false, false, false, true, true, true);
visaParam20.transProp = '26004000';
visaParam20.rfTransLimit = 20000;// 超过此限额，不能做非接交易
visaParam20.rfFloorLimit = 30000;// 超过此限额，需要联机，不能做脱机交易
visaParam20.rfCvmLimit = 15000;// 超过此限额，需要持卡人验证
visaParam20.cvn17Flag = true;
visaParam20.track1Flag = true;
visaParam20.track2Flag = true;
visaParamList.push({key: '40', value: visaParam20});

// CLQ.D.020.03_02
var visaParam21 = new emv.VisaParams();
visaParam21.rcp = getRcp(true, false, false, true, true, true);
visaParam21.transProp = '26004000';
visaParam21.rfTransLimit = 5400;// 超过此限额，不能做非接交易
visaParam21.rfFloorLimit = 4400;// 超过此限额，需要联机，不能做脱机交易
visaParam21.rfCvmLimit = 8200;// 超过此限额，需要持卡人验证
visaParam21.cvn17Flag = true;
visaParam21.track1Flag = true;
visaParam21.track2Flag = true;
visaParamList.push({key: '4207', value: visaParam21});

function getRcp(statusCheck, zeroCheck, option, transLimitActive, floorLimitActive, cmvLimitActive) {
    var rcp = 0x00;
    if (statusCheck) {
        rcp = rcp | 0x80;
    }

    if (zeroCheck) {
        rcp = rcp | 0x40;
    }

    if (option) {
        rcp = rcp | 0x20;
    }

    if (transLimitActive) {
        rcp = rcp | 0x10;
    }

    if (cmvLimitActive) {
        rcp = rcp | 0x08;
    }

    if (floorLimitActive) {
        rcp = rcp | 0x04;
    }

    return [rcp, 0x00];
}

function getPubKey(rid, index) {
    for (var i = 0, max = pubKeys.length; i < max; i++) {
        if (rid.compare(pubKeys[i].rid) === 0 && index === pubKeys[i].index) {
            return pubKeys[i];
        }
    }
    console.log('未找到 rid：' + encoding.bufferToHexString(rid) + '，caIndex：' + index);
    return null;
}

function initEmv() {
    //emv.switchDebug('REAL_TIME', {target: 'CONSOLE'});
    emv.init();
    emv.manageAidList(emv.ListOperation.CLEAR);
    aids.forEach(function(aid){
        emv.manageAidList(emv.ListOperation.ADD, aid);
    });

    // 设置默认参数
    emv.manageParams(emv.KernelId.EMV, emv.ListOperation.ADD, {value: defaultBasicParam});
    emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.ADD, {value: defaultPbocParam});
    emv.manageParams(emv.KernelId.VISA, emv.ListOperation.ADD, {value: defaultVisaParam});
    emv.manageParams(emv.KernelId.MASTER, emv.ListOperation.ADD, {value: defaultMasterParam});
    basicParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.EMV, emv.ListOperation.ADD, value);
    });
    visaParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.VISA, emv.ListOperation.ADD, value);
    });
    pbocParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.ADD, value);
    });
    masterParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.MASTER, emv.ListOperation.ADD, value);
    });

    // 设置支持的公钥
    emv.updateCaIndexList('A000000333', '0203050880575861626364656609FE');// rid :公钥id 5个字节，aid的前五个字节；索引0x02 0x03
    emv.updateCaIndexList('A000000003', '010708095153929495969799');
}
function initEmvIntegration() {
    //emv.switchDebug('REAL_TIME', {target: 'CONSOLE'});
    emv.init();
    emv.manageAidList(emv.ListOperation.CLEAR);
    aids.forEach(function(aid){
        emv.manageAidList(emv.ListOperation.ADD, aid);
    });

    // 设置默认参数
    emv.manageParams(emv.KernelId.EMV, emv.ListOperation.ADD, {value: defaultBasicParam});
    emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.ADD, {value: defaultPbocParam});
    emv.manageParams(emv.KernelId.VISA, emv.ListOperation.ADD, {value: defaultVisaParam});
    emv.manageParams(emv.KernelId.MASTER, emv.ListOperation.ADD, {value: defaultMasterParam});
    basicParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.EMV, emv.ListOperation.ADD, value);
    });
    visaParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.VISA, emv.ListOperation.ADD, value);
    });
    pbocParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.ADD, value);
    });
    masterParamList.forEach(function (value) {
        emv.manageParams(emv.KernelId.MASTER, emv.ListOperation.ADD, value);
    });

    // 设置支持的公钥
    emv.updateCaIndexList('A000000333', '0203050880575861626364656609FE');// rid :公钥id 5个字节，aid的前五个字节；索引0x02 0x03
    emv.updateCaIndexList('A000000003', '010708095153929495969799');
    emv.updateCaIndexList('A000000004', 'FEFCFDFBFAFFF3F8');
}
emvData.pubKeyList = pubKeys;
emvData.aidList = aids;
emvData.getPubKey = getPubKey;
emvData.basicParamList = basicParamList;
emvData.visaParamList = visaParamList;
emvData.pbocParamList = pbocParamList;
emvData.masterParamList = masterParamList;
emvData.defaultBasicParam = defaultBasicParam;
emvData.defaultPbocParam = defaultPbocParam;
emvData.defaultVisaParam = defaultVisaParam;
emvData.defaultMasterParam = defaultMasterParam;
emvData.initEmv = initEmv;
emvData.initEmvIntegration = initEmvIntegration;
emvData.getRcp = getRcp;
module.exports = emvData;

},{"buffer":"buffer","emv":"emv","hermes":"hermes","nymph-encoding":"nymph-encoding"}],"emv":[function(require,module,exports){
'use strict';
/**
 * # EMV 内核（模块名：emv）
 * @class nymph.pay.emv
 * @singleton
 * 本模块为 EMV 入口模块，通过 `requrie('emv')` 的方式获取，包含以下两部分内容：
 *
 * - EMV 提供的 API。
 * - 所有与 EMV 相关的类和对象。
 *
 */
// 引用外部模块。
var nymphError = require('error'),
    hermes = require('hermes'),
    Buffer = require('buffer').Buffer,
    encoding = require('nymph-encoding'),
    tools = require('tools'),

// 引用模块内部部件。
    BasicParams = require('./basic-params'),
    CandidateAid = require('./candidate-aid'),
    EcLog = require('./ec-log'),
    Gpo = require('./gpo'),
    HostData = require('./host-data'),
    IcLog = require('./ic-log'),
    InitialData = require('./initial-data'),
    MasterParams = require('./master-params'),
    PbocParams = require('./pboc-params'),
    PubKeyRsa = require('./pub-key-rsa'),
    PubKeySm = require('./pub-key-sm'),
    PubKeySmGroup = require('./pub-key-sm-group'),
    RecCert = require('./rec-cert'),
    Record = require('./record'),
    StartData = require('./start-data'),
    TransData = require('./trans-data'),
    VisaParams = require('./visa-params');

var emv = {
  PLUGINID: 'b0d6d9960172b67b8577dc19eb0429b6',

  instanceId: hermes.NULL,

  isStarted: false,

  bindEvents: function () {
    var self = this;

    /**
     * @event waitForCard
     * 等待卡。
     * 收到此事件，处理完后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {String} flag
     *
     * - 'NORMAL'：首次请求卡
     * - 'TRY_AGAIN'：再次请求卡
     *
     * @member nymph.pay.emv
     */
    self.addListener('emvWaitForCard', function (flag) {
      self.emit('waitForCard', flag);
    });

    /**
     * @event selApp
     * 应用选择事件。
     * 收到此事件，处理完后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {nymph.pay.emv.CandidateAid[]} aidList 候选 AID 列表。
     * @param {Boolean} isReSelect 是否重新选择。
     * @member nymph.pay.emv
     */
    self.addListener('emvSelApp', function (aidListInfo) {
      var i, aid, tempAid, key,
          candAidList = [],
          aidList = aidListInfo.aidCandList;
      for (i = 0; i<aidList.length; i++) {
        candAidList.push(CandidateAid.unpack(aidList[i]));
      }
      self.emit('selApp', candAidList, aidListInfo.reSelectFlag);
    });

    /**
     * @event finalSelection
     * 最终选择。
     * 收到此事件，处理完后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {Object} aid 已选择的 AID，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     * @param {nymph.pay.emv.KernelId} kernelId EMV 内核类型
     * @param {Object} pid 应用 ID，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     * @param {Object} params 已经设置给内核的交易相关参数（基础参数/PBOC 参数/VISA 参数/Master 参数等）。
     * @member nymph.pay.emv
     */
    self.addListener('emvFinalSelection', function (aid, kernelId, pid, params) {
      var pidBuf, key, actualBase, actualPboc, actualVisa,
          aidBuf = new Buffer(aid, 'base64');
      if (pid) {
        pidBuf = new Buffer(pid, 'base64');
      }  else {
        pidBuf = null;
      }

      if (params) {
        if (params.base) {
          params.base = BasicParams.unpack(params.base);
        }
        if (params.pboc) {
          params.pboc = PbocParams.unpack(params.pboc);
        }
        if (params.visa) {
          params.visa = VisaParams.unpack(params.visa);
        }
        if (params.master) {
          params.master = MasterParams.unpack(params.master);
        }
      } else {
        params = null;
      }

      self.emit('finalSelection', aidBuf, kernelId, pidBuf, params);
    });

    /**
     * @event readRecord
     * 读记录。
     * 收到此事件，处理完后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * 收到此事件代表读卡片记录已完成，可根据提供的主账号、公钥索引等信息做相关操作，例如：
     *
     * - 设置公钥
     * - 显示或确认卡号
     * - 查询黑名单
     *
     * @param {nymph.pay.emv.Record} record 读卡片记录返回数据
     * @member nymph.pay.emv
     */
    self.addListener('emvReadRecord', function (record) {
      self.emit('readRecord', Record.unpack(record));
    });

    /**
     * @event cardHolderInputPin
     * 持卡人输 Pin 事件。
     * 收到此事件，处理完后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {Boolean} isOnlinePin 是否是联机 PIN。
     * @param {Number} leftTimes 脱机 PIN 剩余尝试次数。
     * @member nymph.pay.emv
     */
    self.addListener('emvCardHolderInputPin', function (isOnlinePin, leftTimes) {
      self.emit('cardHolderInputPin', isOnlinePin, leftTimes);
    });

    /**
     * @event certVerify
     * 证件验证事件。
     * 收到此事件后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {nymph.pay.emv.CertType} certType 证件类型。
     * @param {String} certNo 证件号码。
     * @member nymph.pay.emv
     */
    self.addListener('emvCertVerify', function (certType, certNo) {
      self.emit('certVerify', certType, certNo);
    });

    /**
     * @event onlineProc
     * 联机事件。
     * 收到此事件，处理完后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {nymph.pay.emv.TransData} transData 联机请求参数
     * @member nymph.pay.emv
     */
    self.addListener('emvOnlineProc', function (transData) {
      self.emit('onlineProc', TransData.unpack(transData));
    });

    /**
     * @event finish
     * 交易结束事件。收到此事件后无需对 EMV 内核做进一步的响应。
     * @param {String} retCode EMV 流程结果。
     * @param {nymph.pay.emv.TransData} transData 交易数据。
     * @member nymph.pay.emv
     */
    self.addListener('emvFinish', function (retCode, transData) {
      var code = self.getReturnCode(retCode);
      if (code === nymphError.UNKNOWN) {
        code = self.getError(retCode);
        if (code === nymphError.UNKNOWN) {
          // 因为从主控传上来的是有符号的整型，要先将有符号的整型转换成无符号的，再转成 16 进制字符串。
          retCode = retCode >>> 0;
          code = retCode.toString(16);
        }
      }
      self.isStarted = false;
      self.emit('finish', code, TransData.unpack(transData));
    });

    /**
     * @event closePinPad
     * 关闭密码键盘事件。主要用户脱机 PIN 验证后通知关闭密码键盘。
     * @member nymph.pay.emv
     */
    self.addListener('emvClosePinPad', function () {
      self.emit('closePinPad');
    });

    /**
     * @event balance
     * 获取到余额事件。
     * @param {Number} balance 余额。
     * @member nymph.pay.emv
     */
    self.addListener('emvBalance', function (balance) {
      self.emit('balance', balance);
    });

    /**
     * @event data
     * 数据事件。收到此事件只需对数据进行处理，无需对 EMV 内核做进一步的响应。
     * @param {nymph.pay.emv.Ins} ins 数据类型。
     * @param {Object} data 不同的 ins，传出来的 data 会不同。
     *
     * - ins = 'SET_TORN'，data 为 [Buffer](https://nodejs.org/api/buffer.html)。
     * - ins = 'DEL_TORN'，data 为 [Buffer](https://nodejs.org/api/buffer.html)。
     * - ins = 'DISPLAY'，data 为包含以下信息的对象：
     *   - messageId：{String}
     *   - flag：{String}
     *   - message：{String}
     *
     * @member nymph.pay.emv
     */
    /**
     * @event finishRf
     * 非接卡结束事件
     * 收到此事件表示 RF 卡已经使用完毕，可以被释放掉了。
     * @member nymph.pay.emv
     */
    self.addListener('emvData', function (ins, data) {
      switch(ins) {
        case self.Ins.SET_TORN:
        case self.Ins.DEL_TORN:
          self.emit('data', ins, new Buffer(data, 'base64'));
          break;
        case self.Ins.DISPLAY:
          self.emit('data', ins, data);
          break;
        case self.Ins.CLOSE_RF:
          self.emit('finishRf');
          break;
      }
    });

    /**
     * @event requestData
     * 请求数据。收到此事件后可用 {@link nymph.pay.emv#eventResponse eventResponse} 方法进行响应，使 EMV 流程继续。
     * @param {nymph.pay.emv.Ins} ins 请求的数据类型。
     * @member nymph.pay.emv
     */
    self.addListener('emvDataRequest', function (ins) {
      self.emit('dataRequest', ins);
    });

    /**
     * @event tlvData
     * 内核发出交易相关的 TLV 数据。收到此事件后可对 TLV 数据进行解析，然后可以使用 {@link nymph.pay.emv#stopProcess stopProcess} 结束流程，也可以使用{@link nymph.pay.emv#eventResponse eventResponse} 方法设置 requestData 的值使流程继续。
     * @param {Object} data TLV 数据。
     * @member nymph.pay.emv
     */
    self.addListener('emvTlvData', function (data) {
      if (data) {
        data = new Buffer(data, 'base64');
      }
      self.emit('tlvData', data);
    });
  },

  /**
   * @method switchDebug
   * @ignore
   * 设置日志模式。不开放给用户使用。
   *
   *     var emv = reuqire('emv');
   *     try {
   *         // 设置实时输出 EMV 日志到控制台
   *         emv.switchDebug('REAL_TIME', {target: 'CONSOLE'});
   *
   *         // 设置实时输出 EMV 日志到串口
   *         // emv.switchDebug('REAL_TIME', {target: 'COM', params: {com: 'USBD'}});
   *     } catch (err) {
   *         // 设置日志模式失败的处理。
   *     }
   *
   *
   * @param {String} mode 日志模式，有以下几种：
   *
   * - 'CLOSE'：关闭日志
   * - 'AFTER_TRADE'：交易完成之后
   * - 'REAL_TIME'：交易过程中实时输出
   *
   * @param {Object} options 日志输出途径。包含以下参数：
   *
   * - target：可以输出到文件、串口
   *   - 'FILE'
   *   - 'COM'
   *   - 'CONSOLE'
   *   - 'NONE'：关闭日志时为此项
   * - params：不同 target 的参数不同：
   *   - COM 方式参数：
   *     - com：串口号
   *   - FILE 方式参数：
   *     - filePath：文件路径
   * @member nymph.pay.emv
   */
  switchDebug: function (mode, options){
    var result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'switchDebug', [mode, options]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to set debug mode.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method init
   * 初始化 EMV。启动应用后执行一次即可。
   *
   *     var emv = reuqire('emv');
   *     try {
   *         emv.init();
   *     } catch (err) {
   *         // EMV 初始化失败的处理。
   *     }
   *
   * @param {nymph.pay.emv.InitialData} [cfg] EMV 初始化参数（目前没有可进行配置的初始化参数）。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  init: function (cfg) {
    var result, errorCode, actualCfg = {};
    if (cfg) {
      actualCfg = cfg;
    }
    result = hermes.exec(this.PLUGINID, this.instanceId, 'init', [actualCfg]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to initialize EMV.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method config
   * 此方法用于手动设置 EMV 参数。
   *
   *     // 以下参数可根据需要进行设置
   *     var basicParam = new emv.BasicParams();
   *     basicParam.termType = 0x22; // 可不设置，默认值为 0x22
   *     basicParam.termCap = new Buffer([0xE0, 0xF1, 0xC8]); // 可不设置，默认值为 [0xE0, 0xF1, 0xC8]
   *     basicParam.additionalTermCap = new Buffer([0x6F, 0x00, 0xF0, 0xF0, 0x01]); // 可不设置，默认值为 [0x6F, 0x00, 0xF0, 0xF0, 0x01]
   *     basicParam.countryCode = new Buffer([0x01, 0x56]); // 可不设置，默认值为 [0x01, 0x56]
   *     basicParam.curCode = new Buffer([0x01, 0x56]); // 可不设置，默认值为 [0x01, 0x56]
   *     basicParam.tacDefault = new Buffer([0xFF, 0xFF, 0xFF, 0xFF, 0xFF]); // 可不设置，默认值为 [0x00, 0x00, 0x00, 0x00, 0x00]
   *     basicParam.tacDenial = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00]); // 可不设置，默认值为 [0x00, 0x00, 0x00, 0x00, 0x00]
   *     basicParam.tacOnline = new Buffer([0xFF, 0xFF, 0xFF, 0xFF, 0xFF]); // 可不设置，默认值为 [0x00, 0x00, 0x00, 0x00, 0x00]
   *     basicParam.floorLimit = 500;
   *     basicParam.randomLimit = 100;
   *     basicParam.randomPercent = 30;
   *     basicParam.randomPercentMax = 90;
   *
   *     var pbocParam = new emv.PbocParams();
   *     pbocParam.isSupportECash = true;
   *     pbocParam.isSupportSM = true;
   *     pbocParam.transProp = '26060000';
   *     pbocParam.ecLimit = 500;
   *     pbocParam.rfTransLimit = 100000;
   *     pbocParam.rfCvmLimit = 200;
   *     pbocParam.rfFloorLimit = 500;
   *
   *     var visaParam = new emv.VisaParams();
   *     //visaParams.rcp 缺省不设置
   *     visaParam.transProp = '26060000';
   *     visaParam.rfTransLimit = 100000;// 超过此限额，不能做非接交易
   *     visaParam.rfCvmLimit = 200;// 超过此限额，需要持卡人验证
   *     visaParam.rfFloorLimit = 500;// 超过此限额，需要联机，不能做脱机交易
   *     visaParam.cvn17Flag = true;
   *     visaParam.track1Flag = true;
   *     visaParam.track2Flag = true;
   *
   *     try {
   *         // 可以一次只设置一个参数
   *         emv.config({base: basicParam});
   *         // 也可以一次设置多个参数
   *         // emv.config({base: basicParam, pboc: pbocParam, visa: visaParam});
   *     } catch (err) {
   *         // 设置失败的处理
   *     }
   *
   * @param {Object} options 要设置的 EMV 交易相关参数。
   * @param {nymph.pay.emv.BasicParams} [options.base] 基本参数
   * @param {nymph.pay.emv.PbocParams} [options.pboc] PBOC 接触与非接交易参数
   * @param {nymph.pay.emv.VisaParams} [options.visa] VISA 非接交易参数
   * @param {nymph.pay.emv.MasterParams} [options.master] MASTER 交易参数
   * @member nymph.pay.emv
   */
  config: function (options) {
    var result, errorCode, key, actualOptions = {}, temp, tempKey, param;

    if (!options) {
      throw {code: nymphError.PARAM_ERR, message: 'options can not be null or undefined!'};
    }

    for (key in options) {
      if (options.hasOwnProperty(key)) {
        if (options[key]) {
          switch (key) {
            case 'base':
              if (typeof options[key] !== 'object') {
                throw {code: nymphError.PARAM_ERR, message: key + ' param should be an object!'};
              }
              actualOptions[key] = BasicParams.pack(options[key]);
              break;
            case 'pboc':
              if (typeof options[key] !== 'object') {
                throw {code: nymphError.PARAM_ERR, message: key + ' param should be an object!'};
              }
              actualOptions[key] = PbocParams.pack(options[key]);
              break;
            case 'visa':
              if (typeof options[key] !== 'object') {
                throw {code: nymphError.PARAM_ERR, message: key + ' param should be an object!'};
              }
              actualOptions[key] = VisaParams.pack(options[key]);
              break;
            case 'master':
              if (typeof options[key] !== 'object') {
                throw {code: nymphError.PARAM_ERR, message: key + ' param should be an object!'};
              }
              actualOptions[key] = MasterParams.pack(options[key]);
              break;
          }
        }
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'config', [actualOptions]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to config.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method getInfo
   * 获取 EMV 信息。
   *
   *     try {
   *         var info = emv.getInfo();
   *     } catch (err) {
   *         // 失败的处理。
   *     }
   *
   * @return {Object} 获取到的 EMV 信息。
   * @return {String} return.version EMV 版本
   * @member nymph.pay.emv
   */
  getInfo: function () {
    var result, errorCode, info;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'getEmvInfo');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get EMV information.', innerCode: result.innerCode};
      }
    }

    info = result.data;
    return info;
  },

  /**
   * @method getTlv
   * 读取单个 TLV 数据元
   *
   *     try {
   *         // 参数为 16 进制字符串
   *         var value = emv.getTlv('9F12');
   *
   *         // 参数为 Array 类型
   *         // var value = emv.getTlv([0x9F, 0x12]);
   *
   *         // 参数为 Buffer 类型
   *         // var tag = new Buffer([0x9F, 0x12]);
   *         // var value = emv.getTlv(tag);
   *     } catch (err) {
   *         // 失败的处理。
   *     }
   *
   * @param {Object/String/Array} tag 待读取的 TAG，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @return {Object} 获取到的 VALUE，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  getTlv: function (tag) {
    var result, errorCode, actualTag;

    try {
      actualTag = tools.toBase64(tag);
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'Invalid tag: ' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'Invalid tag!'};
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'getTlv', [actualTag]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      // if (result.hasOwnProperty('message')) {
      //   throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      // } else {
      //   throw {code: errorCode, message: 'Failed to get TLV.', innerCode: result.innerCode};
      // }
      return null;
    }

    if (result.data) {
      return new Buffer(result.data, 'base64');
    } else {
      return null;
    }
  },

  /**
   * @method setTlv
   * 设置单个 TLV 数据元
   *
   *     try {
   *         // 参数为 16 进制字符串
   *         emv.setTlv(emv.KernelId.EMV, {tag: 'DF06', value: '7C00'});
   *
   *         // 参数为 Array 类型
   *         // emv.setTlv(emv.KernelId.EMV, {tag: [0xDF, 0x06], value: [0x7C, 0x00]});
   *
   *         // 参数为 Buffer 类型
   *         // var tag = new Buffer([0xDF, 0x06]);
   *         // var value = new Buffer([0x7C, 0x00]);
   *         // emv.setTlv(emv.KernelId.EMV, {tag: tag, value: value});
   *     } catch (err) {
   *         // 失败的处理。
   *     }
   *
   * @param {nymph.pay.emv.KernelId} kernelId EMV 内核类型
   * @param {Object} tlv 要进行设置的 TLV 数据元。
   * @param {Object/String/Array} tlv.tag 待设置的 TAG，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @param {Object/String/Array} [tlv.value] tag 值（0-255 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * 如果 value 为空，则表示清空此 tag
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  setTlv: function (kernelId, tlv) {
    var result, errorCode, actualTlv = {};
    if(!kernelId || !tlv) {
      throw {code: nymphError.PARAM_ERR, message: 'kernelId and tlv are both required!'};
    }

    switch (kernelId) {
      case this.KernelId.AMEX:
      case this.KernelId.EMV:
      case this.KernelId.EMV_CONTACTLESS:
      case this.KernelId.JCB:
      case this.KernelId.MASTER:
      case this.KernelId.PBOC:
      case this.KernelId.VISA:
        break;
      default:
        throw {code: nymphError.PARAM_ERR, message: 'kernelId must be an item of emv.KernelId!'};
    }

    try {
      actualTlv.tag = tools.toBase64(tlv.tag);
      if (tlv.value) {
        actualTlv.value = tools.toBase64(tlv.value);
      }
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'invalid tlv:' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'invalid tlv!'};
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'setTlv', [kernelId, actualTlv]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to set TLV.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method setTlvList
   * 设置 TLV 数据元列表
   *
   *     try {
   *         // 参数为 16 进制字符串
   *         emv.setTlvList(emv.KernelId.EMV, 'DF067C00');
   *
   *         // 参数为 Array 类型
   *         // emv.setTlvList(emv.KernelId.EMV, [0xDF, 0x06, 0x7C, 0x00]);
   *
   *         // 参数为 Buffer 类型
   *         // var tlvList = new Buffer([0xDF, 0x06, 0x7C, 0x00]);
   *         // emv.setTlvList(emv.KernelId.EMV, tlvList);
   *     } catch (err) {
   *         // 失败的处理。
   *     }
   *
   * @param {nymph.pay.emv.KernelId} kernelId EMV 内核类型
   * @param {Object/String/Array} tlvList 待设置的 TLV 数据元列表。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  setTlvList: function (kernelId, tlvList) {
    var result, errorCode, actualTlvList;

    if(!kernelId || !tlvList) {
      throw {code: nymphError.PARAM_ERR, message: 'kernelId and tlvList are both required!'};
    }

    switch (kernelId) {
      case this.KernelId.AMEX:
      case this.KernelId.EMV:
      case this.KernelId.EMV_CONTACTLESS:
      case this.KernelId.JCB:
      case this.KernelId.MASTER:
      case this.KernelId.PBOC:
      case this.KernelId.VISA:
        break;
      default:
        throw {code: nymphError.PARAM_ERR, message: 'kernelId must be an item of emv.KernelId!'};
    }

    try{
      actualTlvList = tools.toBase64(tlvList);
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'invalid tlvList: ' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'invalid tlvList!'};
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'setTlvList', [kernelId, actualTlvList]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to set TLV list.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method updateCaIndexList
   * 根据 RID，更新对应的 CA 公钥索引列表。（做非接 EMV 交易时需要更新）
   *
   * - 当 rid 和 indexList 参数都为空时，将清除已经保存的所有公钥索引列表。
   * - 当 rid 不为空，indexList 为空时，将会把此 rid 从公钥索引列表里面删除。
   *
   *     try {
   *         // 参数为 16 进制字符串
   *         emv.updateCaIndexList('A000000333', '02030508805758616263646566');
   *
   *         // 参数为 Array 类型
   *         // emv.updateCaIndexList([0xA0, 0x00, 0x00, 0x03, 0x33], [0x02, 0x03, 0x05, 0x08, 0x80, 0x57, 0x58, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66]);
   *
   *         // 参数为 Buffer 类型
   *         // var rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
   *         // var caIndexList = new Buffer([0x02, 0x03, 0x05, 0x08, 0x80, 0x57, 0x58, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66]);
   *         // emv.updateCaIndexList(rid, caIndexList);
   *     } catch (err) {
   *         // 失败的处理。
   *     }
   *
   * ** 请在 EMV 交易之前更新 CA 公钥索引列表，否则交易过程会出现公钥找不到或者验证失败的错误。**
   * @param {Object/String/Array} [rid] RID（5 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @param {Object/String/Array} [indexList] 索引列表（0-50 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  updateCaIndexList: function (rid, indexList) {
    var result, errorCode, actualRid, actualIndexList;

    try {
      if (rid) {
        actualRid = tools.toBase64(rid);
      } else {
        // rid 为空时，indexList 必须为空，否则无法进行设置。
        if (indexList) {
          throw {code: nymphError.PARAM_ERR, message: 'rid is required!'};
        }
      }
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'invalid rid: ' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'invalid rid!'};
      }
    }

    try {
      if (indexList) {
        actualIndexList = tools.toBase64(indexList);
      } else {
        actualIndexList = null;
      }
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'invalid indexList: ' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'invalid indexList!'};
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'updateCaIndexList', [actualRid, actualIndexList]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to update CA public key index list.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method manageParams
   * 管理各种 EMV 参数，以便在 EMV 交易过程中能够获取到所需的参数。
   *
   *     try {
   *         var defaultBasicParam = new emv.BasicParams();
   *         // defaultBasicParam 的各项参数赋值可参考 {@link nymph.pay.emv#config config()} 方法的示例代码。
   *
   *         var defaultPbocParam = new emv.PbocParams();
   *         // defaultPbocParam 的各项参数赋值可参考 {@link nymph.pay.emv#config config()} 方法的示例代码。
   *
   *         var defaultVisaParam = new emv.VisaParams();
   *         // defaultVisaParam 的各项参数赋值可参考 {@link nymph.pay.emv#config config()} 方法的示例代码。
   *
   *         // 当最后一个参数 param 没有 key 的时候，设置的是 EMV 默认参数
   *         emv.manageParams(emv.KernelId.EMV, emv.ListOperation.ADD, {value: defaultBasicParam});
   *         emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.ADD, {value: defaultPbocParam});
   *         emv.manageParams(emv.KernelId.VISA, emv.ListOperation.ADD, {value: defaultVisaParam});
   *
   *         var pbocParam = new emv.PbocParams();
   *         // pbocParam 的各项参数赋值可参考 {@link nymph.pay.emv#config config()} 方法的示例代码。
   *         // pboc 参数的 key 是 aid，当最后一个参数 param 有 key 的时候，往指定类型的参数列表中添加一个参数
   *         emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.ADD, {key: 'A0000000031010', value: pbocParam});
   *
   *         var visaParam = new emv.VisaParams();
   *         // visaParam 的各项参数赋值可参考 {@link nymph.pay.emv#config config()} 方法的示例代码。
   *         // visa 参数的 key 是 pid，当最后一个参数 param 有 key 的时候，往指定类型的参数列表中添加一个参数
   *         emv.manageParams(emv.KernelId.VISA, emv.ListOperation.ADD, {key:'0001', value: visaParam});
   *
   *         // 当 operation 为 'CLEAR' 的时候，清除指定类型的所有参数
   *         emv.manageParams(emv.KernelId.EMV, emv.ListOperation.CLEAR);
   *         emv.manageParams(emv.KernelId.PBOC, emv.ListOperation.CLEAR);
   *         emv.manageParams(emv.KernelId.VISA, emv.ListOperation.CLEAR);
   *     } catch (err) {
   *         // 设置失败的处理
   *     }
   *
   * @param {nymph.pay.emv.KernelId} kernelId 要设置的参数类型。
   * @param {nymph.pay.emv.ListOperation} operation 列表操作。
   * @param {Object} param 要设置的参数。
   * @param {Object/String/Array} param.key 参数索引。如果 key 为空，则设置默认参数。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @param {nymph.pay.emv.PbocParams/nymph.pay.emv.VisaParams/nymph.pay.emv.BasicParams/nymph.pay.emv.MasterParams} param.value 参数信息。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  manageParams: function (kernelId, operation, param) {
    var result, errorCode, actualParam = {}, tempParam, temp;

    switch (kernelId) {
      case this.KernelId.EMV:
        tempParam = BasicParams;
        break;
      case this.KernelId.MASTER:
        tempParam = MasterParams;
        break;
      case this.KernelId.PBOC:
        tempParam = PbocParams;
        break;
      case this.KernelId.VISA:
        tempParam = VisaParams;
        break;
      case this.KernelId.AMEX:
      case this.KernelId.EMV_CONTACTLESS:
      case this.KernelId.JCB:
        throw {code: nymphError.PARAM_ERR, message: 'Not support this kernel yet:' + kernelId};
      default:
        throw {code: nymphError.PARAM_ERR, message: 'kernelId must be an item of emv.KernelId!'};
    }

    switch (operation) {
      case this.ListOperation.ADD:
        if (param) {
          if (param.value) {
            actualParam.value = tempParam.pack(param.value);
          } else {
            throw {code: nymphError.PARAM_ERR, message: 'The value of param can not be null.'};
          }
        } else {
          throw {code: nymphError.PARAM_ERR, message: 'Please transfer param.'};
        }
        break;
      case this.ListOperation.CLEAR:
      case this.ListOperation.REMOVE:
        break;
      default:
        throw {code: nymphError.PARAM_ERR, message: 'invalid operation!'};
    }

    if (param && param.key) {
      try {
        actualParam.key = tools.toBase64(param.key);
      } catch (err) {
        if (err) {
          throw {code: nymphError.PARAM_ERR, message: 'invalid param key: ' + err.message};
        } else {
          throw {code: nymphError.PARAM_ERR, message: 'invalid param key!'};
        }
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'manageParams', [kernelId, operation, actualParam]);

    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to manage parameters.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method manageAidList
   * 管理 AID 列表，可添加、删除一个 AID，也可以清除整个 AID 列表。
   * ** 请在 EMV 交易之前设置 AID，否则交易过程会出现 AID 找不到的错误。**
   *
   *     try {
   *         var aidBuf = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
   *
   *         // 清除 AID 列表
   *         emv.manageAidList(emv.ListOperation.CLEAR);
   *
   *         // 删除一个 AID（参数是 16 进制字符串）
   *         emv.manageAidList(emv.ListOperation.REMOVE, {aid: 'A000000333'});
   *
   *         // 删除一个 AID（参数是 Array）
   *         emv.manageAidList(emv.ListOperation.REMOVE, {aid: [0xA0, 0x00, 0x00, 0x03, 0x33]});
   *
   *         // 删除一个 AID（参数是 Buffer）
   *         emv.manageAidList(emv.ListOperation.REMOVE, {aid: aidBuf});
   *
   *         // 添加一个 AID（参数是 16 进制字符串）
   *         emv.manageAidList(emv.ListOperation.ADD, {aid: 'A000000333', partSlt: true});
   *
   *         // 添加一个 AID（参数是 Array）
   *         emv.manageAidList(emv.ListOperation.ADD, {aid: [0xA0, 0x00, 0x00, 0x03, 0x33], partSlt: true});
   *
   *         // 添加一个 AID（参数是 Buffer）
   *         emv.manageAidList(emv.ListOperation.ADD, {aid: aidBuf, partSlt: true});
   *     } catch (err) {
   *         // 失败的处理
   *     }
   *
   * @param {nymph.pay.emv.ListOperation} operation 列表操作。
   * @param {Object} aidItem 要操作的 AID。当清除列表时无需传入此参数。
   * @param {Object/String/Array} aidItem.aid AID（5-16 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @param {Boolean} aidItem.partSlt 部分选择标识，默认值为 false。
   *
   * - true：支持
   * - false：不支持（默认值）
   *
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  manageAidList: function (operation, aidItem) {
    var result, errorCode, key, actualAidItem = {}, tempBuf;

    switch (operation) {
      case this.ListOperation.ADD:
      case this.ListOperation.CLEAR:
      case this.ListOperation.REMOVE:
        break;
      default:
        throw {code: nymphError.PARAM_ERR, message: 'invalid operation!'};
    }

    if (operation !== this.ListOperation.CLEAR) {
      if (!aidItem) {
        throw {code: nymphError.PARAM_ERR, message: 'aidItem required!'};
      }
      if (!aidItem.hasOwnProperty('aid')) {
        throw {code: nymphError.PARAM_ERR, message: 'aidItem should have aid!'};
      }

      if (!Buffer.isBuffer(aidItem.aid)) {
          if (aidItem.aid.constructor === Array) {
              actualAidItem.aid = new Buffer(aidItem.aid);
          } else {
              try {
                  actualAidItem.aid = encoding.hexStringToBuffer(aidItem.aid);
              } catch (e) {
                  throw {
                      code: nymphError.PARAM_ERR,
                      message: JSON.stringify(aidItem.aid) + ' is not a valid hex string!'
                  };
              }
          }

          if (actualAidItem.aid === null) {
              throw {
                  code: nymphError.PARAM_ERR,
                  message: JSON.stringify(aidItem.aid) + ' can not be converted to a buffer!'
              };
          }
      } else {
          actualAidItem.aid = aidItem.aid;
      }

      if (actualAidItem.aid.length < 5 || actualAidItem.aid.length > 16) {
          throw {code: nymphError.PARAM_ERR, message: 'AID should be a buffer of length between [5-16].'};
      }
      actualAidItem.aid = actualAidItem.aid.toString('base64');

      if (operation === this.ListOperation.ADD) {
        if (!aidItem.hasOwnProperty('partSlt')) {
          throw {code: nymphError.PARAM_ERR, message: 'Please specify whether the AID support part selection:'+aidItem.aid};
        }
        actualAidItem.partSlt = aidItem.partSlt;
      } else {
        if (!aidItem.hasOwnProperty('partSlt')) {
          actualAidItem.partSlt = false;
        } else {
          actualAidItem.partSlt = aidItem.partSlt;
        }
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'manageAidList', [operation, actualAidItem]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to manage AID list.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method manageRecCert
   * 回收公钥证书管理。
   * ** 请在 EMV 交易之前进行更新，否则 EMV 交易过程会出现公钥过期，验证失败的错误。**
   * @param {nymph.pay.emv.ListOperation} operation 列表操作。
   * @param {nymph.pay.emv.RecCert} recCert 要进行操作的公钥。如果是清空操作，无需传入此参数。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  manageRecCert: function (operation, recCert) {
    var result, errorCode, key, actualRecCert = {};

    switch (operation) {
      case this.ListOperation.CLEAR:
        break;
      case this.ListOperation.ADD:
      case this.ListOperation.REMOVE:
        if (!recCert) {
          throw {code: nymphError.PARAM_ERR, message: 'recCert is required when operation is ADD or REMOVE.'};
        }
        break;
      default:
        throw {code: nymphError.PARAM_ERR, message: 'invalid operation!'};
    }

    if (recCert) {
      if (typeof recCert !== 'object') {
        throw {code: nymphError.PARAM_ERR, message: 'invalid recCert!'};
      }
      for (key in recCert) {
        if (recCert.hasOwnProperty(key)){
          if (key === 'rid' || key === 'sn') {
            actualRecCert[key] = tools.toBase64(recCert[key]);
          } else {
            actualRecCert[key] = recCert[key];
          }
        }
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'manageRecCert', [operation, actualRecCert]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to recycle public key certificate.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @ignore
   * @method checkOtherCards
   * 在 EMV 交易过程卡的优先级为：磁条卡 > 接触式 IC 卡 > 非接触式 IC 卡。因此需要在交易开始之前设置是否监听其他卡槽。
   * @param {Object} options
   * @param {Boolean} options.checkMag 是否监听磁条卡槽。true-是，false-否。
   * @param {Boolean} options.checkIc 是否监听接触式 IC 卡槽。true-是，false-否。
   */
  checkOtherCards: function (options) {
    var result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'checkOtherCards', [options]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to set other cards listener.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method startProcess
   * 启动 EMV 流程。
   *
   *     try {
   *         var startData = new emv.StartData();
   *         startData.pseFlag = emv.PseFlag.PSE_AID;
   *         var gpo = new emv.Gpo();
   *         gpo.amount = 1;
   *         gpo.otherAmount = 0;
   *         gpo.transDate = 150824;
   *         gpo.transTime = 172500;
   *         gpo.trace = 1234;
   *         gpo.serviceType = emv.ServiceType.GOOD;
   *         gpo.gacFlag = emv.GacFlag.NON;
   *         startData.gpo = gpo;
   *         startData.purpose = emv.StartPurpose.NORMAL;
   *         // 要对 EMV 的各个事件进行监听处理，事件绑定请参见 {@link nymph.pay.emv#eventResponse eventResponse()} 方法的示例代码。
   *         emv.bindEvents();
   *         // 启动 EMV 流程
   *         emv.startProcess(startData);
   *     } catch (err) {
   *         // 失败的处理
   *     }
   *
   * @fires waitForCard
   * @param {nymph.pay.emv.StartData} startData EMV 交易流程数据
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  startProcess: function (startData) {
    var result, errorCode, actualStartData;

    if (!startData) {
      throw {code: nymphError.PARAM_ERR, message:'startData is required!'};
    }
    if (typeof startData !== 'object') {
      throw {code: nymphError.PARAM_ERR, message:'startData is invalid!'};
    }

    try {
      actualStartData = StartData.pack(startData);
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'invalid startData:' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'invalid startData!'};
      }
    }


    result = hermes.exec(this.PLUGINID, this.instanceId, 'startProcess', [actualStartData]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to start EMV process.', innerCode: result.innerCode};
      }
    } else {
      this.isStarted = true;
    }
  },

  /**
   * @method setCaPubKey
   * 此方法为 EMV 流程过程中进行 CA 公钥数据的设置。
   *
   *     try {
   *         // 设置 RSA 算法公钥
   *         var pubKey1 = new emv.PubKeyRsa();
   *         pubKey1.rid = new Buffer([0xA0, 0x00, 0x00, 0x99, 0x99]);
   *         pubKey1.index = 0xE1;
   *         pubKey1.mod = new Buffer([0x99, 0xC5, 0xB7, 0x0A, 0xA6, 0x1B, 0x4F, 0x4C, 0x51, 0xB6,
   *           0xF9, 0x0B, 0x0E, 0x3B, 0xFB, 0x7A, 0x3E, 0xE0, 0xE7, 0xDB,
   *           0x41, 0xBC, 0x46, 0x68, 0x88, 0xB3, 0xEC, 0x8E, 0x99, 0x77,
   *           0xC7, 0x62, 0x40, 0x7E, 0xF1, 0xD7, 0x9E, 0x0A, 0xFB, 0x28,
   *           0x23, 0x10, 0x0A, 0x02, 0x0C, 0x3E, 0x80, 0x20, 0x59, 0x3D,
   *           0xB5, 0x0E, 0x90, 0xDB, 0xEA, 0xC1, 0x8B, 0x78, 0xD1, 0x3F,
   *           0x96, 0xBB, 0x2F, 0x57, 0xEE, 0xDD, 0xC3, 0x0F, 0x25, 0x65,
   *           0x92, 0x41, 0x7C, 0xDF, 0x73, 0x9C, 0xA6, 0x80, 0x4A, 0x10,
   *           0xA2, 0x9D, 0x28, 0x06, 0xE7, 0x74, 0xBF, 0xA7, 0x51, 0xF2,
   *           0x2C, 0xF3, 0xB6, 0x5B, 0x38, 0xF3, 0x7F, 0x91, 0xB4, 0xDA,
   *           0xF8, 0xAE, 0xC9, 0xB8, 0x03, 0xF7, 0x61, 0x0E, 0x06, 0xAC,
   *           0x9E, 0x6B]);
   *         pubKey1.exponent = new Buffer([0x03]);
   *         //pubKey1.expDate 根据需要设置
   *         //pubKey1.hash 根据需要设置
   *         emv.setCaPubKey('RSA', pubKey1);
   *
   *         // 设置 SM 算法公钥
   *         var pubKey2 = new emv.PubKeySm();
   *         pubKey2.rid = new Buffer([0xA0, 0x00, 0x00, 0x03, 0x33]);
   *         pubKey2.index = 0x57;
   *         pubKey2.mod = 'E8105E77861FD2EB727C84E36D3D4A5666BD0ADCE8781F0145D3D82D72B92748E22D5404C6C41F3EC8B790DE2F61CF29FAECB168C79F5C8666762D53CC26A460';
   *         pubKey2.expDate = '20201231';
   *         emv.setCaPubKey('SM', pubKey1);
   *     } catch (err) {
   *         // 失败的处理
   *     }
   *
   * @param {String} algorithmType 公钥算法类型
   *
   * - 'SM'：SM 算法
   * - 'RSA'：RSA 算法
   *
   * @param {nymph.pay.emv.PubKeySm/nymph.pay.emv.PubKeyRsa} pubKey CA 公钥数据。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  setCaPubKey: function (algorithmType, pubKey) {
    var result, errorCode, actualPubKey, temp;

    if (algorithmType !== 'SM' && algorithmType !== 'RSA') {
      throw {code: nymphError.PARAM_ERR, message: 'Not support: ' + algorithmType};
    }

    if (!pubKey) {
      throw {code: nymphError.PARAM_ERR, message: 'pubKey is required!'};
    }

    if (algorithmType === 'SM') {
      temp = PubKeySm;
    } else {
      temp = PubKeyRsa;
    }
    try {
      actualPubKey = temp.pack(pubKey);
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message: 'invalid pubKey: ' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'invalid pubKey! '};
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'setCaPubKey', [algorithmType, actualPubKey]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to set CA public key.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method getDataApdu
   * 此方法为 EMV 流程中收到 `finalSelection` 事件后使用 APDU 命令方式获取卡片数据元。
   * @param {Object/String/Array} tag 数据元标签。第一个字节为 p1，第二个字节为 p2，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @return {Object} tag 的值。数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  getDataApdu: function (tag) {
    var result, errorCode, data;
    result = hermes.exec(this.PLUGINID, this.instanceId, 'getDataApdu', [tools.toBase64(tag)]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get data apdu.', innerCode: result.innerCode};
      }
    }
    data = new Buffer(result.data, 'base64');
    return data;
  },

  /**
   * @method getBalance
   * 此方法为 EMV 流程中收到 `finalSelection` 事件后获取电子现金余额。
   *
   *     try {
   *         var balance = emv.getBalance();
   *     } catch (err) {
   *         // 失败的处理
   *     }
   *
   * @return {Number} 电子现金余额，以分为单位的整数，如 1111 表示 11.11 元
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  getBalance: function () {
    var result, errorCode, balance;
    result = hermes.exec(this.PLUGINID, this.instanceId, 'getBalance');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get EC balance.', innerCode: result.innerCode};
      }
    }
    return result.data;
  },

  /**
   * @method getLogs
   * 此方法用于 EMV 流程中收到 `selApp` 事件后获取日志，获取日志后 EMV 流程会结束，产生 `finish` 事件。
   *
   *     try {
   *         var icLogs = getLogs('A0000003330101', 'IC');
   *         icLogs.forEach(function (log, index) {
   *             // 对每个 log 的处理。
   *         });
   *
   *         var ecLogs = getLogs('A0000003330101', 'EC');
   *         ecLogs.forEach(function (log, index) {
   *             // 对每个 log 的处理。
   *         });
   *     } catch (err) {
   *         // 失败的处理
   *     }
   *
   * @param {Object/String/Array} aid 已选中的 AID（不超过 16 个 byte 字节），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
   * @param {String} logType 日志类型。
   *
   * - 'IC'：获取IC卡卡片交易日志
   * - 'EC'：获取IC卡卡片圈存日志
   *
   * @return {nymph.pay.emv.IcLog[]/nymph.pay.emv.EcLog[]} 日志列表
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  getLogs: function (aid, logType) {
    var result, errorCode, i, logs = [], tempLogs, actualAid;
    if (!aid || !logType) {
      throw {code: nymphError.PARAM_ERR, message: 'aid and logType are both required!'};
    }

    try {
      actualAid = tools.toBase64(aid);
    } catch (err) {
      if (err) {
        throw {code: nymphError.PARAM_ERR, message:  'Invalid aid: ' + err.message};
      } else {
        throw {code: nymphError.PARAM_ERR, message: 'Invalid aid!'};
      }
    }

    if (logType !== 'IC' && logType !== 'EC') {
      throw {code: nymphError.PARAM_ERR, message: 'invalid logType!'};
    }
    result = hermes.exec(this.PLUGINID, this.instanceId, 'getLogs', [actualAid, logType]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get card logs.', innerCode: result.innerCode};
      }
    }

    if (result.data) {
      tempLogs = result.data;
      tempLogs.forEach(function(item,index){
        var log, unpackedLog;
        if (logType === 'IC') {
          log = IcLog;
        } else {
          log = EcLog;
        }

        unpackedLog = log.unpack(item);
        logs.push(unpackedLog);
      });
    }

    return logs;
  },

  /**
   * @method eventResponse
   * EMV 事件响应。当收到 EMV 的事件以后，需要调用此方法来进行响应，让 EMV 流程正常继续下去。
   *
   *     // 一次只对一个事件进行响应，以下示例代码将所有事件响应列出。
   *     function bindEmvEvents() {
   *         emv.addListener('waitForCard', function (flag) {
   *             // 根据需要进行弹框等操作提示用户插卡或者挥卡
   *             // 获取卡。
   *             cards.waitForCard([{
   *               type: cards.CardType.CPUCARD,
   *               slot: cards.SlotType.ICC1
   *             },{
   *               type: cards.CardType.CPUCARD,
   *               slot: cards.SlotType.RF
   *             }], function (err, card) {
   *             	  if (err) {
   *                    switch (err.code) {
   *                    case nymphError.CANCELLED:
   *                      // 取消读卡的处理。
   *                      break;
   *                    default: // 其他错误情况。
   *                      break;
   *                    }
   *                 } else {
   *                     // 保存卡实例
   *                }
   *             });
   *         });
   *         emv.addListener('selApp', function (candAidList, isReSelect) {
   *             // 根据需要弹框让用户选择
   *             // 以下示例代码选择第 1 个 AID 来让 EMV 流程继续
   *             var selectedAid = candAidList[0];
   *             try {
   *                 // 做了获取日志操作以后就不用再 response 给 emv 内核。
   *                 switch (emvProcessData.startData.purpose) {
   *                   case 'ECLOG':
   *                     var ecLogs = emv.getLogs(selectedAid.aid, 'EC');
   *                     ecLogs.forEach(function (log, index) {
   *                       // 对每个 log 进行操作
   *                     });
   *                     return;
   *                   case 'ICLOG':
   *                     var icLogs = emv.getLogs(selectedAid.aid, 'IC');
   *                     icLogs.forEach(function (log, index) {
   *                       // 对每个 log 进行操作
   *                     });
   *                     return;
   *               }
   *             } catch (err) {
   *                 // 获取日志失败的处理
   *                 return;
   *             }
   *
   *             // 让 EMV 流程继续下去
   *             emv.eventResponse({selApp: selectedAid.aid});
   *         });
   *         emv.addListener('finalSelection', function (aid, kernelId, pid, params) {
   *           	// 根据需要对 EMV 参数进行设置
   *           	params.base.tacDenial = [0xFF, 0x00, 0x00, 0x00, 0x00];
     *          emv.config({base: params.base});
   *
   *            // 获取余额（可选）
   *            try {
   *                 var balance = emv.getBalance();
   *            } catch (err) {
   *                 // 可以主动调用 `stopProcess` 方法结束 EMV 流程。也可以不做处理，让内核继续下去
   *            }
   *
   *            // 如果 GPO 参数与启动流程时候一样没有变化，则此处直接传入空让 EMV 流程继续
   *            emv.eventResponse({finalSelection: null});
   *            // 如果 GPO 参数与启动流程时候不一样，比如交易金额发生变化，则传入新的 GPO 参数让 EMV 流程继续
   *            //var gpo = new emv.Gpo();
   *            //gpo.amount = 2;
   *            //emv.eventResponse({finalSelection: gpo});
   *         });
   *
   *         emv.addListener('finishRf', function () {
   *            	// 蜂鸣
   *             media.beep(media.BeepMode.NORMAL);
   *             // 收到此事件，说明后续 EMV 流程不再需要非接卡片，此时可将卡片释放掉。
   *             card.release();
   *         });
   *
   *         emv.addListener('readRecord', function (record) {
   *             // 设置公钥
   *             var ridBuf = new Buffer(5);
   *             record.aid.copy(ridBuf, 0, 0, ridBuf.length);
   *             // 从公钥列表中找出所需的公钥，进行设置。其中，公钥列表是应用从后台下载或者自行维护的一个列表。
   *             // 以下示例代码是从 emvData 中的公钥列表，由 RID 和 index 唯一确定出一个公钥。
   *             var pubKey = emvData.getPubKey(ridBuf, record.pubKeyIndex);
   *             if (pubKey) {
   *               try {
   *                 emv.setCaPubKey(record.algorithm, pubKey);
   *               } catch (err) {
   *                 // 可以主动调用 `stopProcess` 方法结束 EMV 流程。也可以不做处理，让内核决定是否要继续流程
   *               }
   *             }
   *
   *             // 根据需要显示确认卡号、查询黑名单
   *             // 让 EMV 流程继续下去
   *             emv.eventResponse({readRecord: {isBlack: false, accumulatedAmount: 10000}});
   *         });
   *
   *         emv.addListener('cardHolderInputPin', function (isOnlinePin, leftTimes) {
   *             if (isOnlinePin) {
   *                 // 调用密码键盘的 `inputOnlinePin()` 方法（调用的示例代码请参见 {@link nymph.dev.pinPad.PinPad#inputOnlinePin inputOnlinePin()}），让用户输入密码，并将结果传递给 EMV。
   *                 emv.eventResponse({cardHolderInputPin: emv.ConfirmResult.YES}); // 用户确认密码输入
   *                 // emv.eventResponse({cardHolderInputPin: emv.ConfirmResult.CANCEL}); // 用户取消密码输入/用户没有输密码直接按确认
   *                 // emv.eventResponse({cardHolderInputPin: emv.ConfirmResult.NO}); // 密码输入出错
   *             } else {
   *                 // 调用密码键盘的 `inputOfflinePin()` 方法（调用的示例代码请参见 {@link nymph.dev.pinPad.PinPad#inputOfflinePin inputOfflinePin()}），让用户输入密码，并将结果传递给 EMV。
   *                 emv.eventResponse({cardHolderInputPin: emv.ConfirmResult.YES}); // 用户确认密码输入
   *                 // emv.eventResponse({cardHolderInputPin: emv.ConfirmResult.CANCEL}); // 用户取消密码输入/用户没有输密码直接按确认
   *                 // emv.eventResponse({cardHolderInputPin: emv.ConfirmResult.NO}); // 密码输入出错
   *             }
   *         });
   *
   *         emv.addListener('certVerify', function (certType, certNo) {
   *             // 根据需要进行弹框等操作让用户确认证件信息
   *             // 让 EMV 流程继续下去
   *             emv.eventResponse({certVerify: emv.ConfirmResult.YES});
   *         });
   *         emv.addListener('onlineProc', function (transData) {
   *         	   // 与后台进行联机
   *         	   // 将与后台联机的结果传递给 EMV。以下为示例代码，实际开发时请将后台返回的数据赋值给 hostData。
   *             var hostData = new emv.HostData();
   *             hostData.state = 'SUCCESS';
   *             hostData.arc = [0x30, 0x30];
   *             hostData.authFlag = true;
   *             var field55 = nymphEncoding.hexStringToBuffer('9A031503179F21031056289F02060000000000109F03060000000000009F1A0201565F2A0201569F4E14CEEFC1F7B2E2CAD4C9CCBBA700000000000000009C01199F36022D10');
   *             hostData.field55 = field55;
   *             // 让 EMV 流程继续下去
   *             emv.eventResponse({onlineProc: hostData});
   *         });
   *         emv.addListener('finish', function (retCode, transData) {
   *             // 根据需要进行弹框等操作提示用户取卡
   *            cards.waitForCardTaken(card, function (err) {
   *                // 取卡结果处理
   *           });
   *         });
   *     }
   *
   * @param {Object} params 事件响应参数。不同的事件，响应的参数不一样。
   *
   * @param {Object} params.selApp 选择应用事件响应参数，值为用户选择的 AID，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
   *
   * @param {nymph.pay.emv.Gpo} params.finalSelection 最终选择事件响应参数。如果与启动流程时候的 GPO 参数一致，可直接设置为 null。
   *
   * @param {Object} params.readRecord 读卡片记录事件响应参数。
   * @param {Boolean} params.readRecord.isBlack 是否黑名单账号：false-否，true-是
   * @param {Number} params.readRecord.accumulatedAmount 同一张卡片连续几笔脱机交易的累积金额。以分为单位的整数，如 1111 表示 11.11 元。
   *
   * @param {nymph.pay.emv.ConfirmResult} params.certVerify 证件验证事件响应参数。
   *
   * @param {nymph.pay.emv.ConfirmResult} params.cardHolderInputPin 输 PIN 事件响应参数。
   *
   * @param {nymph.pay.emv.HostData} params.onlineProc 联机处理事件响应参数。
   *
   * @param {Object/String/Array} params.requestData EMV 内核请求数据事件响应参数。TLV 列表的 buffer 数据。
   *
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   * @member nymph.pay.emv
   */
  eventResponse: function (params) {
    var result, errorCode, key, actualParams = {};
    if (!params) {
      throw {code: nymphError.PARAM_ERR, message: 'params is required!'};
    }
    if (typeof params !== 'object'){
      throw {code: nymphError.PARAM_ERR, message: 'params should be an object!'};
    }

    for (key in params) {
      if (params.hasOwnProperty(key)) {
        switch (key) {
          case 'selApp':
            actualParams[key] = tools.toBase64(params[key]);
            break;
          case 'readRecord':
            actualParams[key] = {};
            actualParams[key].accumulatedAmount = params[key].accumulatedAmount;
            actualParams[key].isBlack = params[key].isBlack;
            break;
          case 'finalSelection':
            if (params[key] === null) {
              actualParams[key] = {};
            } else {
              actualParams[key] = Gpo.pack(params[key]);
            }
            break;
          case 'onlineProc':
            actualParams[key] = HostData.pack(params[key]);
            break;
          case 'requestData':
            actualParams[key] = tools.toBase64(params[key]);
            break;
          default:
            actualParams[key] = params[key];
            break;
        }
      }
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'eventResponse', [actualParams]);
    errorCode = this.getError(result.innerCode);
    // console.log('eventResponse actualParams:' + JSON.stringify(actualParams));
    // console.log('eventResponse result:' + JSON.stringify(result));
    // console.log('eventResponse errorCode:' + JSON.stringify(errorCode));
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to response to EMV.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method clean
   * 清理内核交易数据
   *
   *     try {
   *         emv.clean();
   *     } catch (err) {
   *         // 失败的处理
   *     }
   * @member nymph.pay.emv
   */
  clean: function () {
    var result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'clean');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to clean EMV transaction data.', innerCode: result.innerCode};
      }
    }
  },

  /**
   * @method stopProcess
   * 此方法用于主动停止 EMV 流程。停止结果由 finish 事件传出。
   * @param {nymph.error.NymphError} reason 停止 EMV 流程的原因。
   * @member nymph.pay.emv
   */
  stopProcess: function (reason) {
    var self = this,
        actualReason = 'STOP';
    if (reason) {
      actualReason = reason;
    }
    hermes.exec(self.PLUGINID, self.instanceId, 'stopProcess', [actualReason]);
  },

  /**
   * @ignore
   * 此方法用于将指定类型的参数转换成 TLV 格式的 buffer。
   * @param {String} type EMV 内核类型。
   * @param {Object} param 要转换成 TLV 的参数。
   * @returns {Object}  TLV 格式的 buffer。
   */
  getTlvData: function (type, param) {
    var result, errorCode, temp, key, actualParam;
    switch (type) {
      case 'EMV':
        actualParam = BasicParams.pack(param);
        break;
      case 'PBOC':
        actualParam = PbocParams.pack(param);
        break;
      case 'VISA':
        actualParam = VisaParams.pack(param);
        break;
      case 'MASTER':
        actualParam = MasterParams.pack(param);
        break;
      case 'START_DATA':
        actualParam = StartData.pack(param);
        break;
      case 'GPO':
        temp = new Gpo();
        actualParam = Gpo.pack(param);
        break;
      case 'TERMINAL_MANAGE':
      case 'AID':
      case 'CARDHOLDER_VERIFY_RESULT':
        actualParam = param;
        break;
      case 'HOST_DATA':
        actualParam = HostData.pack(param);
        break;
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'getTlvData', [type, actualParam]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get param TLV data.', innerCode: result.innerCode};
      }
    }

    if (result.data) {
      return new Buffer(result.data, 'base64');
    } else {
      return null;
    }
  },

  /**
   * @ignore
   * 此方法用于获取所有的参数（测试使用）。
   * @returns {Object}  所有的参数。
   */
  getParams: function () {
    var result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'getParams');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      if (result.hasOwnProperty('message')) {
        throw {code: errorCode, message: result.message, innerCode: result.innerCode};
      } else {
        throw {code: errorCode, message: 'Failed to get params.', innerCode: result.innerCode};
      }
    }
    return result.data;
  },

  /**
   * @ignore
   * @param {Number} innerCode 底层上传的返回码
   * @returns {String} 返回码对应的字符串
   * @member nymph.pay.emv
   */
  getError: function (innerCode) {
    var ErrorCode = this.ErrorCode;
    switch (innerCode) {
      case -8000:
        return ErrorCode.EMV_BASE_ERR;
      case -8001: // AID 长度错误或为空
        return ErrorCode.EMV_INVALID_AID;
      case -8002: // 动作标识错误。
        return ErrorCode.EMV_INVALID_OPERATION;
      case -8003: // AID 存储空间已满（ 当前内核最多支持 25 个 AID）
        return ErrorCode.EMV_AID_LIST_FULL;
      case -8004: // 部分选择标识错误
        return ErrorCode.EMV_PART_SELECT_ERR;
      case -8005: // CA 公钥索引列表已满（当前内核最多可支持 6 组不同 RID 公钥索引列表）
        return ErrorCode.EMV_CA_INDEX_LIST_FULL;
      case -8006: // 参数错误， RID 为空
        return ErrorCode.EMV_RID_NULL;
      case -8007: // 公钥索引列表长度超过最大值
        return ErrorCode.EMV_CA_INDEX_LIST_LEN_EXCEED;
      case -8008: // 公钥 Hash 值校验失败
        return ErrorCode.EMV_CA_HASH_FAILED;
      case -8009: // 公钥数据格式错，请严格按照公钥结构定义的数据格式设置公钥数据
        return ErrorCode.EMV_CA_DATA_ERR;
      case -8010: // 回收证书列表空间已满
        return ErrorCode.EMV_REC_CERT_LIST_FULL;
      case -8011: // 添加的回收证书已经存在，重复添加
        return ErrorCode.EMV_REC_CERT_ALREADY_EXIST;
      case -8012: // 参数错误，回收证书指针为空
        return ErrorCode.EMV_REC_CERT_NULL;
      case -8013: // 参数错误， DOL 值域及其长度指针为空
        return ErrorCode.EMV_DOL_NULL;
      case -8014: // 参数错误， DOL 类型错误
        return ErrorCode.EMV_DOL_TYPE_ERR;
      case -8015: // 设置 DOL 长度超过最大长度
        return ErrorCode.EMV_DOL_LEN_EXCEED;
      case -8016: // DOL 数据格式错误
        return ErrorCode.EMV_DOL_DATA_ERR;
      case -8017: // EMV 工作线程忙碌中，请稍后再尝试
        return ErrorCode.EMV_BUSY;
      case -8018: // 信号标识错误， 交易未激活不能发送 NEXT 信号
        return ErrorCode.EMV_PROCESS_NOT_STARTED;
      case -8019: // 参数数据不符合 TLV 格式
        return ErrorCode.EMV_PARAM_NOT_TLV;
      case -8020: // 信号标识错误，未定义的信号标识 XX
        return ErrorCode.EMV_UNSUPPORTED_CMD;
      case -8021: // 信号参数长度错误
        return ErrorCode.EMV_CMD_PARAM_LEN_ERR;
      case -8022: // 参数错误
        return ErrorCode.EMV_TLV_PARAM_ERR;
      case -8023: // IC 卡数据元标签，不可设置
        return ErrorCode.EMV_UNSUPPORTED_IC_TAG;
      case -8024: // 不可识别内核类型
        return ErrorCode.EMV_UNKNOWN_KERNEL;
      case -8025: // 数据格式错误
        return ErrorCode.EMV_DATA_ERR;
      case -8026: // 该标签未被赋值
        return ErrorCode.EMV_TAG_NOT_SET;
      case -8027: // 不可识别标签
        return ErrorCode.EMV_UNKNOWN_TAG;
      case -8028: // 标签错误
        return ErrorCode.EMV_TAG_ERR;
      case -8029: // 卡片不支持 IC 日志获取
        return ErrorCode.EMV_CARD_NOT_SUPPORT_IC_LOG;
      case -8030: // 卡片不支持 EC 日志获取
        return ErrorCode.EMV_CARD_NOT_SUPPORT_EC_LOG;
      case -8031: // 请尝试其他通信界面
        return ErrorCode.EMV_OTHER_INTERFACE;
      case -8999: // 其他异常错误
        return ErrorCode.EMV_OTHER_ERR;
      default:
        return nymphError.getError(innerCode);
    }
  },

  /**
   * @ignore
   * @param {Number} retCode EMV 交易结果码
   * @returns {String} 返回码对应的字符串
   * @member nymph.pay.emv
   */
  getReturnCode: function (retCode) {
    var self = this;
    switch (retCode) {
      case 0xEE01:
        return self.ReturnCode.BUSY; // EMV 工作线程忙碌中，请稍候再尝试
      case 0xEE02:
      case 0xF1A7E001:
        return self.ReturnCode.NO_APP; // 终端卡片应用未匹配， 无候选应用
      case 0xEE03:
        return self.ReturnCode.NO_PUB_KEY; // 非接小额支付，检测到未设置交易公钥
      case 0xEE04:
        return self.ReturnCode.EXPIRY; // 卡片应用过期，交易终止
      case 0xEE06:
        return self.ReturnCode.FLASH_CARD; // 非接快速支付，发生闪卡
      case 0xEE07:
        return self.ReturnCode.STOP; // STOP 信号请求终止，交易主动退出
      case 0xEE08:
        return self.ReturnCode.REPOWER_ICC; // 卡片通讯错误
      case 0xEE09:
        return self.ReturnCode.REFUSE_SERVICE; // 卡片不允许服务
      case 0xEE0A:
        return self.ReturnCode.CARD_LOCK; // 卡片锁定(SW=6A81)
      case 0xEE0B:
        return self.ReturnCode.APP_LOCK; // 应用锁定(SW=6283)
      case 0xEE0C:
        return self.ReturnCode.EXCEED_CTLMT; // 交易金额超过非接限额
      case 0xEE0D:
        return self.ReturnCode.GPO_6985; // GPO 卡片返回 6985
      case 0xEE0E:
        return self.ReturnCode.GAC_6985; // Generate AC 卡片返回 6985
      default:
        return nymphError.UNKNOWN;
    }
  },
};

/**
 * # EMV 错误码
 * @class nymph.pay.emv.ErrorCode
 */
var ErrorCode = {
  /**
   * @property {String} [EMV_BASE_ERR='EMV_BASE_ERR'] 基础错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_BASE_ERR: 'EMV_BASE_ERR',

  /**
   * @property {String} [EMV_INVALID_AID='EMV_INVALID_AID'] AID 长度错误或者 AID 为空。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_INVALID_AID: 'EMV_INVALID_AID',

  /**
   * @property {String} [EMV_INVALID_OPERATION='EMV_INVALID_OPERATION'] 动作标识错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_INVALID_OPERATION: 'EMV_INVALID_OPERATION',

  /**
   * @property {String} [EMV_AID_LIST_FULL='EMV_AID_LIST_FULL'] AID 存储空间已满（ 当前内核最多支持 25 个 AID）。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_AID_LIST_FULL: 'EMV_AID_LIST_FULL',

  /**
   * @property {String} [EMV_PART_SELECT_ERR='EMV_PART_SELECT_ERR'] 部分选择标识错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_PART_SELECT_ERR: 'EMV_PART_SELECT_ERR',

  /**
   * @property {String} [EMV_CA_INDEX_LIST_FULL='EMV_CA_INDEX_LIST_FULL'] CA 公钥索引列表已满（当前内核最多可支持 6 组不同 RID 公钥索引列表）。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CA_INDEX_LIST_FULL: 'EMV_CA_INDEX_LIST_FULL',

  /**
   * @property {String} [EMV_RID_NULL='EMV_RID_NULL'] 参数错误， RID 为空。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_RID_NULL: 'EMV_RID_NULL',

  /**
   * @property {String} [EMV_CA_INDEX_LIST_LEN_EXCEED='EMV_CA_INDEX_LIST_LEN_EXCEED'] 公钥索引列表长度超过最大值。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CA_INDEX_LIST_LEN_EXCEED: 'EMV_CA_INDEX_LIST_LEN_EXCEED',

  /**
   * @property {String} [EMV_CA_HASH_FAILED='EMV_CA_HASH_FAILED'] 公钥 Hash 值校验失败。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CA_HASH_FAILED: 'EMV_CA_HASH_FAILED',

  /**
   * @property {String} [EMV_CA_DATA_ERR='EMV_CA_DATA_ERR'] 公钥数据格式错，请严格按照公钥结构定义的数据格式设置公钥数据。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CA_DATA_ERR: 'EMV_CA_DATA_ERR',

  /**
   * @property {String} [EMV_REC_CERT_LIST_FULL='EMV_REC_CERT_LIST_FULL'] 回收证书列表空间已满。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_REC_CERT_LIST_FULL: 'EMV_REC_CERT_LIST_FULL',

  /**
   * @property {String} [EMV_REC_CERT_ALREADY_EXIST='EMV_REC_CERT_ALREADY_EXIST'] 添加的回收证书已经存在，重复添加。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_REC_CERT_ALREADY_EXIST: 'EMV_REC_CERT_ALREADY_EXIST',

  /**
   * @property {String} [EMV_REC_CERT_NULL='EMV_REC_CERT_NULL'] 参数错误，回收证书指针为空。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_REC_CERT_NULL: 'EMV_REC_CERT_NULL',

  /**
   * @property {String} [EMV_DOL_NULL='EMV_DOL_NULL'] 参数错误， DOL 值域及其长度指针为空。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_DOL_NULL: 'EMV_DOL_NULL',

  /**
   * @property {String} [EMV_DOL_TYPE_ERR='EMV_DOL_TYPE_ERR'] 参数错误， DOL 类型错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_DOL_TYPE_ERR: 'EMV_DOL_TYPE_ERR',

  /**
   * @property {String} [EMV_DOL_LEN_EXCEED='EMV_DOL_LEN_EXCEED'] 设置 DOL 长度超过最大长度。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_DOL_LEN_EXCEED: 'EMV_DOL_LEN_EXCEED',

  /**
   * @property {String} [EMV_DOL_DATA_ERR='EMV_DOL_DATA_ERR'] DOL 数据格式错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_DOL_DATA_ERR: 'EMV_DOL_DATA_ERR',

  /**
   * @property {String} [EMV_BUSY='EMV_BUSY'] EMV 工作线程忙碌中，请稍后再尝试。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_BUSY: 'EMV_BUSY',

  /**
   * @property {String} [EMV_PROCESS_NOT_STARTED='EMV_PROCESS_NOT_STARTED'] 信号标识错误， 交易未激活不能发送 NEXT 信号。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_PROCESS_NOT_STARTED: 'EMV_PROCESS_NOT_STARTED',

  /**
   * @property {String} [EMV_PARAM_NOT_TLV='EMV_PARAM_NOT_TLV'] 参数数据不符合 TLV 格式。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_PARAM_NOT_TLV: 'EMV_PARAM_NOT_TLV',

  /**
   * @property {String} [EMV_UNSUPPORTED_CMD='EMV_UNSUPPORTED_CMD'] 信号标识错误，未定义的信号标识 XX。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_UNSUPPORTED_CMD: 'EMV_UNSUPPORTED_CMD',

  /**
   * @property {String} [EMV_CMD_PARAM_LEN_ERR='EMV_CMD_PARAM_LEN_ERR'] 信号参数长度错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CMD_PARAM_LEN_ERR: 'EMV_CMD_PARAM_LEN_ERR',

  /**
   * @property {String} [EMV_TLV_PARAM_ERR='EMV_TLV_PARAM_ERR'] 参数错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_TLV_PARAM_ERR: 'EMV_TLV_PARAM_ERR',

  /**
   * @property {String} [EMV_UNSUPPORTED_IC_TAG='EMV_UNSUPPORTED_IC_TAG'] IC 卡数据元标签，不可设置。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_UNSUPPORTED_IC_TAG: 'EMV_UNSUPPORTED_IC_TAG',

  /**
   * @property {String} [EMV_UNKNOWN_KERNEL='EMV_UNKNOWN_KERNEL'] 不可识别内核类型。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_UNKNOWN_KERNEL: 'EMV_UNKNOWN_KERNEL',

  /**
   * @property {String} [EMV_DATA_ERR='EMV_DATA_ERR'] 数据格式错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_DATA_ERR: 'EMV_DATA_ERR',

  /**
   * @property {String} [EMV_TAG_NOT_SET='EMV_TAG_NOT_SET'] 该标签未被赋值。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_TAG_NOT_SET: 'EMV_TAG_NOT_SET',

  /**
   * @property {String} [EMV_UNKNOWN_TAG='EMV_UNKNOWN_TAG'] 不可识别标签。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_UNKNOWN_TAG: 'EMV_UNKNOWN_TAG',

  /**
   * @property {String} [EMV_TAG_ERR='EMV_TAG_ERR'] 标签错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_TAG_ERR: 'EMV_TAG_ERR',

  /**
   * @property {String} [EMV_CARD_NOT_SUPPORT_IC_LOG='EMV_CARD_NOT_SUPPORT_IC_LOG'] 卡片不支持 IC 日志获取。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CARD_NOT_SUPPORT_IC_LOG: 'EMV_CARD_NOT_SUPPORT_IC_LOG',

  /**
   * @property {String} [EMV_CARD_NOT_SUPPORT_EC_LOG='EMV_CARD_NOT_SUPPORT_EC_LOG'] 卡片不支持 EC 日志获取。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_CARD_NOT_SUPPORT_EC_LOG: 'EMV_CARD_NOT_SUPPORT_EC_LOG',

  /**
   * @property {String} [EMV_OTHER_INTERFACE='EMV_OTHER_INTERFACE'] 请尝试其他通信界面。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_OTHER_INTERFACE: 'EMV_OTHER_INTERFACE',

  /**
   * @property {String} [EMV_OTHER_ERR='EMV_OTHER_ERR'] 其他错误。
   * @member nymph.pay.emv.ErrorCode
   */
  EMV_OTHER_ERR: 'EMV_OTHER_ERR',
};

/**
 * # EMV 内核类型
 * @class nymph.pay.emv.KernelId
 */
var KernelId = {
  /**
   * @property {String} [EMV='EMV'] 接触EMV标准流程
   * @member nymph.pay.emv.KernelId
   */
  EMV: 'EMV',

  /**
   * @property {String} [EMV_CONTACTLESS='EMV_CONTACTLESS'] 非接EMV kernel（暂未支持）
   * @member nymph.pay.emv.KernelId
   */
  EMV_CONTACTLESS: 'EMV_CONTACTLESS',

  /**
   * @property {String} [MASTER='MASTER'] MASTER
   * @member nymph.pay.emv.KernelId
   */
  MASTER: 'MASTER',

  /**
   * @property {String} [VISA='VISA'] VISA
   * @member nymph.pay.emv.KernelId
   */
  VISA: 'VISA',

  /**
   * @property {String} [AMEX='AMEX'] AMEX（暂未支持）
   * @member nymph.pay.emv.KernelId
   */
  AMEX: 'AMEX',

  /**
   * @property {String} [JCB='JCB'] JCB（暂未支持）
   * @member nymph.pay.emv.KernelId
   */
  JCB: 'JCB',

  /**
   * @property {String} [PBOC='PBOC'] PBOC
   * @member nymph.pay.emv.KernelId
   */
  PBOC: 'PBOC'
};

/**
 * # EMV 流程返回码
 * @class nymph.pay.emv.ProcessReturnCode
 */
var ProcessReturnCode = {
  /**
   * @property {String} [BUSY='BUSY'] EMV 工作线程正工作中，请稍候再尝试
   * @member nymph.pay.emv.ProcessReturnCode
   */
  BUSY: 'BUSY',

  /**
   * @property {String} [NO_APP='NO_APP'] 终端 AID 列表为空或者卡片与终端 AID 不匹配，无候选应用
   * @member nymph.pay.emv.ProcessReturnCode
   */
  NO_APP: 'NO_APP',

  /**
   * @property {String} [NO_PUB_KEY='NO_PUB_KEY'] 非接小额支付，检测到未设置交易公钥，交易终止
   * @member nymph.pay.emv.ProcessReturnCode
   */
  NO_PUB_KEY: 'NO_PUB_KEY',

  /**
   * @property {String} [EXPIRY='EXPIRY'] 卡片应用过期，交易终止
   * @member nymph.pay.emv.ProcessReturnCode
   */
  EXPIRY: 'EXPIRY',

  /**
   * @property {String} [FLASH_CARD='FLASH_CARD'] 非接快速支付，发生闪卡，交易终止，请执行补救措施
   * @member nymph.pay.emv.ProcessReturnCode
   */
  FLASH_CARD: 'FLASH_CARD',

  /**
   * @property {String} [STOP='STOP'] STOP 信号请求终止，交易主动退出
   * @member nymph.pay.emv.ProcessReturnCode
   */
  STOP: 'STOP',

  /**
   * @property {String} [REPOWER_ICC='REPOWER_ICC'] 对卡片重新上电并开始交易（不重新输入金额）
   * @member nymph.pay.emv.ProcessReturnCode
   */
  REPOWER_ICC: 'REPOWER_ICC',

  /**
   * @property {String} [REFUSE_SERVICE='REFUSE_SERVICE'] 卡片不允许服务
   * @member nymph.pay.emv.ProcessReturnCode
   */
  REFUSE_SERVICE: 'REFUSE_SERVICE',

  /**
   * @property {String} [CARD_LOCK='CARD_LOCK'] 卡片锁定 (SW6A81)
   * @member nymph.pay.emv.ProcessReturnCode
   */
  CARD_LOCK: 'CARD_LOCK',

  /**
   * @property {String} [APP_LOCK='APP_LOCK'] 应用锁定 (SW6283)
   * @member nymph.pay.emv.ProcessReturnCode
   */
  APP_LOCK: 'APP_LOCK',

  /**
   * @property {String} [EXCEED_CTLMT='EXCEED_CTLMT'] 交易金额超过非接限额
   * @member nymph.pay.emv.ProcessReturnCode
   */
  EXCEED_CTLMT: 'EXCEED_CTLMT',

  /**
   * @property {String} [GPO_6985='GPO_6985'] GPO 卡片返回 6985
   * @member nymph.pay.emv.ProcessReturnCode
   */
  GPO_6985: 'GPO_6985',

  /**
   * @property {String} [GAC_6985='GAC_6985'] Generate AC 卡片返回 6985
   * @member nymph.pay.emv.ProcessReturnCode
   */
  GAC_6985: 'GAC_6985'
};

/**
 * # 内核指令
 * @class nymph.pay.emv.Ins
 */
var Ins = {
  /**
   * @property {String} [SET_TORN='SET_TORN']
   * 发送闪卡交易数据
   * data 为 TLV buffer
   * @member nymph.pay.emv.Ins
   */
  SET_TORN: 'SET_TORN',

  /**
   * @property {String} [DEL_TORN='DEL_TORN']
   * 通知删除闪卡记录
   * data 为 TLV buffer，包含主账号和主账户序列号
   * @member nymph.pay.emv.Ins
   */
  DEL_TORN: 'DEL_TORN',

  /**
   * @property {String} [DISPLAY='DISPLAY']
   * 发送交互显示信息
   * data ：
   * - messageId：{String}
   * - flag：{String}
   * - message：{String}
   * @member nymph.pay.emv.Ins
   */
  DISPLAY: 'DISPLAY',

  /**
   * @property {String} [CLOSE_RF='CLOSE_RF']
   * 通知关闭射频载波
   * @member nymph.pay.emv.Ins
   */
  CLOSE_RF: 'CLOSE_RF',

  /**
   * @property {String} [GET_TORN='GET_TORN']
   * 获取闪卡交易数据
   * data 为 TLV buffer，包含主账号和主账户序列号
   * @member nymph.pay.emv.Ins
   */
  GET_TORN: 'GET_TORN'
};

/**
 * # 列表操作选项
 * @class nymph.pay.emv.ListOperation
 */
var ListOperation = {
  /**
   * @property {String} [ADD='ADD'] 添加一个列表元素
   * @member nymph.pay.emv.ListOperation
   */
  ADD: 'ADD',

  /**
   * @property {String} [REMOVE='REMOVE'] 移除一个列表元素
   * @member nymph.pay.emv.ListOperation
   */
  REMOVE: 'REMOVE',

  /**
   * @property {String} [CLEAR='CLEAR'] 清空列表
   * @member nymph.pay.emv.ListOperation
   */
  CLEAR: 'CLEAR'
};

/**
 * # 确认结果
 * @class nymph.pay.emv.ConfirmResult
 */
var ConfirmResult = {
  /**
   * @property {String} [YES='YES'] 确认
   * @member nymph.pay.emv.ConfirmResult
   */
  YES: 'YES',

  /**
   * @property {String} [NO='NO'] 否认
   * @member nymph.pay.emv.ConfirmResult
   */
  NO: 'NO',

  /**
   * @property {String} [CANCEL='CANCEL'] 取消
   * @member nymph.pay.emv.ConfirmResult
   */
  CANCEL: 'CANCEL'
};

/**
 * # 证件类型
 * @class nymph.pay.emv.CertType
 */
var CertType = {
  /**
   * @property {String} [PERSON_ID='PERSON_ID'] 身份证
   * @member nymph.pay.emv.CertType
   */
  PERSON_ID: 'PERSON_ID',

  /**
   * @property {String} [MILITARY_ID='MILITARY_ID'] 军官证
   * @member nymph.pay.emv.CertType
   */
  MILITARY_ID: 'MILITARY_ID',

  /**
   * @property {String} [PASSPORT='PASSPORT'] 护照
   * @member nymph.pay.emv.CertType
   */
  PASSPORT: 'PASSPORT',

  /**
   * @property {String} [ENTRY_PERMIT='PASSPORT'] 入境证
   * @member nymph.pay.emv.CertType
   */
  ENTRY_PERMIT: 'ENTRY_PERMIT',

  /**
   * @property {String} [TEMP_ID='TEMP_ID'] 临时身份证
   * @member nymph.pay.emv.CertType
   */
  TEMP_ID: 'TEMP_ID',

  /**
   * @property {String} [OTHER='OTHER'] 其它证件
   * @member nymph.pay.emv.CertType
   */
  OTHER: 'OTHER'
};

/**
 * @property {nymph.pay.emv.ErrorCode} ErrorCode EMV 错误码
 * @member nymph.pay.emv
 */
emv.ErrorCode = ErrorCode;

/**
 * @property {nymph.pay.emv.BasicParams} BasicParams EMV 交易基本参数
 * @member nymph.pay.emv
 */
emv.BasicParams = BasicParams;

/**
 * @property {nymph.pay.emv.CandidateAid} CandidateAid AID 候选项
 * @member nymph.pay.emv
 */
emv.CandidateAid = CandidateAid;

/**
 * @property {nymph.pay.emv.EcLog} EcLog IC 卡片圈存日志
 * @member nymph.pay.emv
 */
emv.EcLog = EcLog;

/**
 * @property {nymph.pay.emv.Gpo} Gpo GPO 参数
 * @member nymph.pay.emv
 */
emv.Gpo = Gpo;

/**
 * @property {nymph.pay.emv.HostData} HostData EMV 交易数据
 * @member nymph.pay.emv
 */
emv.HostData = HostData;

/**
 * @property {nymph.pay.emv.IcLog} IcLog IC 卡片交易日志
 * @member nymph.pay.emv
 */
emv.IcLog = IcLog;

/**
 * @property {nymph.pay.emv.InitialData} InitialData EMV 终端初始化参数
 * @member nymph.pay.emv
 */
emv.InitialData = InitialData;

/**
 * @property {nymph.pay.emv.MasterParams} MasterParams MASTER 交易参数
 * @member nymph.pay.emv
 */
emv.MasterParams = MasterParams;

/**
 * @property {nymph.pay.emv.PbocParams} PbocParams PBOC 接触与非接交易参数
 * @member nymph.pay.emv
 */
emv.PbocParams = PbocParams;

/**
 * @property {nymph.pay.emv.PubKeyRsa} PubKeyRsa RSA 算法公钥
 * @member nymph.pay.emv
 */
emv.PubKeyRsa = PubKeyRsa;

/**
 * @property {nymph.pay.emv.PubKeySm} PubKeySm SM 算法公钥
 * @member nymph.pay.emv
 */
emv.PubKeySm = PubKeySm;

/**
 * @property {nymph.pay.emv.PubKeySmGroup} PubKeySmGroup 椭圆曲线参数
 * @member nymph.pay.emv
 */
emv.PubKeySmGroup = PubKeySmGroup;

/**
 * @property {nymph.pay.emv.RecCert} RecCert 回收公钥证书
 * @member nymph.pay.emv
 */
emv.RecCert = RecCert;

/**
 * @property {nymph.pay.emv.Record} Record 读卡片记录返回数据
 * @member nymph.pay.emv
 */
emv.Record = Record;

/**
 * @property {nymph.pay.emv.StartData} StartData EMV 流程启动数据
 * @member nymph.pay.emv
 */
emv.StartData = StartData;

/**
 * @property {nymph.pay.emv.TransData} TransData EMV 交易数据
 * @member nymph.pay.emv
 */
emv.TransData = TransData;

/**
 * @property {nymph.pay.emv.VisaParams} VisaParams VISA 非接交易参数
 * @member nymph.pay.emv
 */
emv.VisaParams = VisaParams;

/**
 * @property {nymph.pay.emv.KernelId} KernelId EMV 内核类型
 * @member nymph.pay.emv
 */
emv.KernelId = KernelId;

/**
 * @property {nymph.pay.emv.FlowType} FlowType 交易流程类型
 * @member nymph.pay.emv
 */
emv.FlowType = TransData.FlowType;

/**
 * @property {nymph.pay.emv.ServiceType} ServiceType 服务类型
 * @member nymph.pay.emv
 */
emv.ServiceType = Gpo.ServiceType;

/**
 * @property {nymph.pay.emv.GacFlag} GacFlag GAC 控制标识
 * @member nymph.pay.emv
 */
emv.GacFlag = Gpo.GacFlag;

/**
 * @property {nymph.pay.emv.AcType} AcType 交易结果
 * @member nymph.pay.emv
 */
emv.AcType = TransData.AcType;

/**
 * @property {nymph.pay.emv.ProcessReturnCode} ProcessReturnCode 交易返回码
 * @member nymph.pay.emv
 */
emv.ReturnCode = ProcessReturnCode;

/**
 * @property {nymph.pay.emv.Ins} Ins 内核指令
 * @member nymph.pay.emv
 */
emv.Ins = Ins;

/**
 * @property {nymph.pay.emv.Cvm} Cvm 持卡人验证类型
 * @member nymph.pay.emv
 */
emv.Cvm = TransData.Cvm;

/**
 * @property {nymph.pay.emv.ListOperation} ListOperation 列表操作选项
 * @member nymph.pay.emv
 */
emv.ListOperation = ListOperation;

/**
 * @property {nymph.pay.emv.ConfirmResult} ConfirmResult 确认结果
 * @member nymph.pay.emv
 */
emv.ConfirmResult = ConfirmResult;

/**
 * @property {nymph.pay.emv.StartPurpose} StartPurpose 流程目的
 * @member nymph.pay.emv
 */
emv.StartPurpose = StartData.StartPurpose;

/**
 * @property {nymph.pay.emv.PseFlag} PseFlag 应用选择路径
 * @member nymph.pay.emv
 */
emv.PseFlag = StartData.PseFlag;

/**
 * @property {nymph.pay.emv.Interface} Interface 交互界面
 * @member nymph.pay.emv
 */
emv.Interface = StartData.Interface;

/**
 * @property {nymph.pay.emv.CertType} CertType 证件类型
 * @member nymph.pay.emv
 */
emv.CertType = CertType;

/**
 * @property {nymph.pay.emv.MasterMode} MasterMode Master 流程类型
 * @member nymph.pay.emv
 */
emv.MasterMode = MasterParams.MasterMode;

/**
 * @property {nymph.pay.emv.MasterBalanceFlag} MasterBalanceFlag Master 读取余额标识
 * @member nymph.pay.emv
 */
emv.MasterBalanceFlag = MasterParams.MasterBalanceFlag;

hermes.addEventSupport(emv);
hermes.addJsPluginInstance(emv.PLUGINID, emv);
emv.bindEvents();
module.exports = emv;

},{"./basic-params":44,"./candidate-aid":45,"./ec-log":46,"./gpo":47,"./host-data":48,"./ic-log":49,"./initial-data":50,"./master-params":51,"./pboc-params":52,"./pub-key-rsa":53,"./pub-key-sm":55,"./pub-key-sm-group":54,"./rec-cert":56,"./record":57,"./start-data":58,"./trans-data":59,"./visa-params":60,"buffer":"buffer","error":"error","hermes":"hermes","nymph-encoding":"nymph-encoding","tools":"tools"}],"error":[function(require,module,exports){
'use strict';

/**
 * # nymph 错误模块（模块名：error）
 * @class nymph.error
 * @singleton
 * 本模块为错误入口模块，通过 `requrie('error')` 的方式获取，包含以下两部分内容：
 *
 * - 错误类。
 * - 所有与错误相关的类和对象。
 */
var error = {
    /**
     * @property {String} [SUCCESS='SUCCESS'] 操作成功。
     * @member nymph.error
     */
    SUCCESS: 'SUCCESS',

    /**
     * @property {String} [ERROR='ERROR'] 操作失败。
     * @member nymph.error
     */
    ERROR: 'ERROR',

    /**
     * @property {String} [UNKNOWN='UNKNOWN'] 未知错误。
     * @member nymph.error
     */
    UNKNOWN: 'UNKNOWN',

    /**
     * @property {String} [PARAM_ERR='PARAM_ERR'] 参数错误。
     * @member nymph.error
     */
    PARAM_ERR: 'PARAM_ERR',

    /**
     * @property {String} [DEVICE_USED='DEVICE_USED'] 设备已经打开。
     * @member nymph.error
     */
    DEVICE_USED: 'DEVICE_USED',

    /**
     * @property {String} [DEVICE_NOT_AVAILABLE='DEVICE_NOT_AVAILABLE'] 设备不存在或无法使用。
     * @member nymph.error
     */
    DEVICE_NOT_AVAILABLE: 'DEVICE_NOT_AVAILABLE',

    /**
     * @property {String} [TIMEOUT='TIMEOUT'] 超时
     * @member nymph.error
     */
    TIMEOUT: 'TIMEOUT',

    /**
     * @property {String} [CANCELLED='CANCELLED'] 取消
     * @member nymph.error
     */
    CANCELLED: 'CANCELLED',

    /**
     * @property {String} [NO_PERMISSION='NO_PERMISSION'] 不允许的操作
     * @member nymph.error
     */
    NO_PERMISSION: 'NO_PERMISSION',

    /**
     * @property {String} [SDK_EXCEPTION='SDK_EXCEPTION'] SDK 异常错误
     * @member nymph.error
     */
    SDK_EXCEPTION: 'SDK_EXCEPTION',

    /**
     * @property {String} [SERVICE_EXCEPTION='SERVICE_EXCEPTION'] service 异常错误
     * @member nymph.error
     */
    SERVICE_EXCEPTION: 'SERVICE_EXCEPTION',

    /**
     * @property {String} [CREATE_INSTANCE_FAILED='CREATE_INSTANCE_FAILED'] 创建实例失败
     * @member nymph.error
     */
    CREATE_INSTANCE_FAILED: 'CREATE_INSTANCE_FAILED',

    /**
     * @property {String} [INSTANCE_NOT_FOUND='INSTANCE_NOT_FOUND'] 实例未找到
     * @member nymph.error
     */
    INSTANCE_NOT_FOUND: 'INSTANCE_NOT_FOUND',

    /**
     * @property {String} [COMMAND_NOT_SUPPORT='COMMAND_NOT_SUPPORT'] 不支持的命令
     * @member nymph.error
     */
    COMMAND_NOT_SUPPORT: 'COMMAND_NOT_SUPPORT',

    /**
     * @property {String} [OTHER_ERR='OTHER_ERR'] 其他异常错误
     * @member nymph.error
     */
    OTHER_ERR: 'OTHER_ERR',

    /**
     * @property {String} [COMM_ERR='COMM_ERR'] 通讯错误。
     * @member nymph.error
     */
    COMM_ERR: 'COMM_ERR',

    getError: function (innerCode) {
        switch (innerCode) {
            case 0:
                return this.SUCCESS;
            case -1: // 银商
            case 0x01: // EM_ERROR：错误
            case 0x8F: // EM_FAILED：操作失败
                return this.ERROR;
            case -2: // 银商
            case 0x8B: // EM_ERRPARAM
                return this.PARAM_ERR;
            case -3: // 银商
            case 0x8A: // EM_TIMEOUT
                return this.TIMEOUT;
            case -4: // 银商：设备未登入
            case 0x8D: // EM_DEVICE_DISABLE：设备禁止使用
                return this.DEVICE_NOT_AVAILABLE;
            case 0x89: // EM_DEVICE_USED
                return this.DEVICE_USED;
            case 0x1B: // EM_ABOLISH
                return this.CANCELLED;
            case 0x86: // EM_NOTPERMIT：不允许的操作
                return this.NO_PERMISSION;
            case -5: // 适配层
                return this.SDK_EXCEPTION;
            case -6: // 适配层
                return this.CREATE_INSTANCE_FAILED;
            case -7: // 适配层
                return this.INSTANCE_NOT_FOUND;
            case -8: // 适配层
                return this.COMMAND_NOT_SUPPORT;
            case 0x8E: // EM_ALLOCERR：内存分配失败
            case 0x8C: // EM_ERRHANDLE：句柄错误
            case 0x87: // EM_NOTEXIST：不存在
            case 0x88: // EM_ALREADY_EXIST：已经存在
                return this.OTHER_ERR;
            default:
                return this.UNKNOWN;
        }
    }
};

/**
 * # nymph 错误类
 * @class nymph.error.NymphError
 * @extends Error
 */
var NymphError = function (code, message, innerCode) {
    /**
     * @property {String} code 根据错误码值转换来的错误。
     * @member nymph.error.NymphError
     */
    this.code = code;

    /**
     * @property {Number} innerCode 从底层上传的错误码值。
     * @member nymph.error.NymphError
     */
    this.innerCode = innerCode;

    /**
     * @property {String} message 错误信息。
     * @member nymph.error.NymphError
     */
    this.message = message;
};

NymphError.prototype = {

    //插件ID。
    PLUGINID: 'a4518a84f7bdc672aa093d3d9369625d',

    constructor: NymphError
};

/**
 * @property {nymph.error.NymphError} NymphError 错误类
 * @member nymph.error
 */
error.NymphError = NymphError;
module.exports = error;

},{}],"hermes":[function(require,module,exports){
'use strict';

/**
 *  Hermes 通信 Android 平台的实现。
 *  @class hermes
 */
var hermes = require('./hermes.js');

// hermesNative 为 Native 对象。
var hermesNative = window.hermesNative || undefined;

if(hermesNative) {
  hermes.callNativePluginFunction = function (pluginId, instanceId, functionName, params) {
    if (!params || params.length === 0) {
      params = null;
    } else {
      params = JSON.stringify(params);
    }

    try {
        var result = hermesNative.exec(pluginId, instanceId, functionName, params);
        return JSON.parse(result);
    } catch (err) {
        return {innerCode: 1, message: 'HermesNative exception.'};
    }
  };

  hermesNative.callbackFromNative = function (callbackId, params) {
    return hermes.onNativeCallback(callbackId, params);
  };

  hermesNative.eventFromNative = function(jsPluginInstanceId, eventName, parameters) {
    return hermes.onNativeEvent(jsPluginInstanceId, eventName, parameters);
  };
}

module.exports = hermes;

},{"./hermes.js":1}],"iso8583":[function(require,module,exports){
exports.ISO8583 = require('./lib/iso8583');
exports.converter = require('./lib/util/converter');
exports.tlv = require('./lib/util/tlv');

},{"./lib/iso8583":2,"./lib/util/converter":23,"./lib/util/tlv":24}],"led":[function(require,module,exports){
'use strict';

var hermes = require('hermes'),
    nymphError = require('error');
/**
 * # Led 灯类（模块名：led）
 * Led 灯主要用于指示非接模块状态。为了节能，只有在需要用到 Led 灯的时候才打开，使用结束后要关闭 Led 灯。
 * @class nymph.sys.led
 * @singleton
 */
var led = {
  /**
   * 插件ID。
   */
  PLUGINID: '6b2737ce9f519efcf3b368eb86a383d4',

  instanceId: hermes.NULL,

  /**
   * @method on
   * 打开指定的 LED 灯。
   *
   *     var led = require('led');
   *
   *     // 打开红色 LED 灯。
   *     led.on([led.Light.RED]);
   *
   * @param {nymph.sys.led.Light[]} lights 要打开的 lED 灯，可指定打开多种颜色的 LED 灯。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  on: function (lights) {
    var self = this, result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'on', [lights]);
    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: '打开 LED 灯失败', innerCode: result.innerCode};
    }
  },

  /**
   * @method off
   * 关闭指定的 LED 灯。
   *
   *     var led = require('led');
   *
   *     // 关闭红色 LED 灯。
   *     led.off([led.Light.RED]);
   *
   * @param {nymph.sys.led.Light[]} lights 要关闭的 lED 灯，可指定关闭多种颜色的 LED 灯。
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  off: function (lights) {
    var self = this, result, errorCode;

    result = hermes.exec(this.PLUGINID, this.instanceId, 'off', [lights]);
    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: '关闭 LED 灯失败', innerCode: result.innerCode};
    }
  },

  getError: function (innerCode) {
    switch (innerCode) {
      default:
        return nymphError.getError(innerCode);
    }
  },
};

/**
 * LED 灯。
 * @class nymph.sys.led.Light
 */
var Light = {
  /**
   * RED
   */
  RED: 'RED',

  /**
   * GREEN
   */
  GREEN: 'GREEN',

  /**
   * YELLOW
   */
  YELLOW: 'YELLOW',

  /**
   * BLUE
   */
  BLUE: 'BLUE'
};

/**
 * Led 灯枚举
 * @class nymph.sys.led.Light
 */
led.Light = Light;

hermes.addJsPluginInstance(led.PLUGINID, led);
module.exports = led;

},{"error":"error","hermes":"hermes"}],"media":[function(require,module,exports){
'use strict';
var hermes = require('hermes'),
    nymphError = require('error');
/**
 * # 多媒体类（模块名：media）
 * @class nymph.sys.media
 * @singleton
 */
var media = {
  /**
   * 插件ID。
   */
  PLUGINID: 'cc24531fe7d65a0f1b57a9eb44c8675a',

  instanceId: hermes.NULL,

  /**
   * @method beep
   * 蜂鸣。
   *
   *     var media = require('media');
   *     // 按照默认蜂鸣配置进行蜂鸣，即正常蜂鸣。
   *     media.beep();
   *
   *     // 失败蜂鸣。
   *     media.beep(media.BeepMode.FAIL);
   *     // 蜂鸣 100 毫秒。
   *     media.beep(100);
   *
   * @param {nymph.sys.media.BeepMode/Number} option (Optional) 蜂鸣模式或者蜂鸣时间（以毫秒为单位），默认为正常蜂鸣。
   */
  beep: function (option) {
    var self = this, result, errorCode, beepMode = self.BeepMode.NORMAL;

    if (option) {
      beepMode = option;
      if (typeof beepMode === 'string') {
        result = hermes.exec(this.PLUGINID, this.instanceId, 'beepMode', [beepMode]);
      } else {
        result = hermes.exec(this.PLUGINID, this.instanceId, 'beepTime', [beepMode]);
      }
    } else {
      result = hermes.exec(this.PLUGINID, this.instanceId, 'beepMode', [beepMode]);
    }

    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: '蜂鸣失败', innerCode: result.innerCode};
    }
  },

  /**
   * 间歇蜂鸣。
   * @param {Number} beepTime 每次蜂鸣的时间，单位为毫秒（ms）。
   * @param {Number} intervalTime 两次蜂鸣的间歇时间，单位为毫秒（ms）。
   * @param {Number} times 蜂鸣次数。
   */
  beepInterval: function (beepTime, intervalTime, times) {
    var self = this, result, errorCode;
    result = hermes.exec(this.PLUGINID, this.instanceId, 'beepInterval', [beepTime, intervalTime, times]);
    errorCode = self.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: '蜂鸣失败', innerCode: result.innerCode};
    }
  },

  /**
   * @method playAudio
   * 播放指定路径下的音频。
   *
   *     // 播放 audio 文件夹下的 voice.mp3。
   *     nymph.sys.media.playAudio('audio\voice.mp3');
   *
   * @param {String} path 要播放的音频。
   */
  playAudio: function (path) {
  },

  /**
   * @method stopAudio
   * 停止正在播放的音频。
   *
   *     nymph.sys.media.stopAudio();
   *
   */
  stopAudio: function () {
  },

  getError: function (innerCode) {
    switch (innerCode) {
      default:
        return nymphError.getError(innerCode);
    }
  },
};

/**
 * 蜂鸣类型
 * @class nymph.sys.media.BeepMode
 */
var BeepMode = {
  /**
   * NORMAL
   */
  NORMAL: 'NORMAL',

  /**
   * SUCCESS
   */
  SUCCESS: 'SUCCESS',

  /**
   * FAIL
   */
  FAIL: 'FAIL',

  /**
   * INTERVAL
   */
  INTERVAL: 'INTERVAL',

  /**
   * ERROR
   */
  ERROR: 'ERROR'
};

/**
 * @property {nymph.sys.media.BeepMode} BeepMode 蜂鸣类型。
 * @member nymph.sys.media
 */
media.BeepMode = BeepMode;

hermes.addJsPluginInstance(media.PLUGINID, media);
module.exports = media;

},{"error":"error","hermes":"hermes"}],"native-console":[function(require,module,exports){
'use strict';

var hermes = require('hermes');
var nymphError = require('error');
/**
 * @class nymph.console
 * @singleton
 *
 * 控制台。
 *
 * 同时向浏览器控制台和 Qt 或者 Android 控制台输出日志。'nymph.util.console'对象只提供`log`方法用于日志输出，并且已覆盖`window.console.log`，可以通过`console.log`输出日志。
 */
var nymphConsole = {
  /**
   * 输出日志级别。
   * @experimental
   */
  level: 'debug',

  /**
   * 单实例对象没有实例 ID
   */
  instanceId: hermes.NULL,

  enable: true,

  /**
   * 插件 ID。
   */
  PLUGINID: '54cf34ff83e240c6ac07f0709a00475e',

  /**
   * @event logged(message)
   * @experimental
   * 日志输出事件。
   */

  /**
   * 将指定的日志打印到控制台。
   *
   * @param {Function} [callback] 函调。可选。
   * @param {nymph.error.NymphError} callback.err 错误。
   * @param {Array} callback.parameters 回调参数。
   * @param {Object/String} message 日志信息。
   */
  nativeLog: function (message, callback) {
    if (this.enable) {
      window.console.info(message);
      if (callback) {
        hermes.exec(this.PLUGINID, this.instanceId, 'log', [message], callback.bind(this));
      } else {
        hermes.exec(this.PLUGINID, this.instanceId, 'log', [message]);
      }
    }
  },

  /**
   * 启动\禁用日志。
   * @param {Boolean} enable 是否打开日志。
   */
  enableNativeLog: function (enable) {
    var result =  hermes.exec(this.PLUGINID, this.instanceId, 'enableNativeLog', [enable]);
    var errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: enable ? 'Failed to enable log.' : 'Failed to disable log.', innerCode: result.innerCode};
    }
    this.enable = enable;
  },

  getLevel: function () {
    return hermes.exec(this.PLUGINID, this.instanceId, 'getLevel');
  },

  mockEvent: function () {
    return hermes.exec(this.PLUGINID, this.instanceId, 'mockEvent');
  },

  getInfo: function () {
    return {
      name: 'nymph-console',
      version: '0.0.1'
    };
  },

  /**
   * @ignore
   * @param {Number} innerCode 底层上传的返回码
   * @returns {String} 返回码对应的字符串
   */
  getError: function (innerCode) {
    switch (innerCode) {
      default:
        return nymphError.getError(innerCode);
    }
  },

  meta: {
    name: 'nymph-console',
    version: '0.0.1'
  }
};

hermes.addEventSupport(nymphConsole);

// 修改 window.console
hermes.mixin(console, nymphConsole);

hermes.addJsPluginInstance(nymphConsole.PLUGINID, console);

module.exports = console;

},{"error":"error","hermes":"hermes"}],"nymph-encoding":[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;

/**
 * # 数据编码及解码（模块名：encoding）
 * @class nymph.util.encoding
 * @singleton
 * @experimental 规范尚未制定完成！
 */
var encoding = {
  /**
   * @method asc2bcd ASCII码转BCD码
   */
  asc2bcd: function () {

  },

  /**
   * @method bcd2asc BCD码转ASCII码
   */
  bcd2asc: function () {

  },

  /**
   * @method int2bcd int型数据转BCD码
   */
  int2bcd: function () {

  },

  /**
   * @method bcd2int BCD码转int型
   */
  bcd2int: function () {

  },

  /**
   * @method gbk2utf8 GBK 编码转 UTF-8 编码
   */
  gbk2utf8: function () {

  },

  /**
   * @method utf82gbk UTF-8 编码转 GBK 编码
   */
  utf82gbk: function () {

  },

  /**
   * @method hexStringToBuffer 把十六进制字符串转换成 Buffer 数组。
   * 如：“01FACB”转换成[0x01, 0xFA, 0xCB]
   */
  hexStringToBuffer: function (str) {
    var pos = 0;
    var len = str.length;
    if (len % 2 !== 0) {
      return null;
    }
    len /= 2;
    var hexA = [];
    for (var i = 0; i < len; i++) {
      var s = str.substr(pos, 2);
      var v = parseInt(s, 16);
    hexA.push(v);
    pos += 2;
  }
  return new Buffer(hexA);
  },

  /**
   * @method bufferToHexString 把 Buffer 转换成十六进制字符串。
   * 如：[0x01, 0xFA, 0xCB]转换成“01FACB”
   */
  bufferToHexString: function (arr) {
    var str = "";
    for (var i = 0; i < arr.length; i++) {
      var tmp = arr[i].toString(16);
      if (tmp.length == 1) {
        tmp = "0" + tmp;
      }
      str += tmp;
    }
    return str;
  }
};

module.exports = encoding;

},{"buffer":"buffer"}],"nymph":[function(require,module,exports){
(function(){
  'use strict';
  var nymph = {
    reg : function(str){
      var arr = str.split('.'),
           obj = nymph;
      for(var i = ( arr[0] === 'nymph' ) ? 1 : 0; i<arr.length; i++){
        obj[arr[i]] = obj[arr[i]] || {};
        obj = obj[arr[i]];
      }
    },
    del : function(str){
      var arr = str.split('.'),
           obj = nymph;
      arr.forEach(function(elem, idx, arr){
        if(typeof obj[arr[idx]] === 'undefined'){
          return;
        }else if(arr.length === idx+1){
          delete  nymph[arr[idx]];
          return;
        } else{
          nymph = nymph[arr[idx]];
        }
      });
    }
  };

  nymph.reg('buffer');
  nymph.reg('cryptoJs');
  nymph.reg('comm');
  nymph.reg('dev');
  nymph.reg('error');
  nymph.reg('pay');
  nymph.reg('sys');
  nymph.reg('util');
  nymph.reg('app');
  nymph.reg('console');
  // nymph.reg('gaia');
  // nymph.reg('dlf');
  nymph.reg('testlib');


  nymph.buffer = require('buffer');
  nymph.cryptoJs = require('crypto-js');
  nymph.dev.cardReader = require('card-reader');
  nymph.dev.pinPad = require('pin-pad');
  nymph.dev.printer = require('printer');
  nymph.pay.emv = require('emv');
  nymph.pay.emvData = require('emv-data');
  // nymph.sys.power = require('power');
  nymph.sys.led = require('led');
  nymph.sys.media = require('media');
  nymph.comm.connectivityManager = require('connectivity-manager');
  // nymph.comm.modem = require('modem');
  // nymph.comm.cell = require('cell');
  // nymph.comm.ethernet = require('ethernet');
  // nymph.comm.communication = require('communication');
  nymph.error = require('error');
  nymph.app = require('app');
  // nymph.util.promisehelper = require('promise-helper');
  // nymph.console.consolePatch = require('console-patch');
  nymph.console.nativeConsole = require('native-console');
  nymph.iso8583 = require('iso8583');
  // nymph.gaia = require('gaia');
  // nymph.dlf = require('dlf');
  nymph.util.encoding = require('nymph-encoding');
  nymph.util.tools = require('tools');
  nymph.util.dateFormat = require('date-format');
  nymph.testlib.testlib = require('testlib');
  nymph.sys.deviceStatus = require('device-status');
  nymph.sys.signaturePad = require('signature-pad');
  nymph.dev.scanner = require('scanner');
  nymph.comm.serialPort = require('serial-port');
  module.exports = nymph;

})();

},{"app":"app","buffer":"buffer","card-reader":"card-reader","connectivity-manager":"connectivity-manager","crypto-js":"crypto-js","date-format":"date-format","device-status":"device-status","emv":"emv","emv-data":"emv-data","error":"error","iso8583":"iso8583","led":"led","media":"media","native-console":"native-console","nymph-encoding":"nymph-encoding","pin-pad":"pin-pad","printer":"printer","scanner":"scanner","serial-port":"serial-port","signature-pad":"signature-pad","testlib":"testlib","tools":"tools"}],"pin-pad":[function(require,module,exports){
'use strict';

/**
 * # 密码键盘（模块名：pin-pad）
 * @class nymph.dev.pinPad
 * @singleton
 * 本模块为密码键盘的入口模块，通过 `requrie('pin-pad')` 的方式获取，包含以下两部分内容：
 *
 * - 密码键盘类。
 * - 所有与密码键盘相关的类和对象。
 *
 */

// 引用模块内部部件。
var Kap = require('./kap'),

// 引用外部模块。
    hermes = require('hermes'),
    Buffer = require('buffer').Buffer,
    encoding = require('nymph-encoding'),
    tools = require('tools'),
    nymphError = require('error'),
    Error = require('error').NymphError,


    pinPad = {};

/**
 * # 密码键盘类
 * @class nymph.dev.pinPad.PinPad
 *
 * 具体操作流程及代码示例请参见[“密码键盘开发指南”](#!/guide/pinpad)。
 *
 * @constructor
 *
 * 创建一个新的密码键盘实例。
 *
 *
 * 如下：
 *
 *     // 获取密码键盘入口模块。
 *     var pinPad = require('pin-pad');
 *
 *     // 获取密码键盘类。
 *     var PinPad = pinPad.PinPad;
 *
 *     // 创建一个密码键盘实例。
 *     var pinPadInstance = new PinPad(pinPad.PinPadType.IPP, {
 *         managerId: 0x01,
 *         groupId: 0x01,
 *         kapIndex: 0x01
 *     });
 *
 *     // 获取与密码键盘相关的类。
 *     var KeySystem = pinPad.KeySystem;
 *
 * @param {nymph.dev.pinPad.PinPadType} devName 设备标识，唯一标识和打开一个密码键盘设备。
 * @param {Object} options 初始化配置参数。由于不同厂商的密钥体可能不同，可以加入自定义参数。以下为根据联迪的密钥体系设置的参数：
 * @param {Number} managerId 管理者的唯一标号。
 * @param {Number} groupId KAP 组的唯一标识。
 * @param {Number} options.kapIndex 机构下对应的密钥存储区（KAP区）索引。
 *
 */
var PinPad = function (devName, options) {
    if (!devName || (typeof devName !== 'string') || ((devName !== PinPadType.IPP)&&(devName !== PinPadType.EPP))) {
        throw {code: nymphError.PARAM_ERR, message: 'devName error'};
    }
    if (!options || (typeof options !=='object')) {
        throw {code: nymphError.PARAM_ERR, message: 'options error'};
    }
    if(options.managerId === undefined || options.groupId === undefined || options.kapIndex === undefined ||
        options.managerId === null || options.groupId === null || options.kapIndex === null ||
        (typeof options.managerId !== 'number') || (typeof options.groupId !== 'number') || (typeof options.kapIndex !== 'number') ||
        (true === isNaN(options.managerId)) || (true === isNaN(options.groupId)) || (true === isNaN(options.kapIndex))){
        throw {code: nymphError.PARAM_ERR, message: 'managerId,groupId,kapIndex error'};
    }
    // todo localStorage 没有 get 方法错误？
    //this.devName = localStorage.get('pinpad.devName') || devName;
    /**
     * @property {nymph.dev.pinPad.PinPadType} devName 设备名称。
     * @member nymph.dev.pinPad.PinPad
     */
    this.devName = devName;
    /**
     * @property {Number} managerId 管理者的唯一标号。
     * @member nymph.dev.pinPad.PinPad
     */
    this.managerId = options.managerId;
    /**
     * @property {Number} groupId KAP 组的唯一标识。
     * @member nymph.dev.pinPad.PinPad
     */
    this.groupId = options.groupId;
    /**
     * @property {Number} kapIndex 机构下对应的密钥存储区索引。
     * @member nymph.dev.pinPad.PinPad
     */
    this.kapIndex = options.kapIndex;

    this.instanceId = hermes.NULL;

    this.isInputting = false;
};

/**
 * # 密码键盘密钥格式
 * @class nymph.dev.pinPad.KeyFormat
 */
var KeyFormat = {
    /**
     * @property {Number} [NORMAL=0] 一般的密文密钥格式。
     * @member nymph.dev.pinPad.KeyFormat
     */
    NORMAL: 0,
    /**
     * @property {Number} [ICBC=1] ICBC 的定制格式。
     * @member nymph.dev.pinPad.KeyFormat
     */
    ICBC: 1,
    /**
     * @property {Number} [TR31TR31=2] 规范定义的 密文密钥格式。
     * @member nymph.dev.pinPad.KeyFormat
     */
    TR31TR31: 2,
    /**
     * @property {Number} [TCBC=4] 规范定义的 密文密钥格式(定义为4和底层赋值保持一致)。
     * @member nymph.dev.pinPad.KeyFormat
     */
    TCBC: 4

};

/**
 * # PIN 算法类型
 * @class nymph.dev.pinPad.PinMode
 */
var PinMode = {
    /**
     * @property {String} [ISO9564='ISO9564FMT0'] ISO9564FMT0。
     * @member nymph.dev.pinPad.PinMode
     */
    ISO9564FMT0: 'ISO9564FMT0',

    /**
     * @property {String} [ISO9564FMT1='ISO9564FMT1'] ISO9564FMT1。
     * @member nymph.dev.pinPad.PinMode
     */
    ISO9564FMT1: 'ISO9564FMT1',
    /**
     * @property {String} [ISO9564FMT2='ISO9564FMT2'] ISO9564FMT2。
     * @member nymph.dev.pinPad.PinMode
     */
    ISO9564FMT2: 'ISO9564FMT2',
    /**
     * @property {String} [ISO9564FMT3='ISO9564FMT3'] ISO9564FMT3。
     * @member nymph.dev.pinPad.PinMode
     */
    ISO9564FMT3: 'ISO9564FMT3'
};

/**
 * # 密钥体系
 * @class nymph.dev.pinPad.KeySystem
 */
var KeySystem = {
    /**
     * @property {Number} [MKSK=0] MKSK。
     * @member nymph.dev.pinPad.KeySystem
     */
    MKSK: 0,
    /**
     * @property {Number} [DUKPT=1] DUKPT。
     * @member nymph.dev.pinPad.KeySystem
     */
    DUKPT: 1,
    /**
     * @property {Number} [FIXED=2] FIXED。
     * @member nymph.dev.pinPad.KeySystem
     */
    FIXED: 2

};

/**
 * # 密码键盘加解密算法
 * @class nymph.dev.pinPad.Algorithm
 */
var KeyAlgorithm = {
    /**
     * @property {String} [DES='D'] 单 DES。
     * @member nymph.dev.pinPad.Algorithm
     */
    DES: 'D',
    /**
     * @property {String} [TDES='T'] 3 DES。
     * @member nymph.dev.pinPad.Algorithm
     */
    TDES: 'T',
    /**
     * @property {String} [SM4='SM4'] 国密算法。
     * @member nymph.dev.pinPad.Algorithm
     */
    SM4: 'SM4',
    /**
     * @property {String} [MAC_TDES_CBC='MAC_TDES_CBC'] mac计算是使用3des密钥做CBC算法。
     * @member nymph.dev.pinPad.Algorithm
     */
    MAC_TDES_CBC: 'MAC_TDES_CBC'

};



/**
 * # 密钥
 * @class nymph.dev.pinPad.Key
 * @cfg {Number} index [密钥组](#!/guide/pinpad-section-%E5%AF%86%E9%92%A5%E7%BB%84)索引。
 * @cfg {nymph.dev.pinPad.Algorithm} [algorithm=TDES] 密钥加密算法。
 * @cfg {nymph.dev.pinPad.KeyType} type 密钥类型。
 * @cfg {nymph.dev.pinPad.KeySystem} [system = MKSK] 密钥体系。
 * @cfg {Boolean}isSupportEPPDesKey [isSupportEPPDesKey = false] 支持外置密码键盘报文密钥下载（默认为不支持）。
 */
var Key = function (cfg) {
    var isInside = false;
    this.algorithm = KeyAlgorithm.TDES;
    this.system = KeySystem.MKSK;
    this.isSupportEPPDesKey = false;
    if (cfg.hasOwnProperty('isSupportEPPDesKey')) {
        this.isSupportEPPDesKey = cfg.isSupportEPPDesKey;
    }

    if (cfg.hasOwnProperty('index')) {
        this.index = cfg.index;
    }

    if (cfg.hasOwnProperty('algorithm')) {
        isInside = false;
        var tmpAlgorithm;
        for(tmpAlgorithm in KeyAlgorithm){
            if(cfg.algorithm === KeyAlgorithm[tmpAlgorithm]){
                isInside = true;
                break;
            }
        }
        if(!isInside){
            throw {code: nymphError.PARAM_ERR, message: 'It does not inside the KeyAlgorithm'};
        }
        this.algorithm = cfg.algorithm;
    }

    if (cfg.hasOwnProperty('system')) {
        isInside = false;
        var tmpSystem;
        for(tmpSystem in KeySystem){
            if(cfg.system === KeySystem[tmpSystem]){
                isInside = true;
                break;
            }
        }
        if(!isInside){
            throw {code: nymphError.PARAM_ERR, message: 'It does not inside the KeySystem'};
        }
        this.system = cfg.system;
    }

    if (cfg.hasOwnProperty('type')) {
        isInside = false;
        var tmpType;
        for(tmpType in KeyType){
            if(cfg.type === KeyType[tmpType]){
                isInside = true;
                break;
            }
        }
        if(!isInside){
            throw {code: nymphError.PARAM_ERR, message: 'It does not inside the KeyType'};
        }
        this.type = cfg.type;
    } else {
        throw {code: nymphError.PARAM_ERR, message: 'Key type is required.'};
    }
};

PinPad.prototype = {
    constructor: PinPad,

    // 插件ID。
    PLUGINID: '91ce03e8ef2140c299653e77b5901d9c',

    bindEvents: function () {
        var self = this;

        /**
         * @event keypress
         * 输入pin操作中，当pinpad模块认为是可继续输入时，可以用这个返回键值
         * （注意只有在pinpad处于是‘可继续输入’状态才会返回键值，输入满位数按确认、按取消或者其他情况使pinpad状态改变了，就不会在这个事件中返回键值）。
         * @param {nymph.KeyMap} keyCode 按下的键盘。如果在密码键盘上输入 [0, 9]，明文状态下 keyCode 为各数字对应的值，密文状态下 keyCode 为 '*'。其他键值包括：
         *
         * - {@link nymph.KeyMap#KEY_ENTER} 按下回车键。
         * - {@link nymph.KeyMap#KEY_CANCEL} 按下取消键，表示清除当前输入密码的内容。
         * - {@link nymph.KeyMap#KEY_CLEAR} 按下回退键。
         * @member nymph.dev.pinPad.PinPad
         */
        self.addListener('pinPadKeypress', function (keyCode) {
            self.emit('keypress', keyCode);
        });

        /**
         * @event close
         * 关闭密码键盘事件。
         */
        self.addListener('pinPadClose', function () {
            self.emit('close');
        });
    },

    unBindEvents: function () {
        var self = this;
        self.removeAllListeners('pinPadKeypress');
        self.removeAllListeners('pinPadClose');
    },

    /**
     * @method open
     * 打开密码键盘。
     *
     *     try {
     *         pinPadInstance.open();
     *     } catch (err) {
     *         // 打开失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    open: function () {
        // 如果重复打开，则抛出异常。
        if (this.instanceId !== hermes.NULL) {
            var error = new Error();
            error.code = this.DEVICE_USED;
            error.message = 'Device already opened.';

            throw error;
        }
        this.kap = new Kap(this.instanceId, this.groupId, this.kapIndex);
        var result, errorCode, kapOptions = {
            instanceId: this.instanceId,
            groupId: this.groupId,
            kapIndex: this.kapIndex,
            managerId: this.managerId
        };

        //console.nativeLog('this.Kap = ' + JSON.stringify(this.kap));
        //console.nativeLog('kapOptions = ' + JSON.stringify(kapOptions));
        // 打开密码键盘模块操作。
        result = hermes.exec(this.PLUGINID, hermes.NULL, 'open', [this.devName, kapOptions]);

        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to open PIN Pad.', innerCode: result.innerCode};
        }

        this.instanceId = result.data;

        hermes.addJsPluginInstance(this.instanceId, this);
        // 先解绑再绑定，防止之前因为某些原因绑定了未解绑，导致重复绑定。
        this.unBindEvents();
        this.bindEvents();
    },

    /**
     * @method loadPlainKey
     * 下装明文密钥。
     *
     *     // 下装密钥之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     try {
     *         // 要下装的密钥数据类型可以是 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *         var keyData = '31313131313131313131313131313131';
     *         // var keyData = [0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31];
     *         // var keyData = new Buffer([0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31]);
     *         var masterKey = new pinPad.Key({
     *           index: 1,
     *           type: pinPad.KeyType.MASTER
     *           algorithm: KeyAlgorithm.TDES,(国密使用KeyAlgorithm.SM4)
     *           system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *         });
     *         pinPadInstance.loadPlainKey(keyData, masterKey);
     *     } catch (err) {
     *         // 下装密钥失败的处理。
     *     }
     *
     * @param {Object/String/Array} data 明文密钥内容，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，长度可为 8 个字节、16 个字节、24 个字节。
     * @param {nymph.dev.pinPad.Key} key 密钥属性,如果是使用国密算法请将key.algorithm属性设置为SM4(主密钥索引0到99，工作密钥索引0到7)
     * @param {Object} options (Optional) 其他配置。各厂商可以根据需要自由扩展参数。
     * @param {Object} options.passport (Optional) 认证信息。如果该参数不为空，则是用认证模式下载明文主密钥。参考教程中的 [下载明文密钥](#!/guide/pinpad-section-%E4%B8%8B%E8%BD%BD%E6%98%8E%E6%96%87%E5%AF%86%E9%92%A5)。
     * @param {Object} options.auth (Optional) 认证信息口令。
     * @param {String} options.auth.password1 (Optional) 认证信息口令1。
     * @param {String} options.auth.password2 (Optional) 认证信息口令2。
     * @param {String} [options.isTmsKey=false] 是否为 TMS 主密钥。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    loadPlainKey: function (data, key, options) {
        var result, errorCode, optionKey, actualOptions = {isTmsKey: false}, dataString, tempKey;

        if(!data || ((data.length%8 !== 0)&&(data.length%16 !== 0))){
            throw {code: nymphError.PARAM_ERR, message: 'data error'};
        }

        if(!key || !key.type) {
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }

        //console.nativeLog('开始执行loadPlainKey的JS函数');
        dataString = tools.toBase64(data);
        if (options) {
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    actualOptions[optionKey] = options[optionKey];
                }
            }
        }

        //console.nativeLog('开始执行loadPlainKey的QT函数');
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'loadPlainKey', [dataString, tempKey, actualOptions]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to download plaintext key.', innerCode: result.innerCode};
        }
    },

    /**
     * @method loadEncryptedKey
     * 下装密文密钥。
     *
     * **下装密文密钥时，必须确保用于解密的明文主密钥存在，否则将导致失败。**
     *
     *     // 下装密钥之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     try {
     *         // 要下装的密钥数据类型可以是 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *         var keyData = 'B26EC468EB4D0D3D91AC29C3AEB92614';
     *         // var keyData = [0xB2, 0x6E, 0xC4, 0x68, 0xEB, 0x4D, 0x0D, 0x3D, 0x91, 0xAC, 0x29, 0xC3, 0xAE, 0xB9, 0x26, 0x14];
     *         // var keyData = new Buffer([0xB2, 0x6E, 0xC4, 0x68, 0xEB, 0x4D, 0x0D, 0x3D, 0x91, 0xAC, 0x29, 0xC3, 0xAE, 0xB9, 0x26, 0x14]);
     *         var pinKey = new pinPad.Key({
     *           index: 1,
     *           type: pinPad.KeyType.PIN,
     *           algorithm: pinPad.KeyAlgorithm.TDES,(国密使用KeyAlgorithm.SM4)
     *           system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *         });
     *         var masterKey = new pinPad.Key({
     *           index: 1,
     *           type: pinPad.KeyType.MASTER
     *         });
     *         pinPadInstance.loadEncryptedKey(keyData, pinKey, masterKey);
     *     } catch (err) {
     *         // 下装密钥失败的处理。
     *     }
     *
     * @param {Object/String/Array} data 密文密钥内容，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，长度可为 8 个字节、16 个字节、24 个字节。
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,如果是使用国密算法请将key.algorithm属性设置为SM4.(主密钥索引0到99，工作密钥索引0到7)
     * @param {nymph.dev.pinPad.Key} decryptionKey 解密密钥属性。
     * @param {Object} options (Optional)  其他配置。
     * @param {nymph.dev.pinPad.KeyFormat} [options.keyFormat=NORMAL] 密钥格式。
     * @param {Boolean} [options.isTmsKey=false] 是否为 TMS 主密钥。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    loadEncryptedKey: function (data, key, decryptionKey, options) {
        var result, errorCode, optionKey, dataString, tempKey,
            actualOptions = {
                isTmsKey: false,
                keyFormat: KeyFormat.NORMAL,
                kapIndex: this.kapIndex
            };
        if(!data || ((data.length%8 !== 0)&&(data.length%16 !== 0))){
            throw {code: nymphError.PARAM_ERR, message: 'data error'};
        }

        if(!key || !key.type) {
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }

        //console.nativeLog('开始执行loadEncryptedKey的JS函数');
        dataString = tools.toBase64(data);

        if (options) {
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    actualOptions[optionKey] = options[optionKey];
                }
            }
        }
        //console.nativeLog('开始执行loadEncryptedKey的QT函数');
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'loadEncryptedKey', [dataString, tempKey, decryptionKey, actualOptions]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to download encrypted key.', innerCode: result.innerCode};
        }
    },


    /**
     * @method loadDukptInitKsn
     * 将指定的 key 加载为 DUKPT initial key, 同时指定对应的 Key Serial Number.。
     * 这个接口针对的是DUKPT密钥管理体系下的应用，MKSK体系的用不到这个接口
     *
     *
     *     try {
     *         // 要下装的KSN可以是 16 进制字符串，相当于10字节长度/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *         var ksnData = 'B26EC468EB4D0D3D91AC';
     *         // var ksnData = [0xB2, 0x6E, 0xC4, 0x68, 0xEB, 0x4D, 0x0D, 0x3D, 0x91, 0xAC];
     *        // var keyData = new Buffer([0xB2, 0x6E, 0xC4, 0x68, 0xEB, 0x4D, 0x0D, 0x3D, 0x91, 0xAC]);
     *         var keyindex = new pinPad.Key({
     *           index: 1(索引值必须传入，其他属性在这个方法中没有用到，可以不传)
     *         });
     *
     *         pinPadInstance.loadDukptInitKsn(ksnData, keyindex);
     *     } catch (err) {
     *         // 设置KSN失败处理
     *     }
     *
     * @param {Object/String/Array} ksnData KSN数据内容，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，长度可为 10 个字节。
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,索引值必须传入，其他属性在这个方法中没有用到，可以不传.(索引0到99)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    loadDukptInitKsn: function (ksnData, key) {
        var result, errorCode, dataString;

        if(ksnData === null || ksnData === undefined) {
            throw {code: nymphError.PARAM_ERR, message: 'ksnData error'};
        }

        if(!key || key.index === undefined || typeof key.index !== 'number' || key.index > 99 ) {
            throw {code: nymphError.PARAM_ERR, message: 'key or key.index error'};
        }

        //console.nativeLog('开始执行loadDukptInitKey的JS函数');
        dataString = tools.toBase64(ksnData);

        result = hermes.exec(this.PLUGINID, this.instanceId, 'loadDukptInitKsn', [dataString, key]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to loadDukptInitKsn.', innerCode: result.innerCode};
        }

    },

    /**
     * @method getDukptCurKsn
     * 读取指定的 DUKPT 实现实例的 KSN
     * 这个接口针对的是DUKPT密钥管理体系下的应用，MKSK体系的用不到这个接口
     *
     *
     *     try {
     *
     *         var keyindex = new pinPad.Key({
     *           index: 1//索引值必须传入，其他属性在这个方法中没有用到，可以不传
     *         });
     *         var curKsn = pinPadInstance.getDukptCurKsn(keyindex);
     *
     *     } catch (err) {
     *         // 执行失败处理
     *     }
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,索引值必须传入，其他属性在这个方法中没有用到，可以不传.(索引0到99)。
     * @return {Object} 当前KSN，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    getDukptCurKsn: function (key) {
        var result, errorCode;

        if(!key || key.index === undefined || typeof key.index !== 'number' || key.index > 99 ) {
            throw {code: nymphError.PARAM_ERR, message: 'key or key.index error'};
        }

        //console.nativeLog('开始执行getDukptCurKsn的JS函数');
        result = hermes.exec(this.PLUGINID, this.instanceId, 'getDukptCurKsn', [key]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to getDukptCurKsn.', innerCode: result.innerCode};
        }

        if (result.data) {
            return new Buffer(result.data, 'base64');
        }
        return null;
    },

    /**
     * @method getAccessableKapIds
     * 获取 当前应用可访问 KAP 的 ID 列表.
     * 这个接口提供给有kap访问权限限制的应用使用，这些应用请在创建pinpad实例之前先获取一下可以访问的kap区，以免后续访问密码键盘失败
     *
     *     try {
     *          //假设预期的kapid为2个
     *         var expectedKapsNum = 2;
     *         //假设为内置密码键盘
     *         var pinpadType = 'IPP'；
     *         //返回一个KAP数组，里面包含属相kap.groupId和kap.index
     *         var kapIds = getAccessableKapIds(expectedKapsNum,pinpadType);
     *         //返回的实际kapid个数可能与预期的不同，这个需要调用者自己判断
     *         if(kapIds.length === 2){
     *         var pinpad_1 = new PinPad();
     *         var pinpad_2 = new PinPad();
     *         pinpad_1.groupId = kapIds[0].groupId;
     *         pinpad_1.kapIndex = kapIds[0].index;
     *         pinpad_2.groupId = kapIds[1].groupId;
     *         pinpad_2.kapIndex = kapIds[1].index;
     *         }
     *     } catch (err) {
     *         // 执行失败处理
     *     }
     *
     * @param  {Number} expectedKapsNum 预期返回的kap区数量。
     * @param  {nymph.dev.pinPad.PinPadType} pinpadType 密码键盘类型（内置还是外置）。
     * @return {Object} 返回的Kap区ID数组。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    getAccessableKapIds: function (expectedKapsNum,pinpadType){
        var result, errorCode, kapList;
        if(!expectedKapsNum || typeof expectedKapsNum !== 'number'){
            throw {code: nymphError.PARAM_ERR, message: 'expected Kaps Num error'};
        }
        if(!pinpadType || (pinpadType !== PinPadType.EPP && pinpadType !== PinPadType.IPP)){
            throw {code: nymphError.PARAM_ERR, message: 'pinpadType error'};
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'getAccessableKapIds', [expectedKapsNum,pinpadType]);
        errorCode = this.getError(result.innerCode);

        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to getAccessableKapIds.', innerCode: result.innerCode};
        }

        if(result.data){
            kapList = result.data;
        }
        return kapList;
    },

    /**
     * @method increaseDukptKsn
     * 实现当前的KSN自增
     * 这个接口针对的是DUKPT密钥管理体系下的应用，MKSK体系的用不到这个接口
     *
     *
     *     try {
     *
     *         var keyindex = new pinPad.Key({
     *           index: 1(索引值必须传入，其他属性在这个方法中没有用到，可以不传)
     *         });
     *         pinPadInstance.increaseDukptKsn(keyindex);
     *
     *     } catch (err) {
     *         // 执行失败处理
     *     }
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,索引值必须传入，其他属性在这个方法中没有用到，可以不传.(索引0到99)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    increaseDukptKsn: function (key) {
        var result, errorCode;

        if(!key || key.index === undefined || typeof key.index !== 'number' || key.index > 99 ) {
            throw {code: nymphError.PARAM_ERR, message: 'key or key.index error'};
        }

        //console.nativeLog('开始执行increaseDukptKsn的JS函数');
        result = hermes.exec(this.PLUGINID, this.instanceId, 'increaseDukptKsn', [key]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to increaseDukptKsn.', innerCode: result.innerCode};
        }

    },




    /**
     * @method isValid
     * 校验密钥是否合法。
     *
     *     // 校验密钥之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     // 校验已下装的 工作 密钥是否合法
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.PIN
     *         algorithm: pinPad.KeyAlgorithm.TDES,(国密使用KeyAlgorithm.SM4)
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *     var options = {masterKeyIndex: 1};
     *     // 用于检查密钥的数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *     var bufferCheckValue = 'B26EC468EB4D0D3D91AC29C3AEB92614';
     *     // var bufferCheckValue = [0xB2, 0x6E, 0xC4, 0x68, 0xEB, 0x4D, 0x0D, 0x3D, 0x91, 0xAC, 0x29, 0xC3, 0xAE, 0xB9, 0x26, 0x14];
     *     // var bufferCheckValue = new Buffer([0xB2, 0x6E, 0xC4, 0x68, 0xEB, 0x4D, 0x0D, 0x3D, 0x91, 0xAC, 0x29, 0xC3, 0xAE, 0xB9, 0x26, 0x14]);
     *     try {
     *         var result = pinPadInstance.isValid(key, bufferCheckValue, options);
     *         if (result) {
     *             // 密钥合法
     *         } else {
     *             // 密钥不合法
     *         }
     *     } catch (e) {
     *         // 校验失败的处理
     *     }
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,如果是使用国密算法请将key.algorithm属性设置为SM4.
     * @param  {Object/String/Array} checkValue 用于校验密钥的数组（如报文中的 CHACK VALUE 域），数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @param  {Object} options (Optional) 选项。
     * @return {Boolean} 密钥是否合法。
     * @member nymph.dev.pinPad.PinPad
     */
    isValid: function (key, checkValue, options) {
        var result, errorCode, checkValueBuf, kcv, kcvTmp, tempKey;

        //console.log('进入isValid函数（JS层）');
        if(!key || (typeof key !== 'object')){
            throw {code: nymphError.PARAM_ERR, message: 'key do not exist or error'};
        }

        if(!key.hasOwnProperty('type') || !key.index || (typeof key.index !== 'number')){
            throw {code: nymphError.PARAM_ERR, message: 'key.type and key.index do not exist or error'};
        }

        if(!checkValue || (typeof checkValue === 'number')){
            throw {code: nymphError.PARAM_ERR, message: 'checkValue do not exist or error'};
        }

        if (Buffer.isBuffer(checkValue)) {
            checkValueBuf = checkValue;
        } else {
            if (checkValue.constructor === Array) {
                checkValueBuf = new Buffer(checkValue);
            } else {
                try {
                    checkValueBuf = encoding.hexStringToBuffer(checkValue);
                } catch (e) {
                    throw {
                        code: nymphError.PARAM_ERR,
                        message: JSON.stringify(checkValue) + 'should be hexadecimal string.'
                    };
                }
            }
        }

        //console.nativeLog('进入isValid函数（QT层）');
        //console.nativeLog('key = ' + JSON.stringify(key));
        //console.nativeLog('options = ' + JSON.stringify(options));
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'calculateCheckValue', [tempKey, options]);
        errorCode = this.getError(result.innerCode);
        //console.nativeLog('进入isValid函数（QT层返回）' + errorCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to verify key.', innerCode: result.innerCode};
        }

        if (result.data) {
            kcv = new Buffer(result.data, 'base64');
            console.log('原result.data = ' + JSON.stringify(result.data));
            console.log('生成的kcv码(bcd转hex) = ' +  encoding.bufferToHexString(kcv));
        } else {
            throw {code: nymphError.ERROR, message: 'Failed to get KCV.'};
        }
        //国密的checkvalue返回的是8字节，只比较传进来的位数
        if(checkValueBuf.length < kcv.length){
            kcvTmp = kcv.slice(0,checkValueBuf.length);
        }else{
            kcvTmp = kcv;
        }
        if (checkValueBuf.compare(kcvTmp) === 0) {
            //console.log('kcv compare返回成功');
            return true;
        } else {
            //console.log('kcv compare返回失败');
            return false;
        }
    },

    /**
     * @method getKCV
     * 获取KCV
     *
     *     // 获取之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     // 获取对应密钥的KCV
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.MASTER
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *
     *     try {
     *         var result = pinPadInstance.getKCV(key);
     *
     *     } catch (e) {
     *         // 校验失败的处理
     *     }
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,如果是使用国密算法请将key.algorithm属性设置为SM4.
     * @return {String} KCV值。
     * @member nymph.dev.pinPad.PinPad
     */
    getKCV: function (key) {
        var result, errorCode, checkValueBuf, kcv, kcvTmp, tempKey;

        //console.log('进入isValid函数（JS层）');
        if(!key || (typeof key !== 'object')){
            throw {code: nymphError.PARAM_ERR, message: 'key do not exist or error'};
        }

        if(!key.hasOwnProperty('type') || !key.index || (typeof key.index !== 'number')){
            throw {code: nymphError.PARAM_ERR, message: 'key.type and key.index do not exist or error'};
        }

        //console.nativeLog('进入isValid函数（QT层）');
        //console.nativeLog('key = ' + JSON.stringify(key));
        //console.nativeLog('options = ' + JSON.stringify(options));
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'calculateCheckValue', [tempKey]);
        errorCode = this.getError(result.innerCode);
        //console.nativeLog('进入isValid函数（QT层返回）' + errorCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to verify key.', innerCode: result.innerCode};
        }

        if (result.data) {
            kcv = new Buffer(result.data, 'base64');
            console.log('生成的kcv码(bcd转hex) = ' +  encoding.bufferToHexString(kcv));
            return encoding.bufferToHexString(kcv);
        } else {
            throw {code: nymphError.ERROR, message: 'Failed to get KCV.'};
        }

    },

    /**
     * @method calculateMac
     * 计算 MAC。
     *
     *     // 计算 MAC 之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     var macKey = new pinPad.Key({
     *         index: 2,
     *         type: pinPad.KeyType.MAC,
     *         algorithm : pinPad.KeyAlgorithm.DES,(国密使用KeyAlgorithm.SM4)
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *     var options = {
     *         masterKeyIndex: 1,
     *         mode: pinPad.MacMode.ECB,
     *         algorithm: pinPad.MacAlgorithm.ISO9797
     *     };
     *     // 用于 MAC 计算的数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *     var data = '0102030405060708abcdefABCDEF0102';
     *     // var data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02];
     *     // var data = new Buffer([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02]);
     *     try {
     *         var result = pinPadInstance.calculateMac(data, macKey, options);
     *     } catch (e) {
     *         // 计算 MAC 失败的处理
     *     }
     *
     * @param  {Object/String/Array} data 参与计算 MAC 的数据。data 为原始数据，不用补足 8 的倍数。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @param  {nymph.dev.pinPad.Key} key 密钥属性,如果是使用国密算法请将key.algorithm属性设置为SM4.
     * @param  {Object} options 选项。
     * @param {Number} options.masterKeyIndex 主密钥索引。当用来做 MAC 运算的密钥是密文的时候，需要指定解密该密钥的主密钥索引。
     * @param {Object} [options.initVctData=[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]] 初始向量数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     * @param {nymph.dev.pinPad.MacAlgorithm} [options.algorithm] MAC 算法。
     * @param {nymph.dev.pinPad.MacMode} options.mode MAC 工作模式。(在单DES情形下，0 = ECB, 1=CBC, 2=X99。）
     * @return {Object} MAC 后的数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    calculateMac: function (data, key, options) {
        var result, optionKey, errorCode, dataString, actualOptions, tempKey, initVctDataBuffer = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        actualOptions = {initVctData: initVctDataBuffer.toString('base64')};

        //console.nativeLog('进入calculateMac函数（JS层）进程1');
        dataString = tools.toBase64(data);

        if(!data){
            throw {code: nymphError.PARAM_ERR, message: 'data do not exist'};
        }



        if( !key || !key.hasOwnProperty('algorithm')){
            throw {code: nymphError.PARAM_ERR, message: 'key has not algorithm'};
        }

        if(!options){
            throw {code: nymphError.PARAM_ERR, message: 'options do not exist or error'};
        }

        if(options.mode){
            if((options.mode !== 0)&&(options.mode !== 1)&&(options.mode !== 2)){
                throw {code: nymphError.PARAM_ERR, message: 'options.MacMode error'};
            }
        }

        //console.nativeLog('进入calculateMac函数（JS层）进程2');
        if (options) {
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    if (optionKey === 'initVctData') {
                        if (Buffer.isBuffer(options.initVctData)) {
                            actualOptions[optionKey] = options.initVctData.toString('base64');
                        } else {
                            throw {code: nymphError.PARAM_ERR, message: 'Initial vector data should be a Buffer.'};
                        }
                    } else {
                        actualOptions[optionKey] = options[optionKey];
                    }
                }
            }
        }

        //console.nativeLog('进入calculateMac函数（JS层）进程3');
        if (actualOptions.mode === null && typeof actualOptions.mode === 'undefined') {
            throw {code: nymphError.PARAM_ERR, message: 'Please specify MAC work mode(ECB/CBC)!'};
        }
        //console.nativeLog('dataString(base64) = ' + dataString);
        //console.nativeLog('key = ' + JSON.stringify(key));
        //console.nativeLog('actualOptions = ' + JSON.stringify(actualOptions));
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'calculateMac', [dataString, tempKey, actualOptions]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to calculate MAC.', innerCode: result.innerCode};
        }

        if (result.data) {
            return new Buffer(result.data, 'base64');
        }
        return null;
    },

    /**
     * @method encrypt
     * 加密。
     *
     *     // 加密之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     // 使用 PIN 密钥对数据进行加密。
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.PIN
     *         algorithm: KeyAlgorithm.TDES,(国密使用KeyAlgorithm.SM4)
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *     var options = {
     *         masterKeyIndex: 1
     *     };
     *     // 用于加密的数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *     var data = '0102030405060708abcdefABCDEF0102';
     *     // var data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02];
     *     // var data = new Buffer([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02]);
     *     try {
     *         var result = pinPadInstance.encrypt(data, key, options);
     *     } catch (e) {
     *         // 加密失败的处理
     *     }
     *
     * @param  {Object/String/Array} data 需要加密的数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @param  {nymph.dev.pinPad.Key} key 加密使用的密钥属性，如果是使用国密算法请将key.algorithm属性设置为SM4(工作密钥索引0到7)
     * @param {Object} options (Optional) 加密其他选项。
     * @param {Object/String/Array} options.keyData (Optional) 密钥数据明文，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，长度可为 8 位、16 位、24 位。
     *                                                         这是用来做临时加密运算的，即调用者传入明文密钥、数据，接口返回加密结果，若该密钥已存在于密码键盘上，则无需传入密钥数据，国密算法时这个用法失效
     * @param {nymph.dev.pinPad.DesMode} options.desMode (Optional) des算法模式，可以不填写，默认为ECB模式
     * @return {Object} 加密后的数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    encrypt: function (data, key, options) {
        var result, errorCode, optionKey, dataString, tempKey, actualOptions = {isTmsKey: false};
        if(!data){
            throw {code: nymphError.PARAM_ERR, message: 'data error'};
        }
        //console.nativeLog('进入encrypt函数（JS层）进程1');
        dataString = tools.toBase64(data);
        if(!key){
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }
        //console.nativeLog('进入encrypt函数（JS层）进程2');
        // 调整参数。
        if (options) {
            actualOptions.desMode = DesMode.TECB;
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    if (optionKey === 'keyData') {
                        if(((options[optionKey].length !== 8)&&(options[optionKey].length !== 16)&&(options[optionKey].length !== 24))){
                            throw {code: nymphError.PARAM_ERR, message: 'keyData length error'};
                        }else{
                            actualOptions[optionKey] = tools.toBase64(options[optionKey]);
                        }
                    } else if(optionKey === 'desMode'){
                        if((options[optionKey] !== DesMode.TECB) && (options[optionKey] !== DesMode.TCBC)){
                            throw {code: nymphError.PARAM_ERR, message: 'des Mode error'};
                        }else{
                            actualOptions[optionKey] = options[optionKey];
                        }
                    } else {
                        actualOptions[optionKey] = options[optionKey];
                    }
                }
            }
        } else {
            actualOptions.desMode = DesMode.TECB;
        }
        //console.nativeLog('进入encrypt函数（JS层）进程3');
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'encrypt', [dataString, tempKey, actualOptions]);
        errorCode = this.getError(result.innerCode);
        //console.nativeLog('进入encrypt函数（JS层）进程4');
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to encrypt.', innerCode: result.innerCode};
        }
        //console.nativeLog('进入encrypt函数（JS层）运行成功');
        if (result.data) {
            return new Buffer(result.data, 'base64');
        }
        return null;
    },

    /**
     * @method encryptMagTrackData
     * 加密磁道数据。
     *
     *     // 加密之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.TRACK,
     *         algorithm: KeyAlgorithm.TDES,(国密使用KeyAlgorithm.SM4)
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *
     *     // 用于加密的数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *     var data = '0102030405060708abcdefABCDEF0102';
     *     // var data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02];
     *     // var data = new Buffer([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02]);
     *     try {
     *         var result = pinPadInstance.encryptMagTrackData(data, key, options);
     *     } catch (e) {
     *         // 加密失败的处理
     *     }
     *
     * @param  {Object/String/Array} data 需要加密的磁道数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @param  {nymph.dev.pinPad.Key} key 加密使用的密钥属性，如果是使用国密算法请将key.algorithm属性设置为SM4(工作密钥索引0到7)
     * @param {Object} options (Optional) 加密其他选项。
     * @param {nymph.dev.pinPad.DesMode} options.desMode (Optional) des算法模式，可以不填写，默认为ECB模式
     * @return {Object} 加密后的数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    encryptMagTrackData: function (data, key, options) {
        var result, errorCode, optionKey, dataString, tempKey, actualOptions = {isTmsKey: false};
        if(!data){
            throw {code: nymphError.PARAM_ERR, message: 'data error'};
        }
        //console.nativeLog('进入encrypt函数（JS层）进程1');
        dataString = tools.toBase64(data);
        if(!key){
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }
        //console.nativeLog('进入encrypt函数（JS层）进程2');
        // 调整参数。
        if (options) {
            actualOptions.desMode = DesMode.TECB;
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    if(optionKey === 'desMode'){
                        if((options[optionKey] !== DesMode.TECB) && (options[optionKey] !== DesMode.TCBC)){
                            throw {code: nymphError.PARAM_ERR, message: 'des Mode error'};
                        }else{
                            actualOptions[optionKey] = options[optionKey];
                        }
                    } else {
                        actualOptions[optionKey] = options[optionKey];
                    }
                }
            }
        } else {
            actualOptions.desMode = DesMode.TECB;
        }
        //console.nativeLog('进入encryptMagTrackData函数（JS层）进程3');
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'encryptMagTrackData', [dataString, tempKey, actualOptions]);
        errorCode = this.getError(result.innerCode);
        //console.nativeLog('进入encryptMagTrackData函数（JS层）进程4');
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to encryptMagTrackData.', innerCode: result.innerCode};
        }
        //console.nativeLog('进入encryptMagTrackData函数（JS层）运行成功');
        if (result.data) {
            return new Buffer(result.data, 'base64');
        }
        return null;
    },

    /**
     * @method decrypt
     * 解密。
     *
     *     // 解密之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     // 使用 PIN 密钥对数据进行解密。
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.PIN
     *         algorithm: KeyAlgorithm.TDES(国密使用KeyAlgorithm.SM4)
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *     var options = {
     *         masterKeyIndex: 1
     *     };
     *     // 用于解密的数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     *     var data = '0102030405060708abcdefABCDEF0102';
     *     // var data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02];
     *     // var data = new Buffer([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0xab, 0xcd, 0xef, 0xAB, 0xCD, 0xEF, 0x01, 0x02]);
     *     try {
     *         var result = pinPadInstance.decrypt(data, key, options);
     *     } catch (e) {
     *         // 解密失败的处理
     *     }
     *
     * @param  {Object/String/Array} data 需要解密的数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)。
     * @param  {nymph.dev.pinPad.Key} key 解密使用的密钥属性，如果是使用国密算法请将key.algorithm属性设置为SM4(工作密钥索引0到7)
     * @param {Object} options (Optional) 解密其他选项。
     * @param {Object/String/Array} options.keyData (Optional) 密钥数据，数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)，长度可为 8 位、16 位、24 位。
     *                                                          这是用来做临时解密运算的，即调用者传入明文密钥、数据，接口返回解密结果，若该密钥已存在于密码键盘上，则无需传入密钥数据，国密算法时这个用法失效
     ** @param {nymph.dev.pinPad.DesMode} options.desMode (Optional) des算法模式，可以不填写，默认为ECB模式
     * @return {Object} 解密后的数据，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    decrypt: function (data, key, options) {
        var result, errorCode, optionKey, dataString, tempKey,actualOptions = {isTmsKey: false};
        if(!data){
            throw {code: nymphError.PARAM_ERR, message: 'data error'};
        }
        //console.nativeLog('进入decrypt函数（JS层）进程1');
        dataString = tools.toBase64(data);
        if(!key){
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }
        //console.nativeLog('进入decrypt函数（JS层）进程2');
        // 调整参数。
        if (options) {
            actualOptions.desMode = DesMode.TECB;
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    if (optionKey === 'keyData') {
                        if(((options[optionKey].length !== 8)&&(options[optionKey].length !== 16)&&(options[optionKey].length !== 24))){
                            throw {code: nymphError.PARAM_ERR, message: 'keyData length error'};
                        }else{
                            actualOptions[optionKey] = tools.toBase64(options[optionKey]);
                        }
                    } else if(optionKey === 'desMode'){
                        if((options[optionKey] !== DesMode.TECB) && (options[optionKey] !== DesMode.TCBC)){
                            throw {code: nymphError.PARAM_ERR, message: 'des Mode error'};
                        }else{
                            actualOptions[optionKey] = options[optionKey];
                        }
                    } else {
                        actualOptions[optionKey] = options[optionKey];
                    }
                }
            }
        } else {
            actualOptions.desMode = DesMode.TECB;
        }
        //console.nativeLog('进入decrypt函数（JS层）进程3');
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'decrypt', [dataString, tempKey, actualOptions]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to decrypt.', innerCode: result.innerCode};
        }
        //console.nativeLog('进入decrypt函数（JS层）运行成功');
        if (result.data) {
            return new Buffer(result.data, 'base64');
        }
        return null;
    },

    /**
     * @method doesKeyExist
     * 检查指定密钥是否存在。
     *
     *     // 检查指定密钥是否存在之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     // 检查 PIN 密钥是否存在。
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.PIN
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *     try {
     *         var result = pinPadInstance.doesKeyExist(key);
     *         if (result) {
     *             // 密钥存在
     *         } else {
     *             // 密钥不存在
     *         }
     *     } catch (e) {
     *         // 检查指定密钥是否存在失败的处理
     *     }
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性。(工作密钥索引0到7)
     * @return {Boolean} 指定密钥是否存在。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    doesKeyExist: function (key) {
        var result, errorCode,tempKey;
        if(!key || (typeof key !== 'object')){
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'doesKeyExist', [tempKey]);
        errorCode = this.getError(result.innerCode);
        if ((errorCode !== nymphError.SUCCESS)&&(result.innerCode !== 39)) {
            throw {code: errorCode, message: 'Failed to check the key.', innerCode: result.innerCode};
        }

        if (result.data) {
            //console.nativeLog('指定密钥的信息 = ' + JSON.stringify(result.data));
            return true;
        }else if(result.innerCode === 39){
            return false;
        }

    },

    /**
     * @method deleteKey
     * 删除指定的密钥。
     * @private
     *
     *     // 删除指定的密钥之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     // 删除 PIN 密钥。
     *     var key = new pinPad.Key({
     *         index: 1,
     *         type: pinPad.KeyType.PIN
     *         system:KeySystem.MKSK(这个值默认值为MKSK，不传就默认为MKSK)
     *     });
     *     try {
     *         pinPadInstance.deleteKey(key);
     *     } catch (e) {
     *         // 删除 PIN 密钥失败的处理
     *     }
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性。(工作密钥索引0到7)
     * @member nymph.dev.pinPad.PinPad
     */
    deleteKey: function (key) {
        var result, errorCode,tempKey;
        if(!key || (typeof key !== 'object')){
            throw {code: nymphError.PARAM_ERR, message: 'key error'};
        }
        tempKey = new Key(key);
        result = hermes.exec(this.PLUGINID, this.instanceId, 'deleteKey', [tempKey]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to delete the key.', innerCode: result.innerCode};
        }
    },

    /**
     * @method inputOnlinePin
     * 输入联机 PIN。
     *
     *     // 输入联机 PIN 之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     var options = {
     *       lengthLimit:[4, 8],
     *       pan: '123456789012345678',
     *       completeTimeout: 600,
     *       keypressTimeout: 10
     *     };
     *
     *     var pinKey = new pinPad.Key({
     *         system: pinPad.KeySystem.MKSK,(可以不传，不传为默认值，默认值为MKSK)
     *         type: pinPad.KeyType.PIN,
     *         algorithm: pinPad.KeyAlgorithm.TDES,(国密使用KeyAlgorithm.SM4)
     *         index: 2
     *     });
     *
     *     // 移除所有监听器
     *     pinPadInstance.removeAllListeners();
     *
     *     pinPadInstance.on('keypress', function (keycode) {
     *     switch (keyCode) {
     *        // 不同 keyCode 的处理
     *     });
     *
     *     pinPadInstance.inputOnlinePin(pinKey, options, function(err, pinBlock){
     *         pinPadInstance.close();
     *         if (err) {
     *            // 输入 pin 出错的处理
     *         } else {
     *           // 输入 pin 成功的处理
     *         }
     *     });
     *
     * @param  {nymph.dev.pinPad.Key} key 密钥属性。`key.type` 默认为 `pinPad.Type.PIN`，如果是使用国密算法请将key.algorithm属性设置为SM4
     * @param {Object} options 输入联机 PIN 时需要的参数。
     * @param {String} [options.pan=null] 完整的主账号。
     * @param {Number} options.completeTimeout (Optional) PIN 输入的超时时间，值应为 300 - 600,最大值为 600s。单位为秒。
     * @param {Number} options.keypressTimeout (Optional) 两次 PIN 按键动作之间的超时时间，值应为 1- 300,最大为 300s。单位为秒。

     * @param {Array} [options.lengthLimit] 支持的PIN长度（数组），数组内容不大于12且不小于4（可为0值）。
     * @param {Boolean} [options.allowCancelFromPinPad=true]  禁止从 PIN Pad 按取消键取消 PIN 输入。用于有触摸屏或者上位机的场景。
     * @param {Boolean} [options.autoComplete=true]  当 PIN 长度达到指定长度时，自动完成 PIN 输入过程。用于有触摸屏或者上位机的场景。
     * @param {Boolean} [options.allowInjectKey=true]  是否允许上位机按取消键结束交易，以干涉 PIN 输入过程。用于有触摸屏或者上位机的场景。
     * @param {nymph.dev.pinPad.PinMode} [pinMode=ISO9564FMT0] PIN 算法类型。
     * @fires keypress
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.pinBlock 密码密文，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)，长度为 8 位。当密码为空时，pinBlock 为 null。
     * @member nymph.dev.pinPad.PinPad
     */
    inputOnlinePin: function (key, options, callback) {
        var self = this, optionKey, result,errorCode ,tempKey,dataLenStr = '', actualOptions = {},
            err = new Error();
        if(!callback || (typeof callback !== 'function')){
            throw {code: nymphError.PARAM_ERR, message: 'callback do not exist or error'};
        }
        if (self.isInputting) {
            err.code = nymphError.DEVICE_USED;
            err.message = 'Already executing PIN input, please wait until this PIN input finished.';
            callback.call(self, err);
            return;
        }

        if(!key || (typeof key !== 'object')){
            err.code = nymphError.PARAM_ERR;
            err.message = 'key do not exist or error';
            callback.call(self, err);
            self.isInputting = false;
            return;
        }

        if(!key.hasOwnProperty('system') || !key.index || (typeof key.index !== 'number')){
            err.code = nymphError.PARAM_ERR;
            err.message = 'key.system and key.index do not exist or error';
            callback.call(self, err);
            self.isInputting = false;
            return;
        }

        if (!options){
            err.code = nymphError.PARAM_ERR;
            err.message = 'options do not exist';
            callback.call(self, err);
            return;
        }

        if ((options.completeTimeout) && (typeof options.completeTimeout === 'number')) {
            if (options.completeTimeout > 600 || options.completeTimeout < 300) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'The timeout of PIN input should between 300s and 600s(including 300s and 600s).';
                callback.call(self, err);
                self.isInputting = false;
                return;
            }
        }else{
            err.code = nymphError.PARAM_ERR;
            err.message = 'options.completeTimeout error';
            callback.call(self, err);
            self.isInputting = false;
            return;
        }

        if ((options.keypressTimeout) && (typeof options.completeTimeout === 'number')) {
            if (options.keypressTimeout > 300 || options.keypressTimeout < 1) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'The timeout between two key presses shoud between 1s and 300s(including 1s and 300s).';
                callback.call(self, err);
                self.isInputting = false;
                return;
            }
        }else{
            err.code = nymphError.PARAM_ERR;
            err.message = 'options.keypressTimeout error';
            callback.call(self, err);
            self.isInputting = false;
            return;
        }

        if (!options.hasOwnProperty('allowCancelFromPinPad')) {
            options.allowCancelFromPinPad = true;
        }
        /*    if (!options.hasOwnProperty('autoComplete')) {
         options.autoComplete = true;
         }
         */
        if (!options.hasOwnProperty('allowInjectKey')) {
            options.allowInjectKey = true;
        }

        if (!options.pinMode) {
            options.pinMode = PinMode.ISO9564FMT0;
        }

        if (!options.pan || (typeof options.pan !== 'string')){
            err.code = nymphError.PARAM_ERR;
            err.message = 'options.pan error';
            callback.call(self, err);
            self.isInputting = false;
            return;
        }
        //console.nativeLog('@@@@  options[lengthLimit] = ' +  options['lengthLimit']);
        // 调整参数。
        if (options && (typeof options === 'object')) {
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    if ((optionKey === 'lengthLimit')) {
                        if((options.lengthLimit)&& (options.lengthLimit instanceof Array)){
                            //console.nativeLog('@@@@  options[lengthLimit] step 1 = ' +optionKey);
                            for (var i = 0; i <= 12; i++) {
                                //console.nativeLog('@@@@  options[lengthLimit] step 2(i) = ' + i);
                                for (var j in options.lengthLimit) {
                                    if((options.lengthLimit[j]>12||options.lengthLimit[j]<4)&&(options.lengthLimit[j] !== 0 )){
                                        err.code = nymphError.PARAM_ERR;
                                        err.message = 'options.lengthLimit error,i<4 or i>12';
                                        callback.call(self, err);
                                        self.isInputting = false;
                                        return;
                                    }
                                    //console.nativeLog('@@@@  options[lengthLimit] step 3(j) = ' + j + ' data = ' + options['lengthLimit'][j]);
                                    if (i === options.lengthLimit[j]) {
                                        if (i === 0 || (i >= 4 && i <= 9)) {
                                            dataLenStr = dataLenStr + '0' + i;
                                        }
                                        else if (i === 10) {
                                            dataLenStr = dataLenStr + '0' + 'a';
                                        }
                                        else if (i === 11) {
                                            dataLenStr = dataLenStr + '0' + 'b';
                                        }
                                        else if (i === 12) {
                                            dataLenStr = dataLenStr + '0' + 'c';
                                        }else{
                                            err.code = nymphError.PARAM_ERR;
                                            err.message = 'options.lengthLimit error,i<4 or i>12';
                                            callback.call(self, err);
                                            self.isInputting = false;
                                            return;
                                        }
                                        //console.nativeLog('@@@@  options[lengthLimit] step 4(dataLenStr) = ' + dataLenStr);
                                        break;
                                    }

                                }
                            }
                            //console.nativeLog('@@@@  options[lengthLimit] step 5(dataLenStr) = ' + dataLenStr);
                            actualOptions[optionKey] = tools.toBase64(encoding.hexStringToBuffer(dataLenStr));
                            //console.nativeLog('@@@@  options[lengthLimit] step 6(dataLenStr) = ' +  actualOptions['lengthLimit']);
                        }
                        else {
                            err.code = nymphError.PARAM_ERR;
                            err.message = 'options.lengthLimit type error';
                            callback.call(self, err);
                            self.isInputting = false;
                            return;
                        }
                    } else {
                        actualOptions[optionKey] = options[optionKey];
                    }
                }
            }
        }else{
            err.code = nymphError.PARAM_ERR;
            err.message = 'options do not exist';
            callback.call(self, err);
            self.isInputting = false;
            return;
        }

        self.isInputting = true;
        //console.nativeLog('actualOptions[lengthLimit] step 7 (bufferToHexString) = ' + actualOptions['lengthLimit']);
        tempKey = new Key(key);
        //console.nativeLog('进入inputOnlinePin函数（JS层）进程2');
        result = hermes.exec(self.PLUGINID, this.instanceId, 'inputOnlinePin', [tempKey, actualOptions], function (error, pinBlock) {
            //console.nativeLog('进入inputOnlinePin函数（JS层）进程3');
            self.isInputting = false;
            if (error) {
                err.code = self.getError(error.innerCode);
                err.message = 'inputOnlinePin return fail:'+err.code;
                //console.nativeLog('inputOnlinePin函数（JS层）进程4，err.code = ' + err.code);
                callback.call(self, err);
            } else {
                // 底层送上来的已经是 8 个字节密文
                if (pinBlock === 0) {
                    //console.nativeLog('inputOnlinePin函数（JS层）进程4，pinBlock = NULL');
                    callback.call(self, null, null);
                } else {
                    //console.nativeLog('inputOnlinePin函数（JS层）进程4，返回的pinBlock长度： ' + pinBlock.length);
                    var pinOriginalBuffer = new Buffer(pinBlock, 'base64');
                    //console.nativeLog('inputOnlinePin函数（JS层）进程4，返回的pinBlock = ' + encoding.bufferToHexString(pinOriginalBuffer));
                    //var pinOriginalString = pinOriginalBuffer.toString('ascii');
                    //var pinBuffer = encoding.hexStringToBuffer(pinOriginalString);
                    callback.call(self, null, pinOriginalBuffer);
                }
            }
        });
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            err.code = errorCode;
            err.message = 'inputOnlinePin return fail:'+errorCode;
            self.isInputting = false;
            callback.call(self, err);
            return;
        }
    },

    /**
     * @method inputOfflinePin
     * 输入脱机 Pin。
     *
     *     // 输入脱机 PIN 之前要先执行成功 {@link nymph.dev.pinPad.PinPad#open open}。
     *     var options = {
     *       lengthLimit: [4, 8],
     *       completeTimeout: 600,
     *       keypressTimeout: 10
     *     };
     *
     *     // 移除所有监听器
     *     pinPadInstance.removeAllListeners();
     *
     *     pinPadInstance.on('keypress', function (keycode) {
     *     switch (keyCode) {
     *        // 不同 keyCode 的处理
     *     });
     *
     *     pinPadInstance.inputOfflinePin(options, function(err, pinBlock){
     *         pinPadInstance.close();
     *         if (err) {
     *            // 输入 pin 出错的处理
     *         } else {
     *           // 输入 pin 成功的处理
     *         }
     *     });
     *
     * @param {Object} options (Optional) 输入脱机 PIN 时需要的参数。
     * @param {Boolean} [options.lengthLimit] 支持的PIN长度（数组），数组内容不大于12且不小于4（可为0值）。
     * @param {Number} options.completeTimeout (Optional) PIN 输入的超时时间，值应为 300 - 600,最大值为 600s。单位为秒。
     * @param {Number} options.keypressTimeout (Optional) 两次 PIN 按键动作之间的超时时间，值应为 1- 300,最大为 300s。单位为秒。
     * @fires keypress
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.pinBlock 成功返回全零.
     * @member nymph.dev.pinPad.PinPad
     */
    inputOfflinePin: function (options, callback) {
        var self = this, optionKey, result, errorCode,dataLenStr = '', actualOptions = {},
            err = new Error();
        if(!callback || (typeof callback !== 'function')){
            throw {code: nymphError.PARAM_ERR, message: 'callback do not exist or error'};
        }
        if (self.isInputting) {
            err.code = nymphError.DEVICE_USED;
            err.message = 'Already executing PIN input, please wait until this PIN input finished.';
            callback.call(self, err);
            return;
        }
        if (!options){
            err.code = nymphError.PARAM_ERR;
            err.message = 'options do not exist';
            callback.call(self, err);
            return;
        }

        if (options.completeTimeout && (typeof options.completeTimeout === 'number')) {
            if (options.completeTimeout > 600 || options.completeTimeout < 300) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'The timeout of PIN input should between 300s and 600s(including 300s and 600s).';
                callback.call(self, err);
                self.isInputting = false;
                return;
            }
        }else{
            err.code = nymphError.PARAM_ERR;
            err.message = 'options.completeTimeout error';
            callback.call(self, err);
            return;
        }

        if (options.keypressTimeout && (typeof options.completeTimeout === 'number')) {
            if (options.keypressTimeout > 300 || options.keypressTimeout < 1) {
                err.code = nymphError.PARAM_ERR;
                err.message = 'The timeout between two key presses shoud between 1s and 300s(including 1s and 300s).';
                callback.call(self, err);
                self.isInputting = false;
                return;
            }
        }else{
            err.code = nymphError.PARAM_ERR;
            err.message = 'options.completeTimeout error';
            callback.call(self, err);
            return;
        }

        //console.nativeLog('进入inputOfflinePin函数（JS层）进程2');

        //console.nativeLog('@@@@  options[lengthLimit] = ' +  options['lengthLimit']);
        // 调整参数。
        if (options && (typeof options === 'object')) {
            for (optionKey in options) {
                if (options.hasOwnProperty(optionKey)) {
                    if (optionKey === 'lengthLimit') {
                        if((options.lengthLimit)&& (options.lengthLimit instanceof Array)){
                            //console.nativeLog('@@@@  options[lengthLimit] step 1 = ' +optionKey);
                            for (var i = 0; i <= 12; i++) {
                                //console.nativeLog('@@@@  options[lengthLimit] step 2(i) = ' + i);
                                for (var j in options.lengthLimit) {
                                    if((options.lengthLimit[j]<4 || options.lengthLimit[j]>12)&&(options.lengthLimit[j] !== 0 )){
                                        err.code = nymphError.PARAM_ERR;
                                        err.message = 'options.lengthLimit error,i<4 or i>12';
                                        callback.call(self, err);
                                        return;
                                    }
                                    //console.nativeLog('@@@@  options[lengthLimit] step 3(j) = ' + j + ' data = ' + options['lengthLimit'][j]);
                                    if (i === options.lengthLimit[j]) {
                                        if (i === 0 || (i >= 4 && i <= 9)) {
                                            dataLenStr = dataLenStr + '0' + i;
                                        }
                                        else if (i === 10) {
                                            dataLenStr = dataLenStr + '0' + 'a';
                                        }
                                        else if (i === 11) {
                                            dataLenStr = dataLenStr + '0' + 'b';
                                        }
                                        else if (i === 12) {
                                            dataLenStr = dataLenStr + '0' + 'c';
                                        }else{
                                            err.code = nymphError.PARAM_ERR;
                                            err.message = 'options.lengthLimit error,i<4 or i>12';
                                            callback.call(self, err);
                                            return;
                                        }
                                        //console.nativeLog('@@@@  options[lengthLimit] step 4(dataLenStr) = ' + dataLenStr);
                                        break;
                                    }

                                }
                            }
                            //console.nativeLog('@@@@  options[lengthLimit] step 5(dataLenStr) = ' + dataLenStr);
                            actualOptions[optionKey] = tools.toBase64(encoding.hexStringToBuffer(dataLenStr));
                            //console.nativeLog('@@@@  options[lengthLimit] step 6(dataLenStr) = ' +  actualOptions['lengthLimit']);
                        }else{
                            err.code = nymphError.PARAM_ERR;
                            err.message = 'options.lengthLimit type error';
                            callback.call(self, err);
                            return;
                        }

                    } else {
                        actualOptions[optionKey] = options[optionKey];
                    }
                }
            }
        }else{
            err.code = nymphError.PARAM_ERR;
            err.message = 'options do not exist';
            callback.call(self, err);
            return;
        }

        self.isInputting = true;
        result = hermes.exec(self.PLUGINID, this.instanceId, 'inputOfflinePin', [actualOptions], function (error, pinBlock) {
            //console.nativeLog('进入inputOfflinePin函数（JS层）进程3');
            self.isInputting = false;
            if (error) {
                err.code = self.getError(error.innerCode);
                err.message = 'inputOfflinePin return fail:'+err.code;
                //console.nativeLog('inputOfflinePin函数（JS层）进程4，err.code = ' + err.code);
                callback.call(self, err);
            } else {
                // 底层送上来的已经是 8 个字节密文
                if (pinBlock === 0) {
                    //console.nativeLog('inputOfflinePin函数（JS层）进程4，pinBlock = NULL');
                    callback.call(self, null, null);
                } else {
                    var pinOriginalBuffer = new Buffer(pinBlock, 'base64');
                    //console.nativeLog('inputOfflinePin函数（JS层）进程4，返回的pinBlock = ' + encoding.bufferToHexString(pinOriginalBuffer));
                    //var pinOriginalString = pinOriginalBuffer.toString('ascii');
                    //var pinBuffer = encoding.hexStringToBuffer(pinOriginalString);
                    callback.call(self, null, pinOriginalBuffer);
                }
            }
        });
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            err.code = errorCode;
            err.message = 'inputOfflinePin return fail:'+errorCode;
            self.isInputting = false;
            callback.call(self, err);
            return;
        }
    },

    /**
     * @method downloadMkeyFromMasterPos
     * 从母pos下载主密钥，调用这个接口可以不用new或者open（这个接口仅对海外市场使用）
     *
     *     try {
     *         pinPadInstance.downloadMkeyFromMasterPos(callback);
     *     } catch (e) {
     *
     *     }
     *
     * @param {Function} callback 回调操作，
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    downloadMkeyFromMasterPos: function (callback) {
        var result, errorCode,self = this,err = new Error();
        console.log('pinpad.js downloadMkeyFromMasterPos');
        if (self.isInputting) {
            throw {code: nymphError.DEVICE_USED, message: 'AlReady waiting for master key. Please wait or cancel!'};
        }
        if(!callback){
            throw {code: nymphError.PARAM_ERR, message: 'callback do not exist or error'};
        }

        hermes.exec(this.PLUGINID, this.instanceId, 'downloadMkeyFromMasterPos', [] ,function(error){
            self.isInputting = false;
            if (error) {
                errorCode = self.getError(error.innerCode);
                err.code = errorCode;
                err.message = 'downloadMkeyFromMasterPos return fail:'+errorCode;
                self.isInputting = false;
                callback.call(self, err);
            } else {
                callback.call(self, null);
            }
        });
    },

    /**
     * @method cancelDownloadMkeyFromMasterPos
     * 取消从母pos下载主密钥，调用这个接口可以不用open（这个接口仅对海外市场使用）
     *
     *     try {
     *         pinPadInstance.cancelDownloadMkeyFromMasterPos();
     *     } catch (e) {
     *
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    cancelDownloadMkeyFromMasterPos: function () {
        var result, errorCode,self = this;

        result = hermes.exec(this.PLUGINID, this.instanceId, 'cancelDownloadMkeyFromMasterPos', []);
        errorCode = this.getError(result.innerCode);
        self.isInputting = false;
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to cancelDownloadMkeyFromMasterPos.', innerCode: result.innerCode};
        }
    },

    /**
     * @method cancelInputPin
     * 取消 PIN 输入。
     *
     *     try {
     *         pinPadInstance.cancelInputPin();
     *     } catch (e) {
     *         // 取消 PIN 输入失败的处理
     *     }
     *
     * @param {Boolean} [isQuit=true] 是否是用户主动退出
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    cancelInputPin: function (isQuit) {
        var result, errorCode;

        if (!this.isInputting) {
            // 用户没有请求输入联机 pin，则无需通知底层取消
            throw {code: nymphError.ERROR, message: 'Do not input pin!'};
        }

        if (isQuit === null || typeof isQuit === 'undefined' || typeof isQuit !== 'boolean') {
            // 默认为用户主动退出
            isQuit = true;
        }

        result = hermes.exec(this.PLUGINID, this.instanceId, 'cancelInputPin', [isQuit]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to cancel PIN input.', innerCode: result.innerCode};
        }else {
            //输pin标准设置为false，否则在close时会重复调用cancelInputPin影响close
            this.isInputting = false;
        }
    },

    /**
     * @method display
     * 在外置密码键盘上显示内容。
     *
     * ** 该接口只对外置密码键盘有效。**
     *
     *     try {
     *         // 清空第一行内容
     *         pinPadInstance.display(1);
     *
     *         // 在第一行显示 message
     *         pinPadInstance.display(1， '显示消息内容');
     *     } catch (e) {
     *         // 在外置密码键盘上显示内容失败的处理
     *     }
     *
     * @param  {Number} lineNumber 行号。取值范围为 [1, 2]。
     * @param  {String} message 显示的内容。当 message 字符串为空格符时(' ')，可清空该行内容。(当输入字符串超过 16 字节时, 只显示前 16 字节)
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    display: function (lineNumber, message) {
        var result, errorCode;
        // message长度为0，则抛出异常。
        if(!lineNumber || (typeof lineNumber !== 'number')){
            throw {code: nymphError.PARAM_ERR, message: 'lineNumber miss'};
        }
        if (!message || message === '') {
            throw {code: nymphError.PARAM_ERR, message: 'Param miss'};
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'display', [lineNumber, message]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {
                code: errorCode,
                message: 'Failed to display message on external PIN pad.',
                innerCode: result.innerCode
            };
        }
    },

    /**
     * @method clearScreen
     * 清空外置密码键盘上显示的内容。
     *
     * ** 该接口只对外置密码键盘有效。**
     *
     *     try {
     *         pinPadInstance.clearScreen(1);
     *     } catch (e) {
     *         // 清空外置密码键盘上显示的内容失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    clearScreen: function () {
        var result, errorCode;

        result = hermes.exec(this.PLUGINID, this.instanceId, 'clearScreen', []);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {
                code: errorCode,
                message: 'Failed to clear messages on the external PIN pad.',
                innerCode: result.innerCode
            };
        }
    },

    /**
     * @method beep
     * 让外置密码键盘鸣叫指定时间。
     *
     * ** 该接口只对外置密码键盘有效。**
     *
     *     try {
     *         // 蜂鸣 1 s
     *         pinPadInstance.beep(1000);
     *     } catch (e) {
     *         // 蜂鸣失败的处理
     *     }
     *
     * @param {Number} msec 蜂鸣的时间，单位为毫秒。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    beep: function (msec) {
        var result, errorCode;
        if(!msec || typeof msec !== 'number'){
            throw {code: nymphError.PARAM_ERR, message: 'msec miss'};
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'beep', [msec]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to beep on external PIN pad.', innerCode: result.innerCode};
        }
    },

    /**
     * @method getRandom
     * 获取 8 字节随机数。
     *
     *     try {
     *        // 获取 8 字节的随机数
     *        var random = pinPadInstance.getRandom();
     *     } catch (e) {
     *         // 获取失败的处理
     *     }
     *
     * @return {Object} 8 字节随机数，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    getRandom: function () {
        var result, errorCode;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'getRandom', []);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to get random data.', innerCode: result.innerCode};
        }

        return new Buffer(result.data, 'base64');
    },

    /**
     * @method close
     * 关闭密码键盘。
     *
     *     try {
     *        pinPadInstance.close();
     *     } catch (e) {
     *         // 关闭失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    close: function () {
        var result, errorCode;
        if (this.isInputting) {
            this.cancelInputPin();
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'close', []);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to close PIN pad.', innerCode: result.innerCode};
        }

        if (this.instanceId !== hermes.NULL) {
            hermes.removeJsPluginInstance(this.instanceId);
        }

        this.instanceId = hermes.NULL;
        this.unBindEvents();
    },

    /**
     * @method format
     * 格式化密码键盘。
     * @private
     *
     * ** 请谨慎使用该接口。** 物理设备上的所有密钥数据，配置信息都将被擦除。注：'用户序列号' 不会被清除。
     *
     *     try {
     *        pinPadInstance.format();
     *     } catch (e) {
     *         // 格式化失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    format: function () {
        var result, errorCode;

        result = hermes.exec(this.PLUGINID, this.instanceId, 'format', []);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to format PIN pad.', innerCode: result.innerCode};
        }
    },
    /**
     * @property {Number} FOPTBV_ENCRYPTED_BY_PUBLIC_KEY mFmtOfPin 的有效取值之一, 表征送 IC 卡校验的 PIN 经公钥加密的密文形态.
     * @member nymph.dev.pinPad.PinPad
     */
    FOPTBV_ENCRYPTED_BY_PUBLIC_KEY: 1,

    /**
     * @property {Number} FOPTBV_PLAIN_TEXT mFmtOfPin 的有效取值之一, 表征送 IC 卡校验的 PIN 是明文形态.
     * @member nymph.dev.pinPad.PinPad
     */
    FOPTBV_PLAIN_TEXT: 0,

    /**
     * @property {Number} VCF_DEFAULT 目前唯一支持的 mVerifyCmdFmt 的取值
     * @member nymph.dev.pinPad.PinPad
     */
    VCF_DEFAULT: 0,

    /**
     * @property {Number} PEUK_EXP_BYTE_LEN PEUK 的 指数 buffer 的 字节长度.
     * @member nymph.dev.pinPad.PinPad
     */
    PEUK_EXP_BYTE_LEN: 128,

    /**
     * @property {Number} PEUK_EXPIRED_DATA_LEN 公钥失效期长度.
     * @member nymph.dev.pinPad.PinPad
     */
    PEUK_EXPIRED_DATA_LEN: 4,

    /**
     * @property {Number} PEUK_HASH_BYTE_LEN PEUK 校验 hash 的字节长度.
     * @member nymph.dev.pinPad.PinPad
     */
    PEUK_HASH_BYTE_LEN: 20,

    /**
     * @property {Number} PEUK_MOD_BYTE_LEN PEUK 模 buffer 的字节长度.
     * @member nymph.dev.pinPad.PinPad
     */
    PEUK_MOD_BYTE_LEN: 256,
    /**
     * @method verifyOfflinePin
     * 验证脱机pin。
     *
     * **下装密文密钥时，必须确保用于解密的明文主密钥存在，否则将导致失败。**
     *
     *
     * @param {Object} options (Optional)  认证操作的配置。
     * @param {Number} options.icCardToken   提供给 pinpad 物理设备的, 用来索引目标 IC 卡设备的 token.
     * @param {Number} options.fmtOfPin   指定将送 IC 卡验证的 PIN block 的形式, 密文 or 明文. 有效的取值是 FOPTBV_PLAIN_TEXT 或者 FOPTBV_ENCRYPTED_BY_PUBLIC_KEY.
     * @param {Object} options.random   8 字节随机数, 仅仅在要提交 密文 PIN 的时候有效.
     * @param {Number} options.verifyCmdFmt    指定将送 IC 卡的 "PIN 校验 APDU 报文" 的具体格式类型.(目前唯一支持的 mVerifyCmdFmt 的取值为VCF_DEFAULT)
     * @param {Object} options.pinKey    用于对 PIN 加密的公钥数据, 仅仅在要提交 密文 PIN 的时候有效, 即 mFmtOfPin 是 FOPTBV_ENCRYPTED_BY_PUBLIC_KEY.
     * @param {Object} options.pinKey.exp    公钥指数. 长度不超过 PEUK_EXP_BYTE_LEN
     * @param {Object} options.pinKey.expiredDate     公钥失效期, YY YY MM DD，首字节暂无需设置. 长度必须是 PEUK_EXPIRED_DATA_LEN.
     * @param {Object} options.pinKey.hash     公钥校验和, 用于定期检查, 可不赋值. 长度必须是 PEUK_HASH_BYTE_LEN.
     * @param {Number} options.pinKey.hasHash     公钥校验和是否存在.1 表示存在，0不存在
     * @param {Number} options.pinKey.index     公钥索引.
     * @param {Object} options.pinKey.mod     公钥的模. 长度不超过 PEUK_MOD_BYTE_LEN.
     * @param {Object} options.pinKey.rid     RID
     * @param {Number} verifyMode (verifyMode)  模式，默认为0，便于后续功能扩展。
     * @return {Object} 认证结果
     * @return {Number} .apduRet IC 卡对 PIN 校验命令的 应答.
     * @return {Number} .sw1 PIN 校验命令的 SW1.
     * @return {Number} .sw2 PIN 校验命令的 SW2.
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     * @member nymph.dev.pinPad.PinPad
     */
    verifyOfflinePin: function (options, verifyMode) {
        var result, errorCode;
        var optionAttribute, actualOptions = {};
        if (verifyMode === null || typeof verifyMode === 'undefined') {
            // 默认模式
            verifyMode = 0;
        }

        if(!options){
            throw {code: nymphError.PARAM_ERR, message: 'options do not exist'};
        }

        if(!options.hasOwnProperty('fmtOfPin') || (options.fmtOfPin !== this.FOPTBV_ENCRYPTED_BY_PUBLIC_KEY) && (options.fmtOfPin !== this.FOPTBV_PLAIN_TEXT)){
            throw {code: nymphError.PARAM_ERR, message: 'options.fmtOfPin do not exist'};
        }

        if(options.verifyCmdFmt !== 0){
            throw {code: nymphError.PARAM_ERR, message: 'options.verifyCmdFmt error'};
        }

        if(!options.icCardToken || isNaN(options.icCardToken ) || (typeof (options.icCardToken )) !== 'number'){
            throw {code: nymphError.PARAM_ERR, message: 'options.icCardToken error'};
        }

        if(options.fmtOfPin === this.FOPTBV_ENCRYPTED_BY_PUBLIC_KEY){
            if(!options.random || (options.random.length !== 8)){
                throw {code: nymphError.PARAM_ERR, message: 'options.random error'};
            }

            if(!(options.pinKey) || (typeof (options.pinKey) !== 'object')){
                throw {code: nymphError.PARAM_ERR, message: 'options.pinKey error'};
            }

            if(!(options.pinKey.hasHash) || ((options.pinKey.hasHash !== 0) && (options.pinKey.hasHash !== 1))){
                throw {code: nymphError.PARAM_ERR, message: 'options.pinKey.hasHash error'};
            }

            if(options.pinKey.hasHash === 1){
                if(!(options.pinKey.hash) || options.pinKey.hash.length !== this.PEUK_HASH_BYTE_LEN){
                    throw {code: nymphError.PARAM_ERR, message: 'options.pinKey.hash error'};
                }
            }

            if(!(options.pinKey.mod) || options.pinKey.mod.length > this.PEUK_MOD_BYTE_LEN){
                throw {code: nymphError.PARAM_ERR, message: 'options.pinKey.mod error'};
            }

            if(!(options.pinKey.exp) || options.pinKey.exp.length > this.PEUK_EXP_BYTE_LEN){
                throw {code: nymphError.PARAM_ERR, message: 'options.pinKey.exp error'};
            }

            if(!(options.pinKey.expiredDate) || options.pinKey.expiredDate.length !== this.PEUK_EXPIRED_DATA_LEN){
                throw {code: nymphError.PARAM_ERR, message: 'options.pinKey.expiredDate error'};
            }
        }

        if (options && (typeof options === 'object')) {
            for (optionAttribute in options) {
                if (options.hasOwnProperty(optionAttribute)) {
                    if (optionAttribute === 'random') {
                        if (Buffer.isBuffer(options.random)) {
                            actualOptions[optionAttribute] = options.random.toString('base64');
                        } else {
                            throw {code: nymphError.PARAM_ERR, message: 'Initial vector data should be a Buffer.'};
                        }
                    } else if (optionAttribute === 'pinKey') {
                        var mPinKeyOptions = options[optionAttribute], mPinKeyActualOptions = {}, mPinKeyOptionKey;
                        for (mPinKeyOptionKey in mPinKeyOptions) {
                            if (mPinKeyOptions.hasOwnProperty(mPinKeyOptionKey)) {
                                if (mPinKeyOptionKey === 'rid' || mPinKeyOptionKey === 'mod' || mPinKeyOptionKey === 'exp' ||
                                    mPinKeyOptionKey === 'expiredDate' || mPinKeyOptionKey === 'hash') {
                                    if (Buffer.isBuffer(mPinKeyOptions[mPinKeyOptionKey])) {
                                        mPinKeyActualOptions[mPinKeyOptionKey] = mPinKeyOptions[mPinKeyOptionKey].toString('base64');
                                    } else {
                                        throw {
                                            code: nymphError.PARAM_ERR,
                                            message: 'Initial vector data should be a Buffer.'
                                        };
                                    }
                                }
                                else{
                                    mPinKeyActualOptions[mPinKeyOptionKey] = mPinKeyOptions[mPinKeyOptionKey];
                                }
                            }
                        }
                        actualOptions[optionAttribute] = mPinKeyActualOptions;

                    } else {
                        actualOptions[optionAttribute] = options[optionAttribute];
                    }
                }
            }
        }else{
            throw {code: nymphError.PARAM_ERR, message: 'options error'};
        }

        result = hermes.exec(this.PLUGINID, this.instanceId, 'verifyOfflinePin', [verifyMode, actualOptions]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to verifyOffLinePin PIN pad.', innerCode: result.innerCode};
        }
        return result.data;
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @returns {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        var self = this;
        switch (innerCode) {
            case -7000:
            case 0x20:
                return ErrorCode.PINPAD_BASE_ERR;
            case -7001:// 密钥不存在
            case 0x27: //EM_pinpad_NO_SUCH_KEY: 无指定密钥
                return ErrorCode.PINPAD_NO_SUCH_KEY;
            case -7002:
                return ErrorCode.PINPAD_KEY_INDEX_ERR; // 密钥索引错，参数索引不在范围内
            case -7003:
                return ErrorCode.PINPAD_DERIVE_ERR; // 密钥写入时，源密钥的层次比目的密钥低
            case -7004:
                return ErrorCode.PINPAD_CHECK_KEY_FAILED; // 密钥验证失败
            case -7005://  没输入 PIN
            case 0x2B: // EM_pinpad_NO_PIN_ENTERED，输入PIN 时，PINPAD 直接按确认退出，表示无PIN
                return ErrorCode.PINPAD_NO_PIN_ENTERED;
            case -7006: // 取消输入PIN
            case 0x1B: // EM_ABOLISH，取消
                return ErrorCode.PINPAD_INPUT_CANCELLED;
            case -7007:
                return ErrorCode.PINPAD_WAIT_INTERVAL; // 函数调用小于最小间隔时间
            case -7008:
                return ErrorCode.PINPAD_CHECK_MODE_ERR; // KCV模式错，不支持
            case -7009: // 无权使用该密钥，当出现密钥标签不对，或者写入密钥时，源密钥类型的值大于目的密钥类型，都会返回该密钥
                return ErrorCode.PINPAD_NO_RIGHT_USE;
            case -7010:
                return ErrorCode.PINPAD_KEY_TYPE_ERR; // 密钥类型错误
            case -7011:
                return ErrorCode.PINPAD_EXPECTED_LEN_ERR; // 期望 PIN 的长度字符串错
            case -7012:
                return ErrorCode.PINPAD_DST_KEY_INDEX_ERR; // 目的密钥索引错，不在范围内
            case -7013:
                return ErrorCode.PINPAD_SRC_KEY_INDEX_ERR; // 源密钥索引错，不在范围内
            case -7014:
                return ErrorCode.PINPAD_KEY_LEN_ERR; // 密钥长度错
            case -7015: // 输入 PIN 超时
            case 0x23: // EM_pinpad_TIME_OUT，超时
                return ErrorCode.PINPAD_INPUT_TIMEOUT;
            case -7016:
                return ErrorCode.PINPAD_NO_ICC; // IC 卡不存在
            case -7017:
                return ErrorCode.PINPAD_ICC_NOT_INITIALIZED; // IC 卡未初始化
            case -7019: // 指针参数非法为空
                return ErrorCode.PINPAD_PARAM_PTR_NULL;
            case -7018:
                return ErrorCode.PINPAD_GROUP_INDEX_ERR; // DUKPT 组索引号错
            case -7020:
                return ErrorCode.PINPAD_LOCKED; // PED 已锁
            case -7021: // PED 通用错误
                return ErrorCode.PINPAD_RET_ERR;
            case -7022:// 没有空闲的缓冲
            case 0x22: // EM_pinpad_NO_ENOUGH_SPACE，空间不足
                return ErrorCode.PINPAD_NOMORE_BUF;
            case -7023:// 需要取得高级权限
            case 0x3E: // EM_pinpad_PERMISSION_DENY，应用程序 没有 API 要求的 permission
                return ErrorCode.PINPAD_NEED_PERMISSION;
            case -7024: // DUKPT 已经溢出
            case 0x2C: // EM_pinpad_DUKPT_COUNTER_OVERFLOW，DUKPT 计数器溢出
                return ErrorCode.PINPAD_DUKPT_OVERFLOW;
            case -7025:
                return ErrorCode.PINPAD_KCV_CHECK_FAILED; // KCV 校验失败
            case -7026:
                return ErrorCode.PINPAD_SRC_KEY_TYPE_ERR; // 源密钥类型错
            case -7027: // 命令不支持
            case 0x25: // EM_pinpad_UNSUPPORTED_FUNC，U3 当前 PINPAD 版本不支持的功能。
                return ErrorCode.PINPAD_UNSUPPORTED_CMD;
            case -7028: // 通讯错误
            case 0x24: // EM_pinpad_COMM_ERR，对外置 pinpad 通讯错误
                return ErrorCode.PINPAD_COMM_ERR;
            case -7029:
                return ErrorCode.PINPAD_NO_UAPUK; // 没有用户认证公钥
            case -7030: // 取系统敏感服务失败
            case 0x29: // EM_pinpad_FAIL_TO_AUTH，U3 敏感服务认证错误
                return ErrorCode.PINPAD_ADMIN_ERR;
            case -7031:
                return ErrorCode.PINPAD_DOWNLOAD_DISACTIVE; // PED 处于下载非激活状态
            case -7032:
                return ErrorCode.PINPAD_KCV_ODD_CHECK_FAILED; // KCV 奇校验失败
            case -7033:
                return ErrorCode.PINPAD_PED_DATA_RW_FAILED; // 读取 PED 数据失败
            case -7034:
                return ErrorCode.PINPAD_ICC_CMD_ERR; // 卡操作错误(脱机明文、密文密码验证)
            case -7035:
                return ErrorCode.PINPAD_INPUT_CLEAR; // 用户按CLEAR键退出输入 PIN
            case -7036:
                return ErrorCode.PINPAD_NO_FREE_FLASH; // PED 存储空间不足
            case -7037: // DUKPT KSN 需要先加 1
            case 0x50: // EM_pinpad_DUKPT_KSN_NEED_INC，DUKPT 交易前 "没有" 自加 KSN
                return ErrorCode.PINPAD_DUKPT_KSN_NEED_INC;
            case -7038:
                return ErrorCode.PINPAD_KCV_MODE_ERR; // KCV MODE 错误
            case -7039:
                return ErrorCode.PINPAD_DUKPT_NO_KCV; // NO KCV
            case -7040: // 按FN/ATM4键取消PIN输入
                return ErrorCode.PINPAD_PIN_BY_PASS_OR_FUN_KEY;
            case -7041:
                return ErrorCode.PINPAD_MAC_ERR; // 数据 MAC 校验错
            case -7042:
                return ErrorCode.PINPAD_CRC_ERR; // 数据 CRC 校验错
            case -7043:
                return ErrorCode.PINPAD_TYPE_ERR; // 密码键盘类型错
            case -7999:
            case 0x02: // EM_pinpad_PINPAD_NOT_INIT，PINPAD模块未初始化
            case 0x21: // EM_pinpad_INVALID_ARGUMENT，无效实参
            case 0x26: // EM_pinpad_BUSY，PINPAD 底层忙(通常是 PIN 输入流程中), 无法服务当前 API 调用
            case 0x2E: // EM_pinpad_BAD_STATUS，pinpad 模块当前状态错误或者当前状态不支持该调用
            case 0x2F: // EM_pinpad_BAD_KEY_USAGE，试图在 key 的 "usage" 之外, 使用该 key
            case 0x30: // EM_pinpad_BAD_MODE_OF_KEY_USE，对 key 的使用方式错误. 比如用被限定只能用来加密的 key 来解密数据
            case 0x32: // EM_pinpad_NO_SUCH_KAP，pinpad 中没有指定的 KAP 实例
            case 0x33: // EM_pinpad_KAP_ALREADY_EXIST，指定的 (通常是待创建的) KAP 已经存在
            case 0x34: // EM_pinpad_ARGUMENT_CONFLICT，实参冲突, 可能是两个实参冲突, 也可能是一个实参中的两个成员冲突
            case 0x36: // EM_pinpad_REFER_TO_KEY_OUTSIDE_KAP，引用了目标 KAP 之外的 key, 或者在一个操作中同时引用了不同 KAP 中的 key
            case 0x3F: // EM_pinpad_ACCESSING_KAP_DENY，应用程序 没有 访问指定 KAP 的权限
            case 0x40: // EM_pinpad_ERR_WRONG_KAP_MODE，尝试在不兼容的 KAP mode 中调用 API.
            case 0x48: // EM_pinpad_PIN_ENTRY_TOO_FREQUENTLY，PIN 输入调用太频繁
            case 0x49: // EM_pinpad_DUKPT_NOT_INITED，当前 KAP 的 dukpt 机构尚未初始化
            case 0x4B: // EM_pinpad_ENC_KEY_FMT_TOO_SIMPLE，当前待载入的密文 key 的格式太简单, 低于当前 KAP 的配置
            case 0x4C: // EM_pinpad_SAME_KEY_VALUE_DETECTED，当前待载入(or 生成)的 key 和设备中已有的其他密钥取值相同，禁止下载
            case 0x4D: // EM_pinpad_KEYBUNDLE_ERR，当前待载入的密文 key 的打包内容错误
            case 0x4E: // EM_pinpad_ENCRYPT_MAG_TRACK_TOO_FREQUENTLY，调用磁道加密操作太频繁, 用于防穷举
            case 0x5C: // EM_pinpad_SERVER_DIED，AND 平台上, 后台的 pinpad_server died。但它通常会重启, 遇到本 err, 应用程序应关闭句柄, 复位应用流程
            case 0x5F: // EM_pinpad_AUTHENDATA_NOT_INITIALIZED，初始口令未设置
                return ErrorCode.PINPAD_OTHER_ERR;
            default:
                return nymphError.getError(innerCode);
        }
    },
};

/**
 * @method config
 * 设置密码键盘全局配置。
 * @param {Object} cfg
 * @param {nymph.dev.pinPad.PinPadType} cfg.pinPadType
 * @member nymph.dev.pinPad.PinPad
 */
PinPad.config = function (cfg) {
    // 设置密码键盘的类型，当创建密码键盘的时候根据此配置创建实例。
    var type, result, errorCode;
    // todo 测 localStorage
    localStorage.setItem('pinpad.devName', cfg.pinPadType);

    // todo 其他设置
};

/**
 * # PIN Pad 错误码
 * @class nymph.dev.pinPad.PinPad.ErrorCode
 */
var ErrorCode = {
    /**
     * @property {String} [PINPAD_BASE_ERR='PINPAD_BASE_ERR'] 密码键盘基础错误。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_BASE_ERR: 'PINPAD_BASE_ERR',

    /**
     * @property {String} [PINPAD_NO_SUCH_KEY='PINPAD_NO_SUCH_KEY'] 密钥不存在。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NO_SUCH_KEY: 'PINPAD_NO_SUCH_KEY',

    /**
     * @property {String} [PINPAD_KEY_INDEX_ERR='PINPAD_KEY_INDEX_ERR'] 密钥索引错，参数索引不在范围内。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_KEY_INDEX_ERR: 'PINPAD_KEY_INDEX_ERR',

    /**
     * @property {String} [PINPAD_DERIVE_ERR='PINPAD_DERIVE_ERR'] 密钥写入时，源密钥的层次比目的密钥低。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_DERIVE_ERR: 'PINPAD_DERIVE_ERR',

    /**
     *  @property {String} [PINPAD_CHECK_KEY_FAILED='PINPAD_CHECK_KEY_FAILED'] 密钥验证失败。
     *  @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_CHECK_KEY_FAILED: 'PINPAD_CHECK_KEY_FAILED',

    /**
     * @property {String} [PINPAD_NO_PIN_ENTERED='PINPAD_NO_PIN_ENTERED'] 没输入 PIN。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NO_PIN_ENTERED: 'PINPAD_NO_PIN_ENTERED',

    /**
     * @property {String} [PINPAD_INPUT_CANCELLED='PINPAD_INPUT_CANCELLED'] 取消输入 PIN。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_INPUT_CANCELLED: 'PINPAD_INPUT_CANCELLED',

    /**
     * @property {String} [PINPAD_WAIT_INTERVAL='PINPAD_WAIT_INTERVAL'] 函数调用小于最小间隔时间。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_WAIT_INTERVAL: 'PINPAD_WAIT_INTERVAL',

    /**
     * @property {String} [PINPAD_CHECK_MODE_ERR='PINPAD_CHECK_MODE_ERR'] KCV模式错，不支持。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_CHECK_MODE_ERR: 'PINPAD_CHECK_MODE_ERR',

    /**
     * @property {String} [PINPAD_NO_RIGHT_USE='PINPAD_NO_RIGHT_USE'] 无权使用该密钥，当出现密钥标签不对，或者写入密钥时，源密钥类型的值大于目的密钥类型，都会返回该密钥。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NO_RIGHT_USE: 'PINPAD_NO_RIGHT_USE',

    /**
     * @property {String} [PINPAD_KEY_TYPE_ERR='PINPAD_KEY_TYPE_ERR'] 密钥类型错误。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_KEY_TYPE_ERR: 'PINPAD_KEY_TYPE_ERR',

    /**
     * @property {String} [PINPAD_EXPECTED_LEN_ERR='PINPAD_EXPECTED_LEN_ERR'] 期望 PIN 的长度字符串错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_EXPECTED_LEN_ERR: 'PINPAD_EXPECTED_LEN_ERR',

    /**
     * @property {String} [PINPAD_DST_KEY_INDEX_ERR='PINPAD_DST_KEY_INDEX_ERR'] 目的密钥索引错，不在范围内。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_DST_KEY_INDEX_ERR: 'PINPAD_DST_KEY_INDEX_ERR',

    /**
     * @property {String} [PINPAD_SRC_KEY_INDEX_ERR='PINPAD_SRC_KEY_INDEX_ERR'] 源密钥索引错，不在范围内。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_SRC_KEY_INDEX_ERR: 'PINPAD_SRC_KEY_INDEX_ERR',

    /**
     * @property {String} [PINPAD_KEY_LEN_ERR='PINPAD_KEY_LEN_ERR'] 密钥长度错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_KEY_LEN_ERR: 'PINPAD_KEY_LEN_ERR',

    /**
     * @property {String} [PINPAD_INPUT_TIMEOUT='PINPAD_INPUT_TIMEOUT'] 输入PIN超时。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_INPUT_TIMEOUT: 'PINPAD_INPUT_TIMEOUT',

    /**
     * @property {String} [PINPAD_NO_ICC='PINPAD_NO_ICC'] IC 卡不存在。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NO_ICC: 'PINPAD_NO_ICC',

    /**
     * @property {String} [PINPAD_ICC_NOT_INITIALIZED='PINPAD_ICC_NOT_INITIALIZED'] IC 卡未初始化。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_ICC_NOT_INITIALIZED: 'PINPAD_ICC_NOT_INITIALIZED',

    /**
     * @property {String} [PINPAD_GROUP_INDEX_ERR='PINPAD_GROUP_INDEX_ERR'] DUKPT 组索引号错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_GROUP_INDEX_ERR: 'PINPAD_GROUP_INDEX_ERR',

    /**
     * @property {String} [PINPAD_PARAM_PTR_NULL='PINPAD_PARAM_PTR_NULL'] 指针参数非法为空。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_PARAM_PTR_NULL: 'PINPAD_PARAM_PTR_NULL',

    /**
     * @property {String} [PINPAD_LOCKED='PINPAD_LOCKED'] PED 已锁。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_LOCKED: 'PINPAD_LOCKED',

    /**
     * @property {String} [PINPAD_RET_ERR='PINPAD_RET_ERR'] PED通用错误。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_RET_ERR: 'PINPAD_RET_ERR',

    /**
     * @property {String} [PINPAD_NOMORE_BUF='PINPAD_NOMORE_BUF'] 没有空闲的缓冲。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NOMORE_BUF: 'PINPAD_NOMORE_BUF',

    /**
     * @property {String} [PINPAD_NEED_PERMISSION='PINPAD_NEED_PERMISSION'] 需要取得高级权限。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NEED_PERMISSION: 'PINPAD_NEED_PERMISSION',

    /**
     * @property {String} [PINPAD_DUKPT_OVERFLOW='PINPAD_DUKPT_OVERFLOW'] DUKPT 已经溢出。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_DUKPT_OVERFLOW: 'PINPAD_DUKPT_OVERFLOW',

    /**
     * @property {String} [PINPAD_KCV_CHECK_FAILED='PINPAD_KCV_CHECK_FAILED'] KCV 校验失败。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_KCV_CHECK_FAILED: 'PINPAD_KCV_CHECK_FAILED',

    /**
     * @property {String} [PINPAD_SRC_KEY_TYPE_ERR='PINPAD_SRC_KEY_TYPE_ERR'] 源密钥类型错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_SRC_KEY_TYPE_ERR: 'PINPAD_SRC_KEY_TYPE_ERR',

    /**
     * @property {String} [PINPAD_UNSUPPORTED_CMD='PINPAD_UNSUPPORTED_CMD'] 命令不支持。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_UNSUPPORTED_CMD: 'PINPAD_UNSUPPORTED_CMD',

    /**
     * @property {String} [PINPAD_COMM_ERR='PINPAD_COMM_ERR'] 通讯错误/对外置 pinpad 通讯错误。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_COMM_ERR: 'PINPAD_COMM_ERR',

    /**
     * @property {String} [PINPAD_NO_UAPUK='PINPAD_NO_UAPUK'] 没有用户认证公钥。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NO_UAPUK: 'PINPAD_NO_UAPUK',

    /**
     * @property {String} [PINPAD_ADMIN_ERR='PINPAD_ADMIN_ERR'] 取系统敏感服务失败。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_ADMIN_ERR: 'PINPAD_ADMIN_ERR',

    /**
     * @property {String} [PINPAD_DOWNLOAD_DISACTIVE='PINPAD_DOWNLOAD_DISACTIVE'] PED 处于下载非激活状态。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_DOWNLOAD_DISACTIVE: 'PINPAD_DOWNLOAD_DISACTIVE',

    /**
     * @property {String} [PINPAD_KCV_ODD_CHECK_FAILED='PINPAD_KCV_ODD_CHECK_FAILED'] KCV 奇校验失败。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_KCV_ODD_CHECK_FAILED: 'PINPAD_KCV_ODD_CHECK_FAILED',

    /**
     * @property {String} [PINPAD_PED_DATA_RW_FAILED='PINPAD_PED_DATA_RW_FAILED'] 读取 PED 数据失败。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_PED_DATA_RW_FAILED: 'PINPAD_PED_DATA_RW_FAILED',

    /**
     * @property {String} [PINPAD_ICC_CMD_ERR='PINPAD_ICC_CMD_ERR'] 卡操作错误(脱机明文、密文密码验证)。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_ICC_CMD_ERR: 'PINPAD_ICC_CMD_ERR',

    /**
     * @property {String} [PINPAD_INPUT_CLEAR='PINPAD_INPUT_CLEAR'] 用户按CLEAR键退出输入 PIN。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_INPUT_CLEAR: 'PINPAD_INPUT_CLEAR',

    /**
     * @property {String} [PINPAD_NO_FREE_FLASH='PINPAD_NO_FREE_FLASH'] PED 存储空间不足。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_NO_FREE_FLASH: 'PINPAD_NO_FREE_FLASH',

    /**
     * @property {String} [PINPAD_DUKPT_KSN_NEED_INC='PINPAD_DUKPT_KSN_NEED_INC'] DUKPT KSN 需要先加 1。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_DUKPT_KSN_NEED_INC: 'PINPAD_DUKPT_KSN_NEED_INC',

    /**
     * @property {String} [PINPAD_KCV_MODE_ERR='PINPAD_KCV_MODE_ERR'] KCV MODE 错误。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_KCV_MODE_ERR: 'PINPAD_KCV_MODE_ERR',

    /**
     * @property {String} [PINPAD_DUKPT_NO_KCV='PINPAD_DUKPT_NO_KCV'] NO KCV。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_DUKPT_NO_KCV: 'PINPAD_DUKPT_NO_KCV',

    /**
     * @property {String} [PINPAD_PIN_BY_PASS_OR_FUN_KEY='PINPAD_PIN_BY_PASS_OR_FUN_KEY'] 按FN/ATM4键取消PIN输入。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_PIN_BY_PASS_OR_FUN_KEY: 'PINPAD_PIN_BY_PASS_OR_FUN_KEY',

    /**
     * @property {String} [PINPAD_MAC_ERR='PINPAD_MAC_ERR'] 数据 MAC 校验错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_MAC_ERR: 'PINPAD_MAC_ERR',

    /**
     * @property {String} [PINPAD_CRC_ERR='PINPAD_CRC_ERR'] 数据 CRC 校验错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_CRC_ERR: 'PINPAD_CRC_ERR',

    /**
     * @property {String} [PINPAD_TYPE_ERR='PINPAD_TYPE_ERR'] 密码键盘类型错。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_TYPE_ERR: 'PINPAD_TYPE_ERR',

    /**
     * @property {String} [PINPAD_OTHER_ERR='PINPAD_OTHER_ERR'] 密码键盘其他异常错误。
     * @member nymph.dev.pinPad.PinPad.ErrorCode
     */
    PINPAD_OTHER_ERR: 'PINPAD_OTHER_ERR',
};

/**
 * # 密码键盘类型
 * @class nymph.dev.pinPad.PinPadType
 */
var PinPadType = {
    /**
     * @property {String} [IPP='IPP'] 内置密码键盘。
     * @member nymph.dev.pinPad.PinPadType
     */
    IPP: 'IPP',
    /**
     * @property {String} [EPP='COM_EPP'] 外置密码键盘。
     * @member nymph.dev.pinPad.PinPadType
     */
    EPP: 'COM_EPP'
};


/**
 * # 密码键盘密钥类型
 * @class nymph.dev.pinPad.KeyType
 */
var KeyType = {
    /**
     * @property {String} [MASTER='master'] 明文主密钥。
     * @member nymph.dev.pinPad.KeyType
     */

    MASTER: 'master',
    /**
     * @property {String} [PIN='pin'] PIN Key。
     * @member nymph.dev.pinPad.KeyType
     */
    PIN: 'pin',
    /**
     * @property {String} [MAC='mac'] MAC Key。
     * @member nymph.dev.pinPad.KeyType
     */
    MAC: 'mac',

    /**
     * @property {String} [TRACK='track'] Track Key。
     * @member nymph.dev.pinPad.KeyType
     */
    TRACK: 'track',

    /**
     * @property {String} [DES='des'] DES Key。
     * @member nymph.dev.pinPad.KeyType
     */
    DES: 'des'
};



/**
 * # 密码键盘 MAC 算法
 * @class nymph.dev.pinPad.MacAlgorithm
 */
var MacAlgorithm = {
    /**
     * @property {Number} [ISO9797=0x00]
     * @member nymph.dev.pinPad.MacAlgorithm
     */
    ISO9797: 0x00,
    /**
     * @property {Number} [AES=0x01]
     * @member nymph.dev.pinPad.MacAlgorithm
     */
    AES: 0x01
};

/**
 * # 密码键盘 MAC 工作模式
 * @class nymph.dev.pinPad.MacMode
 */
var MacMode = {
    /**
     * @property {Number} [ECB=0x00]
     * @member nymph.dev.pinPad.MacMode
     */
    ECB: 0x00,
    /**
     * @property {Number} [CCB=0x01]
     * @member nymph.dev.pinPad.MacMode
     */
    CBC: 0x01,
    /**
     * @property {Number} [X99=0x02]
     * @member nymph.dev.pinPad.MacMode
     */
    X99: 0x02
};

/**
 * # des算法模式
 * @class nymph.dev.pinPad.DesMode
 */
var DesMode = {
    /**
     * @property {Number} [TECB=0x00]
     * @member nymph.dev.pinPad.DesMode
     */
    TECB: 0x00,
    /**
     * @property {Number} [TCBC=0x01]
     * @member nymph.dev.pinPad.DesMode
     */
    TCBC: 0x01
};

/**
 * @property {nymph.dev.pinPad.PinPad.ErrorCode} ErrorCode 错误码。
 * @member nymph.dev.pinPad.PinPad
 */
PinPad.ErrorCode = ErrorCode;

/**
 * @property {nymph.dev.pinPad.PinMode} PinMode PIN 算法类型。
 * @member nymph.dev.pinPad
 */
pinPad.PinMode = PinMode;


/**
 * @property {nymph.dev.pinPad.PinPad} PinPad 密码键盘类。
 * @member nymph.dev.pinPad
 */
pinPad.PinPad = PinPad;

/**
 * @property {nymph.dev.pinPad.PinPadType} PinPadType 密码键盘类型。
 * @member nymph.dev.pinPad
 */
pinPad.PinPadType = PinPadType;

/**
 * @property {nymph.dev.pinPad.KeyFormat} KeyFormat 密码键盘密钥格式。
 * @member nymph.dev.pinPad
 */
pinPad.KeyFormat = KeyFormat;

/**
 * @property {nymph.dev.pinPad.KeyType} KeyType 密码键盘密钥类型。
 * @member nymph.dev.pinPad
 */
pinPad.KeyType = KeyType;

/**
 * @property {nymph.dev.pinPad.Algorithm} Algorithm 密码键盘加解密算法。
 * @member nymph.dev.pinPad
 */
pinPad.KeyAlgorithm = KeyAlgorithm;

/**
 * @property {nymph.dev.pinPad.MacAlgorithm} MacAlgorithm 密码键盘 MAC 算法。
 * @member nymph.dev.pinPad
 */
pinPad.MacAlgorithm = MacAlgorithm;

/**
 * @property {nymph.dev.pinPad.MacMode} MacMode 密码键盘 MAC 工作模式。
 * @member nymph.dev.pinPad
 */
pinPad.MacMode = MacMode;

/**
 * @property {nymph.dev.pinPad.DesMode} DesMode pinpad des mode。
 * @member nymph.dev.pinPad
 */
pinPad.DesMode = DesMode;

/**
 * @property {nymph.dev.pinPad.Key} Key 密钥。
 * @member nymph.dev.pinPad
 */
pinPad.Key = Key;

/**
 * @property {nymph.dev.pinPad.KeySystem} KeySystem 密钥体系。
 * @member nymph.dev.pinPad
 */
pinPad.KeySystem = KeySystem;

hermes.addEventSupport(PinPad.prototype);
module.exports = pinPad;

},{"./kap":43,"buffer":"buffer","error":"error","hermes":"hermes","nymph-encoding":"nymph-encoding","tools":"tools"}],"poster-detector":[function(require,module,exports){
'use strict';

/**
 * # 探测模拟前置模块
 * @class nymph.comm.posterDetector
 * 本模块用于搜索局域网内的模拟前置。
 */
// 引用外部模块。
var nymphError = require('error');
var hermes = require('hermes');

var posterDetector = {
    instanceId : hermes.NULL,
    PLUGINID : 'ddhsncui586987hfbd75j4ld9f8gjtm6',

    /**
     * @method detect
     * 搜索模拟前置
     *
     * @param {Function} callback 处理次方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Array} callback.result 执行此方法返回的搜索结果。
     */
    detect : function(callback){
        var self = this;
        hermes.exec(this.PLUGINID, this.instanceId, 'detect', [], function(err, result){
            if(err){
                err.code = self.getError(err.code);
                callback.call(self,err);
            }else{
                callback.call(self,null,result);
            }
        });
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @returns {String} 返回码对应的字符串
     */
    getError : function(innerCode){
        switch(innerCode){
            default :
                return nymphError.getError(innerCode);                                                                                                                                                                      nymphError.getError(innerCode);
        }
    }
};

module.exports = posterDetector;
},{"error":"error","hermes":"hermes"}],"printer":[function(require,module,exports){
'use strict';

/**
 * # 打印机模块（模块名：printer）
 *
 * @class nymph.dev.printer
 * @singleton
 * 本模块为打印机入口模块，通过 `requrie('printer')` 的方式获取，包含以下两部分内容：
 *
 * - 打印机类：提供了和打印机相关的一些方法。
 * - 所有与打印机相关的类和对象。
 *
 * 如下：
 *
 *     // 获取打印机入口模块。
 *     var printer = require('printer');
 *
 *     // 获取打印机类。
 *     var Printer = printer.Printer;
 *
 *     // 创建一个打印机实例。
 *     var p = new Printer('PRINTER');
 *
 */

/**
 * # 打印机类
 *
 * @class nymph.dev.printer.Printer
 *
 * @constructor
 * 打印机构造函数，具体操作流程及代码示例请参见[“打印机开发指南”](#!/guide/printer)。
 * @param {String} devId (Optional) 设备标识（可选），唯一标识和打开一个打印机设备。可以包含打印机类型及端口名，用于区分不同的打印机实例。
 */
var printer = {},
    hermes = require('hermes'),
    nymphError = require('error');
var Printer = function (devId) {
    /**
     * 设备句柄。
     * @private
     * @type {String}
     */
    this.instanceId = hermes.NULL;

    /**
     * @property {String} devId 打印机设备标识。
     * @member nymph.dev.printer.Printer
     */
    this.devId = devId;
};
Printer.prototype = {
    PLUGINID: '787fa8e7acfd4a3c9cb8cbcbfd6ffe1d',

    constructor: Printer,

    isPrinting: false,

    /**
     * @method open
     * 打开打印机。
     *
     *     // 获取打印机模块
     *     var printer = require('printer');
     *
     *     // 获取打印机模块的构造函数
     *     var Printer = printer.Printer;
     *
     *     // 创建一个打印机实例，目前打印机名称只有 'PRINTER'
     *     var p = new Printer('PRINTER');
     *     try {
     *       p.open();
     *     } catch (err) {
     *       // 打开打印机失败的处理。
     *       console.error(err.code + ' ' + err.message);
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    open: function () {
        // 打开打印机。
        var result, errorCode, error;
        switch (this.devId){
            case 'PRINTER':
                break;
            default:
                error = new Error();
                error.code = nymphError.PARAM_ERR;
                error.message = 'Not support dev id : '+this.devId;
                throw error;
        }

        // 如果重复打开，则抛出异常。
        if (this.instanceId !== hermes.NULL) {
            error = new Error();
            error.code = nymphError.DEVICE_USED;
            error.message = 'Device already opened.';
            throw error;
        }
        result = hermes.exec(this.PLUGINID, hermes.NULL, 'open', [this.devId]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to open printer.', innerCode: result.innerCode};
        }

        this.instanceId = result.data;

        // 注册插件。
        hermes.addJsPluginInstance(this.instanceId, this);
    },

    /**
     * @method close
     * 关闭打印机。
     *
     *     try {
     *       p.close();
     *     } catch (err) {
     *       // 关闭打印机失败的处理。
     *       console.error(err.code + ' ' + err.message);
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    close: function () {
        var result, errorCode;
        this.isPrinting = false;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'close', [this.instanceId]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to close printer.', innerCode: result.innerCode};
        }

        // 反注册
        if (this.instanceId !== hermes.NULL) {
            hermes.removeJsPluginInstance(this.instanceId);
        }

        this.instanceId = hermes.NULL;
    },

    /**
     * @method getInfo
     * 获取打印机相关信息。
     *
     *     try {
     *         var info = p.getInfo();
     *     } catch (err) {
     *         // 获取打印机信息失败的处理。
     *         console.error(err.code + ' ' + err.message);
     *     }
     *
     * @return {Object} 打印机相关信息。
     * @return {String} return.status 打印机状态。
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    getInfo: function () {
        // 一些获取打印机相关信息的操作。
        var result, errorCode, statusString, info;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'getPrinterInfo', []);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to get printer information.', innerCode: result.innerCode};
        }

        info = result.data;
        statusString = this.getError(info.status);
        if (statusString === nymphError.SUCCESS) {
            info.status = 'NORMAL';
        } else {
            info.status = statusString;
        }
        return info;
    },

    /**
     * @ignore
     * @method reset
     * 重置打印机(该功能暂不支持)
     *
     *     try {
     *         p.reset();
     *     } catch (err) {
     *         // 获取打印机信息失败的处理。
     *         console.error(err.code + ' ' + err.message);
     *     }
     *
     */
    reset: function () {
        var result, errorCode;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'reset');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to reset printer.', innerCode: result.innerCode};
        }
    },

    /**
     * @method printHtml
     * 打印 html 网页。默认打印宽度是 382 像素，打印高度没限制，sdk 内部使用分段打印方式。
     *
     *     var printInfo = {
     *          htmlString: '<div>This is html string.</div>'
     *     };
     *     p.printHtml(printInfo, function (err) {
     *       if (err) {
     *         // 打印出错处理
     *       } else {
     *         // 打印成功处理
     *       }
     *     });
     *
     * @param {Object} printInfo 打印信息
     * @param {String} printInfo.htmlString 打印数据字符串。
     * @param {Boolean} printInfo.feedAfterPrint 是否在打印完成后自动进纸以便用户撕下小票，true-打印完后自动进纸，false-打印完不自动进纸。默认为 true。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     */
    printHtml: function (printInfo, callback) {
        var self = this;
        if(typeof callback !== 'function') {
            if (typeof printInfo === 'function') {
                callback = printInfo;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be printInfo, and the second parameter should be callback!'});
                return;
            }
            throw {code: nymphError.PARAM_ERR, message: 'The second parameter should be a callback function!'};
        }

        if(printInfo){
            if (typeof printInfo === 'function') {
                callback = printInfo;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be printInfo, and the second parameter should be callback!'});
                return;
            }

            if (!printInfo.hasOwnProperty('htmlString')) {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'printInfo should have a html string!'});
                return;
            }

            if(printInfo.htmlString === null) {
                callback.call(self, {code:nymphError.PARAM_ERR, message: 'html string is null!'})
            }

            if (!printInfo.hasOwnProperty('feedAfterPrint')) {
                printInfo.feedAfterPrint = true;
            }
        } else {
            callback.call(self, {code: nymphError.PARAM_ERR, message: 'printInfo should not be null or undefined!'});
            return;
        }

        if(self.isPrinting){
            callback.call(self, {code: nymphError.DEVICE_USED, message: 'The Printer is being use'});
            return;
        }
        self.isPrinting = true;

        hermes.exec(this.PLUGINID, this.instanceId, 'printHtml', [printInfo], function (err) {
            if (err) {
                console.nativeLog('err.innerCode' + err.innerCode);
                err.code = self.getError(err.innerCode);
                console.nativeLog('err.innerCode' + err.innerCode);
                callback.call(self, err);
            } else {
                callback.call(self, null);
            }

            self.isPrinting = false;
        });
    },


    /**
     * @method feedPaper
     * 按指定单位的数量进纸/退纸。默认以“行”为单位进纸/退纸。
     *
     * - 进纸 1 行。
     * 
     *     printer.feedPaper({value: 1}, function (err) {
     *         if (err) {
     *             // 进纸失败的处理
     *         } else {
     *             // 进纸成功的处理
     *         }
     *     });
     *
     * - 进纸 10 个像素。
     * 
     *     printer.feedPaper({value: 10, unit: 'pixel'}, function (err) {
     *         if (err) {
     *             // 进纸失败的处理
     *         } else {
     *             // 进纸成功的处理
     *         }
     *     });
     *
     * - 退纸 1 行（不是所有设备都能支持退纸）。
     * 
     *     printer.feedPaper({value: -1}, function (err) {
     *         if (err) {
     *             // 进纸失败的处理
     *         } else {
     *             // 进纸成功的处理
     *         }
     *     });
     *
     * - 退纸 10 个像素（不是所有设备都能支持退纸）。
     * 
     *     printer.feedPaper({value: -10, unit: 'pixel'}, function (err) {
     *         if (err) {
     *             // 进纸失败的处理
     *         } else {
     *             // 进纸成功的处理
     *         }
     *     });
     *
     * @param {Object} options 进纸/退纸参数。
     * @param {Boolean} options.isIgnorePaperOut (Optional) 进纸时是否忽略缺纸（此参数部分平台不支持，目前安卓平台不支持）。
     *
     * - `true`：在进纸过程中不对纸量进行判断，即使当前是无纸状态，马达仍会转动。
     * - `false`：在进纸过程中会对纸量进行判断。默认值。
     *
     * @param {String} options.unit (Optional) 进纸/退纸的数量单位（可选）。
     *
     * 值|描述
     * -|-
     * 'line'|按行进纸/退纸（默认单位）
     * 'pixel'|按像素进纸/退纸
     * 'step'|按步进纸/退纸（暂不支持）
     * 'page'|按页进纸/退纸（暂不支持）
     * 'mm'|按毫米进纸/退纸（暂不支持）
     *
     * @param {Number} options.value 进纸/退纸的数量。值为正数，表示进纸；值为负数，表示退纸。
     *
     * - 当 unit 为 line 时，value 的范围 [-50, 50]。
     * - 当 unit 为 pixel 时，value 的范围 [-1200, 1200]。
     *
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     */
    feedPaper: function (options, callback) {
        var self = this,
            actualOptions = {isIgnorePaperOut: false, unit: 'line'};

        if(typeof callback !== 'function') {
            if (typeof options === 'function') {
                callback = options;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be options, and the second parameter should be callback!'});
                return;
            }
            throw {code: nymphError.PARAM_ERR, message: 'The second parameter should be a callback function!'};
        }

        if(options){
            if (typeof options === 'function') {
                callback = options;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be options, and the second parameter should be callback!'});
                return;
            }

            if (options.hasOwnProperty('isIgnorePaperOut')) {
                actualOptions.isIgnorePaperOut = options.isIgnorePaperOut;
            }
            if (options.hasOwnProperty('unit')) {
                if (options.unit !== 'line' && options.unit !== 'pixel') {
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Not support this unit:' + options.unit});
                    return;
                }
                actualOptions.unit = options.unit;
            }

            if (options.hasOwnProperty('value')) {
                if (typeof options.value !== 'number') {
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'The value to feed must be a number!'});
                    return;
                }
                actualOptions.value = options.value;
            } else {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please pass in the value to feed!'});
                return;
            }
        } else {
            if (typeof callback === 'function') {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'options should not be null or undefined!'});
                return;
            } else {
                throw {code: nymphError.PARAM_ERR, message: 'options is required as the first parameter, and the second parameter should be a callback function!'};
            }
        }
        if(self.isPrinting){
            callback.call(self, {code: nymphError.DEVICE_USED, message: 'The Printer is being use'});
            return;
        }
        self.isPrinting = true;
        hermes.exec(self.PLUGINID, self.instanceId, 'feedPaper', [actualOptions], function (err) {
            if (err) {
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {
                callback.call(self, null);
            }
            self.isPrinting = false;
        });
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @return {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        switch (innerCode) {
            case -1000: // 打印机基础错误码
                return ErrorCode.PRINTER_BASE_ERR;
            case -1001:
                return ErrorCode.PRINTER_PRINT_FAILED; // 打印失败
            case -1002:
                return ErrorCode.PRINTER_ADD_STRING_FAILED; // 设置字符串缓冲失败
            case -1003:
                return ErrorCode.PRINTER_ADD_IMAGE_FAILED; // 设置图片缓冲失败
            case -1004: // 打印机忙
            case 0xF7:// EM_prn_BUSY，打印机处于忙状态
                return ErrorCode.PRINTER_BUSY;
            case -1005: // 打印机缺纸
            case 0xF0: // EM_prn_PAPERENDED，缺纸，不能打印
                return ErrorCode.PRINTER_OUT_OF_PAPER;
            case -1006:
                return ErrorCode.PRINTER_WRONG_PACKAGE; // 打印数据包格式错
            case -1007: // 打印机故障
            case 0xF2: // EM_prn_HARDERR，硬件错误
                return ErrorCode.PRINTER_FAULT;
            case -1008: // 打印机过热
            case 0xF3: // EM_prn_OVERHEAT，打印机过热
                return ErrorCode.PRINTER_OVERHEAT;
            case -1009:
                return ErrorCode.PRINTER_UNFINISHED; // 打印未完成
            case -1010:
                return ErrorCode.PRINTER_NO_FONT_LIB; // 打印机未装字库
            case -1011:
                return ErrorCode.PRINTER_OUT_OF_MEMORY; // 数据包过长
            case -1012:
                return ErrorCode.PRINTER_NOT_SUPPORT;//暂不支持
            case -1999:
            case 0xE1: // EM_prn_LOWVOL，低压保护
            case 0xE3: // EM_prn_LOWTEMP，低温保护或AD出错
            case 0xE5: // EM_prn_COMMERR，手座机状态正常，但通讯失败
            case 0xF9: // EM_prn_ERRFORMAT，非法的属性名
            case 0xFA: // EM_prn_ERRVALUE，非法的属性值
            case 0xF5: // EM_prn_BUFOVERFLOW，缓冲模式下所操作的位置超出范围
                return ErrorCode.PRINTER_OTHER_ERR; // 其他异常错误
            default:
                return nymphError.getError(innerCode);
        }
    }
};

/**
 * # 打印机错误码
 * @class nymph.dev.printer.Printer.ErrorCode
 */
var ErrorCode = {
    /**
     * @property {String} [PRINTER_NOT_SUPPORT = 'PRINTER_NOT_SUPPORT'] 暂不支持。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_NOT_SUPPORT: 'PRINTER_NOT_SUPPORT',

    /**
     * @property {String} [PRINTER_BASE_ERR = 'PRINTER_BASE_ERR'] 打印机模块基础错误。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_BASE_ERR: 'PRINTER_BASE_ERR',

    /**
     * @property {String} [PRINTER_PRINT_FAILED='PRINTER_PRINT_FAILED'] 打印失败。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_PRINT_FAILED: 'PRINTER_PRINT_FAILED',

    /**
     * @property {String} [PRINTER_ADD_STRING_FAILED='PRINTER_ADD_STRING_FAILED'] 添加打印文字失败。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_ADD_STRING_FAILED: 'PRINTER_ADD_STRING_FAILED',

    /**
     * @property {String} [PRINTER_ADD_IMAGE_FAILED='PRINTER_ADD_IMAGE_FAILED'] 添加打印图片失败。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_ADD_IMAGE_FAILED: 'PRINTER_ADD_IMAGE_FAILED',

    /**
     * @property {String} [PRINTER_BUSY='PRINTER_BUSY'] 打印机处于忙状态。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_BUSY: 'PRINTER_BUSY',

    /**
     * @property {String} [PRINTER_OUT_OF_PAPER='PRINTER_OUT_OF_PAPER'] 缺纸。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_OUT_OF_PAPER: 'PRINTER_OUT_OF_PAPER',

    /**
     * @property {String} [PRINTER_WRONG_PACKAGE='PRINTER_WRONG_PACKAGE'] 打印数据包格式错。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_WRONG_PACKAGE: 'PRINTER_WRONG_PACKAGE',

    /**
     * @property {String} [PRINTER_FAULT='PRINTER_FAULT'] 打印机故障。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_FAULT: 'PRINTER_FAULT',

    /**
     * @property {String} [PRINTER_OVERHEAT='PRINTER_OVERHEAT'] 打印机过热。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_OVERHEAT: 'PRINTER_OVERHEAT',

    /**
     * @property {String} [PRINTER_UNFINISHED='PRINTER_UNFINISHED'] 打印未完成。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_UNFINISHED: 'PRINTER_UNFINISHED',

    /**
     * @property {String} [PRINTER_NO_FONT_LIB='PRINTER_NO_FONT_LIB'] 打印机未装字库。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_NO_FONT_LIB: 'PRINTER_NO_FONT_LIB',

    /**
     * @property {String} [PRINTER_OUT_OF_MEMORY='PRINTER_OUT_OF_MEMORY'] 数据包过长。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_OUT_OF_MEMORY: 'PRINTER_OUT_OF_MEMORY',

    /**
     * @property {String} [PRINTER_OTHER_ERR='PRINTER_OTHER_ERR'] 其他异常错误。
     * @member nymph.dev.printer.Printer.ErrorCode
     **/
    PRINTER_OTHER_ERR: 'PRINTER_OTHER_ERR',
};

/**
 * @property {nymph.dev.printer.Printer} Printer 打印机类，用来创建该类的实例。
 * @member nymph.dev.printer
 */
printer.Printer = Printer;

/**
 * @property {nymph.dev.printer.Printer.ErrorCode} ErrorCode 错误码。
 * @member nymph.dev.printer
 */
Printer.ErrorCode = ErrorCode;

module.exports = printer;

},{"error":"error","hermes":"hermes"}],"scanner":[function(require,module,exports){
'use strict';

/**
 * # 扫描头模块（模块名：scanner）
 *
 * @class nymph.dev.scanner
 * @singleton
 * 本模块为扫描头入口模块，通过 `requrie('scanner')` 的方式获取：
 *
 * 如下：
 *
 *     // 获取扫描头入口模块。
 *     var scanner = require('scanner');
 *
 *     try{
 *       scanner.open();
 *
 *       //可不设置init，默认为使用前置摄像头
 *       var cfg = {
 *         scannerType: 1
 *       }
 *       scanner.init(cfg);
 *
 *       scanner.startScan(10,function(err,data){
 *         if(err){
 *           //失败处理
 *         }else {
 *           //成功处理
 *         }
 *
 *         scanner.stopScan();
 *         scanner.close();
 *       });
 *
 *
 *     }catch(err) {
 *       //失败处理
 *       scanner.close();
 *     }
 */

var hermes = require('hermes');
var nymphError = require('error');
var scanner = {
  /**
   * 设备句柄。
   * @private
   * @type {String}
   */
  instanceId : hermes.NULL,

  /**
   * 插件 ID。
   */
  PLUGINID: 'd130b9999005ba356b7a0290e59a7418',

  scannerUsed: false,

  /**
   * @method open
   * 打开扫描头。
   *
   *     // 获取扫描头入口模块。
   *     var scanner = require('scanner');
   *
   *     try {
   *       scanner.open();
   *     } catch (err) {
   *       // 打开扫描头失败的处理。
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  open: function () {
    var result, errorCode;
    result = hermes.exec(this.PLUGINID, hermes.NULL, 'open');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: result.message, innerCode: result.innerCode};
    }

  },

  /**
   * @method close
   * 关闭扫描头。
   *
   *     // 获取扫描头入口模块。
   *     var scanner = require('scanner');
   *     try {
   *       scanner.close();
   *     } catch (err) {
   *       // 关闭扫描头失败的处理。
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  close: function () {
    var result, errorCode;
    result = hermes.exec(this.PLUGINID, this.instanceId, 'close');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: result.message, innerCode: result.innerCode};
    }
  },

  /**
   * @method init
   * 初始化扫描头。
   *
   *     // Get scanner.
   *     var scanner = require('scanner');
   *     try {
   *       var cfg = {
   *          scannerType:1
   *       };
   *       scanner.init(cfg);
   *     } catch (err) {
   *       // 失败处理
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @param {Object} cfg 扫描头各项配置。
   * @param {Number} cfg.scannerType 0前置 1后置。
   *
   *  @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  init: function (cfg) {
    var result, errorCode;
    result = hermes.exec(this.PLUGINID, this.instanceId, 'init', [cfg]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: result.message, innerCode: result.innerCode};
    }
  },

  /**
   * @method startScan
   * 扫描。
   *
   *     // Get scanner.
   *     var scanner = require('scanner');
   *     scanner.startScan(30,function(err, data){
   *        if(err){
   *            // 失败处理
   *        } else {
   *            // 成功处理
   *        }
   *     });
   *
   * @param {Number} timeout 超时时间,单位秒。
   * @param {Function} callback 处理此方法执行结果的回调函数。
   * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
   * @param {String} callback.data 扫描结果
   */
  startScan: function (timeout, callback) {
    var self = this,err = {};

    if(typeof timeout !== 'number' || isNaN(timeout) || timeout < 0){
      throw {code: nymphError.PARAM_ERR, message: 'The first parameter should be a number!'};
    }
    if(typeof callback !== 'function'){
      throw {code: nymphError.PARAM_ERR, message: 'The second parameter should be a callback function!'};
    }

    if(this.scannerUsed){
      err.code = nymphError.DEVICE_USED;
      err.message = 'The scanner is being used!';
      callback.call(self,err);
      return;
    }
    this.scannerUsed = true;

    hermes.exec(this.PLUGINID, this.instanceId, 'startScan', [timeout], function (err, data) {
      if (err) {
        err.code = self.getError(err.innerCode);
        callback.call(self, err);
      } else {
        callback.call(self, null, data);
      }

      self.scannerUsed = false;

    });
  },

  /**
   * @ignore
   * @method stopScan
   * 停止扫描。
   * 该接口用于 startScan 后还未回调前强制停止扫描用的。
   * 不能在 startScan 后立即调用，需要加上一定的延迟时间，让扫描界面启动完成。
   *
   *     // Get scanner.
   *     var scanner = require('scanner');
   *     try {
   *       scanner.stopScan();
   *     } catch (err) {
   *       // 失败处理
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  stopScan: function () {
    var result, errorCode;

    if(!this.scannerUsed){
      throw {code: nymphError.ERROR, message: 'The scanner is not start!'};
    }

    result = hermes.exec(this.PLUGINID, this.instanceId, 'stopScan');
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: result.message, innerCode: result.innerCode};
    }
  },

  /**
   * @method decode
   * 解码一维，二维码图片。
   * 
   *     // Get scanner.
   *     var scanner = require('scanner');
   *     try {
   *       var data = {
   *         imageData: "image base64 string" ,
   *         width: 100,
   *         height: 100
   *       }; 
   *       var decodeData = scanner.decode(data);
   *     } catch (err) {
   *       // 失败处理
   *       console.error(err.code + ' ' + err.message);
   *     }
   *
   * @param {Object} data 图像相关参数
   * @param {String} data.imageData 图像数据，必须是灰度化后的图像数据，且必须是一个字节代表一个像素，格式为 Base64
   * @param {String} data.width 图像宽度
   * @param {String} data.height 图像高度
   * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
   */
  decode: function(data) {
    var result, errorCode;
   
    result = hermes.exec(this.PLUGINID, this.instanceId, 'decode', [data]);
    errorCode = this.getError(result.innerCode);
    if (errorCode !== nymphError.SUCCESS) {
      throw {code: errorCode, message: result.message, innerCode: result.innerCode};
    }
    return result.data;

  },

  /**
   * @ignore
   * @param {Number} innerCode 底层上传的返回码
   * @return {String} 返回码对应的字符串
   */
  getError: function (innerCode) {
    switch (innerCode) {
      case -2000: // 扫描头基础错误码
        return nymphError.ERROR;
      case -2001:
        return nymphError.CANCELED;
      case -2999:
        return nymphError.OTHER_ERR;
      default:
        return nymphError.getError(innerCode);
    }
  }
};
hermes.addJsPluginInstance(scanner.PLUGINID, scanner);
module.exports = scanner;

},{"error":"error","hermes":"hermes"}],"serial-port":[function(require,module,exports){
(function (Buffer){
'use strict';

/**
 * # 串口（模块名：serialport）
 * @class nymph.comm.serialPort
 *
 * 本模块为串口入口模块，通过 `requrie('serialport')` 的方式获取，包含以下两个部分内容：
 *
 * - 串口类：提供了和串口相关的一些方法。
 * - 所有与串口相关的类和对象。
 *
 * 如下：
 *
 *     // 获取串口入口模块。
 *     var serialPort = require('serialport');
 *
 *     // 获取串口类。
 *     var SerialPort = serialPort.SerialPort;
 *
 *     // 获取串口配置类。
 *     var SerialPortCfg = serialPort.SerialPortCfg;
 *     var serialportCfg = new SerialPortCfg();
 *
 *     // 创建一个串口实例。
 *     var sp = new SerialPort('COM1', serialportCfg);
 *
 */

/**
 * # 串口类
 *
 * @class nymph.comm.serialPort.SerialPort
 *
 * @constructor
 * 构造一个新的串口对象。
 * @param {nymph.comm.serialPort.PortName} portName 串口名称。
 * @param {nymph.comm.serialPort.SerialPortCfg} options (Optional) 串口配置。
 */
var serialPort = {},
    hermes = require('hermes'),
    tools = require('tools'),
    nymphError = require('error');
var SerialPort = function (portName, options) {
    var self = this;

    // 默认串口参数
    var cfg = new serialPort.SerialPortCfg();

    /**
     * @property {String} portName
     * 串口名称。
     */
    switch (portName) {
        case serialPort.PortName.COM1:
        case serialPort.PortName.COM2:
        case serialPort.PortName.USBD:
            self.portName = portName;
            break;
        default:
            throw {code: nymphError.PARAM_ERR, message:'Not support: ' + portName};
    }

    if (options) {
        for (var key in options) {
            if (options.hasOwnProperty(key)) {
                cfg[key] = options[key];
            }
        }
    }
    self.cfg = cfg;
    self.instanceId = hermes.NULL;
};
SerialPort.prototype = {
    PLUGINID: '3c7e14178cab972ead2467b0392f600b',

    constructor: SerialPort,

    /**
     * @method open
     * 打开串口。
     *
     *     try {
     *       sp.open();
     *     } catch (err) {
     *       //失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    open: function () {
        var result, errorCode;
        result = hermes.exec(this.PLUGINID, hermes.NULL, 'open', [this.portName, this.cfg]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to open ' + this.portName, innerCode: result.innerCode};
        }

        this.instanceId = result.data;

        // 注册插件。
        hermes.addJsPluginInstance(this.instanceId, this);
    },

    /**
     * @method write
     * 向串口发送数据。
     *
     *     var data = new Buffer([0x01, 0x02, 0x03, 0x04]);
     *     sp.write(data,function(err) {
     *        if (err) {
     *          // 失败的处理
     *        } else {
     *          // 成功的处理
     *        }
     *     });
     *
     * @param {Object/String/Array} data 要发送给串口的数据。数据类型可为 16 进制字符串/Array/[Buffer](https://nodejs.org/api/buffer.html)
     * @param {Number} timeout (Optional) 超时时间，单位为毫秒（ms）。默认为 0（不等待）。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     */
    write: function (data, timeout, callback) {
        var self = this, result, errorCode, actualTimeout = 0, actualData;
        if (arguments.length === 1) {
            if (typeof data === 'function') {
                callback = data;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check parameters, at least pass in data and callback!'});
                return;
            }
            throw {code: nymphError.PARAM_ERR, message: 'Please check parameters, at least pass in data and callback!'};
        }
        if (arguments.length === 2) {
            if (typeof timeout !== 'function') {
                if (typeof data === 'function') {
                    callback = data;
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check parameters, callback is the last parameters!'});
                    return;
                }
                throw {code: nymphError.PARAM_ERR, message: 'Please check parameters, at least pass in data and callback!'};
            }
            callback = timeout;
            if(!data) {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid data!'});
                return;
            }
        }
        if (arguments.length === 3) {
            if(typeof callback !== 'function') {
                if (typeof data === 'function') {
                    callback = data;
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be data, and the second parameter should be timeout, the third parameter should be callback!'});
                    return;
                }
                if (typeof timeout === 'function') {
                    callback = timeout;
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be data, and the second parameter should be timeout, the third parameter should be callback!'});
                    return;
                }
                throw {code: nymphError.PARAM_ERR, message: 'The last parameter should be a callback function!'};
            }
            if (timeout) {
                if (typeof timeout === 'number' && timeout > 0) {
                    actualTimeout = timeout;
                } else {
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid timeout!'});
                    return;
                }
            }
            if(!data) {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid data!'});
                return;
            }
        }

        try {
            actualData = tools.toBase64(data);
        } catch (err) {
            if (err) {
                throw {code: nymphError.PARAM_ERR, message: 'invalid data:' + err.message};
            } else {
                throw {code: nymphError.PARAM_ERR, message: 'invalid data!'};
            }
        }
        hermes.exec(this.PLUGINID, this.instanceId, 'write', [actualData, actualTimeout], function (err) {
            if (err) {
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {
                callback.call(self, null);
            }
        });
    },

    /**
     * @method read
     * 读串口数据。
     *
     *     sp.read(10000,10000, function(err, data) {
     *       if (err) {
     *         // 失败的处理
     *       } else {
     *         // 成功的处理，对收到的 data 进行处理
     *       }
     *     } );
     *
     * @param {Number} dataLen 期望接收的数据长度。
     * @param {Number} timeout (Optional) 超时时间，单位为毫秒（ms）。默认为 0（不等待）。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.data 收到的串口数据。数据类型为 [Buffer](https://nodejs.org/api/buffer.html)。
     */
    read: function (dataLen, timeout, callback) {
        var result, errorCode, data = null, actualTimeout = 0, self = this;
        if (dataLen === 0) {
            return data;
        }
        if (arguments.length === 1) {
            if (typeof dataLen === 'function') {
                callback = dataLen;
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check parameters, at least pass in dataLen and callback!'});
                return;
            }
            throw {code: nymphError.PARAM_ERR, message: 'Please check parameters, at least pass in dataLen and callback!'};
        }
        if (arguments.length === 2) {
            if (typeof timeout !== 'function') {
                if (typeof dataLen === 'function') {
                    callback = dataLen;
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check parameters, callback is the last parameters!'});
                    return;
                }
                throw {code: nymphError.PARAM_ERR, message: 'Please check parameters, at least pass in dataLen and callback!'};
            }
            callback = timeout;
            if (typeof dataLen !== 'number' || dataLen < 0) {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid dataLen!'});
                return;
            }
        }
        if (arguments.length === 3) {
            if(typeof callback !== 'function') {
                if (typeof dataLen === 'function') {
                    callback = dataLen;
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be dataLen, and the second parameter should be timeout, the third parameter should be callback!'});
                    return;
                }
                if (typeof timeout === 'function') {
                    callback = timeout;
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Please check the order of parameters, the first parameter should be dataLen, and the second parameter should be timeout, the third parameter should be callback!'});
                    return;
                }
                throw {code: nymphError.PARAM_ERR, message: 'The last parameter should be a callback function!'};
            }
            if (timeout) {
                if (typeof timeout === 'number' && timeout > 0) {
                    actualTimeout = timeout;
                } else {
                    callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid timeout!'});
                    return;
                }
            }
            if (typeof dataLen !== 'number' || dataLen < 0) {
                callback.call(self, {code: nymphError.PARAM_ERR, message: 'Invalid dataLen!'});
                return;
            }
        }
        hermes.exec(this.PLUGINID, this.instanceId, 'read', [dataLen, actualTimeout], function (err, dataReceived) {
            if (err) {
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {
                if (dataReceived) {
                    data = new Buffer(dataReceived, 'base64');
                }
                callback.call(self, null, data);
            }
        });
    },

    /**
     * @method flush
     * 清缓存。
     *
     *     try {
     *       sp.flush();
     *     } catch (err) {
     *       //失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    flush: function () {
        var result, errorCode;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'flush');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to flush ' + this.portName, innerCode: result.innerCode};
        }
    },

    /**
     * @method close
     * 关闭串口。
     *
     *     try {
     *       sp.close();
     *     } catch (err) {
     *       //失败的处理
     *     }
     *
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    close: function () {
        var result, errorCode;
        if (this.instanceId == hermes.NULL) {
            // 若还未打开，无需去关闭。
            return;
        }
        result = hermes.exec(this.PLUGINID, this.instanceId, 'close');
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to close ' + this.portName, innerCode: result.innerCode};
        }
        // 反注册
        hermes.removeJsPluginInstance(this.instanceId);
        this.instanceId = hermes.NULL;
    },

    getError: function (innerCode) {
        switch (innerCode) {
            default:
                return nymphError.getError(innerCode);
        }
    },
};
/**
 * # 串口错误码
 * @class nymph.comm.serialPort.SerialPort.ErrorCode
 */
var ErrorCode = {

};

/**
 * # 串口配置
 * @class nymph.comm.serialPort.SerialPortCfg
 */
var SerialPortCfg = function () {
    /**
     * @property {nymph.comm.serialPort.BaudRate} baudRate 波特率。默认为 115200。
     */
    this.baudRate = serialPort.BaudRate.BPS115200;

    /**
     * @property {nymph.comm.Parity} parity 奇偶校验。
     */
    this.parity = serialPort.Parity.NOPAR;

    /**
     * @property {nymph.comm.DataBits} dataBits 数据位。
     */
    this.dataBits = serialPort.DataBits.DB8;

    /**
     * @property {nymph.comm.StopBits} stopBits 停止位。
     */
    this.stopBits = serialPort.StopBits.SB1;
};

/**
 * # 串口名称
 * @class nymph.comm.serialPort.PortName
 */
var PortName = {
    /**
     * @property {String} [COM1 = 'COM1'] 串口 1
     * @member nymph.comm.serialPort.PortName
     **/
    COM1: 'COM1',

    /**
     * @property {String} [COM2 = 'COM2'] 串口 2
     * @member nymph.comm.serialPort.PortName
     **/
    COM2: 'COM2',

    /**
     * @property {String} [USBD = 'USBD'] USBD 口
     * @member nymph.comm.serialPort.PortName
     **/
    USBD: 'USBD'
};

/**
 * # 波特率
 * @class nymph.comm.serialPort.BaudRate
 */
var BaudRate = {
    /**
     * @property {Number} [BPS1200 = 1200] BPS1200
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS1200: 1200,

    /**
     * @property {Number} [BPS2400 = 2400] BPS2400
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS2400: 2400,

    /**
     * @property {Number} [BPS4800 = 4800] BPS4800
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS4800: 4800,

    /**
     * @property {Number} [BPS9600 = 9600] BPS9600
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS9600: 9600,

    /**
     * @property {Number} [BPS14400 = 14400] BPS14400
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS14400: 14400,

    /**
     * @property {Number} [BPS19200 = 19200] BPS19200
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS19200: 19200,

    /**
     * @property {Number} [BPS24000 = 24000] BPS24000
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS24000: 24000,

    /**
     * @property {Number} [BPS26400 = 26400] BPS26400
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS26400: 26400,

    /**
     * @property {Number} [BPS28800 = 28800] BPS28800
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS28800: 28800,

    /**
     * @property {Number} [BPS33600 = 33600] BPS33600
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS33600: 33600,

    /**
     * @property {Number} [BPS38400 = 38400] BPS38400
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS38400: 38400,

    /**
     * @property {Number} [BPS57600 = 57600] BPS57600
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS57600: 57600,

    /**
     * @property {Number} [BPS115200 = 115200] BPS115200
     * @member nymph.comm.serialPort.BaudRate
     */
    BPS115200: 115200,

    /**
     * @property {Number} [None = 0] None
     * @member nymph.comm.serialPort.BaudRate
     */
    NONE: 0
};

/**
 * # 奇偶校验
 * @class nymph.comm.serialPort.Parity
 */
var Parity = {
    /**
     * @property {String} [NOPAR = 'NOPAR'] 无校验（缺省）
     * @member nymph.comm.serialPort.Parity.NOPAR
     **/
    NOPAR: 'NOPAR',

    /**
     * @property {String} [EVENPAR = 'EVENPAR'] 偶校验
     * @member nymph.comm.serialPort.Parity.EVENPAR
     **/
    EVENPAR: 'EVENPAR',

    /**
     * @property {String} [ODDPAR = 'ODDPAR'] 奇效验
     * @member nymph.comm.serialPort.Parity.ODDPAR
     **/
    ODDPAR: 'ODDPAR'
};

/**
 * # 数据位
 * @class nymph.comm.serialPort.DataBits
 */
var DataBits = {
    /**
     * @property {Number} [DB7 = 7] 7 位数据位
     * @member nymph.comm.serialPort.DataBits.DB7
     **/
    DB7: 7,

    /**
     * @property {Number} [DB8 = 8] 8 位数据位（缺省）
     * @member nymph.comm.serialPort.DataBits.DB8
     **/
    DB8: 8
};

/**
 * # 停止位
 * @class nymph.comm.serialPort.StopBits
 */
var StopBits = {
    /**
     * @property {Number} [SB1 = 1] 1 位停止位（缺省）
     * @member nymph.comm.serialPort.StopBits.SB1
     **/
    SB1: 1,

    /**
     * @property {Number} [SB15 = 1.5] 1.5 位停止位
     * @member nymph.comm.serialPort.StopBits.SB15
     **/
    SB15: 1.5,

    /**
     * @property {Number} [SB2 = 2] 2 位停止位
     * @member nymph.comm.serialPort.StopBits.SB2
     **/
    SB2: 2
};

/**
 * @property {nymph.comm.serialPort.PortName} PortName 串口名称。
 * @member nymph.comm.serialPort
 */
serialPort.PortName = PortName;

/**
 * @property {nymph.comm.serialPort.BaudRate} BaudRate 波特率。
 * @member nymph.comm.serialPort
 */
serialPort.BaudRate = BaudRate;

/**
 * @property {nymph.comm.serialPort.Parity} Parity 奇偶校验。
 * @member nymph.comm.serialPort
 */
serialPort.Parity = Parity;

/**
 * @property {nymph.comm.serialPort.DataBits} DataBits 数据位。
 * @member nymph.comm.serialPort
 */
serialPort.DataBits = DataBits;

/**
 * @property {nymph.comm.serialPort.StopBits} StopBits 停止位。
 * @member nymph.comm.serialPort
 */
serialPort.StopBits = StopBits;

/**
 * @property {nymph.comm.serialPort.SerialPortCfg} SerialPortCfg 串口配置类，用来创建该类的实例。
 * @member nymph.comm.serialPort
 */
serialPort.SerialPortCfg = SerialPortCfg;

/**
 * @property {nymph.comm.serialPort.SerialPort.ErrorCode} ErrorCode 错误码。
 * @member nymph.comm.serialPort.SerialPort
 */
SerialPort.ErrorCode = ErrorCode;

/**
 * @property {nymph.comm.serialPort.SerialPort} SerialPort 串口类，用来创建该类的实例。
 * @member nymph.comm.serialPort
 */
serialPort.SerialPort = SerialPort;
module.exports = serialPort;

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","error":"error","hermes":"hermes","tools":"tools"}],"signature-pad":[function(require,module,exports){
(function (Buffer){
'use strict';

var hermes = require('hermes'),
    nymphError = require('error'),
    tools = require('tools'),
    encoding = require('nymph-encoding');
/**
 * # 手写签名（模块名：signature-pad）
 * @class nymph.sys.signaturePad
 * @singleton
 */
var signaturePad = {
    /**
     * 插件ID。
     */
    PLUGINID: '6cfb59823c2ca94fa8eb99ea68712ed0',

    instanceId: hermes.NULL,

    /**
     * @method startSignature
     * 显示手写签名板。输入成功后，可获得带有交易码水印并且压缩过的签名图片。
     *
     *     var signaturePad = require('signature-pad'),
     *         transCode = 34AC3289;
     *
     *     signaturePad.startSignature(transCode, function(err, result) {
     *     });
     *
     * @param {String} background 水印信息。
     * @param {Object} [options] 手写签名相关参数。
     * @param {Number} options.timeout 超时时间，单位为秒。若此值小于等于 0，则无超时限制。默认为无超时限制。
     * @param {nymph.sys.signaturePad.Rotation} options.rotation 旋转方向。如果没有传入此参数，则默认旋转方向自动。
     * @param {Number} options.reSignTimes 重签次数。若此值小于等于 0，则无重签次数限制。默认为无重签次数限制。
     * @param {Boolean} options.isResetTimeout 重签的时候是否重置超时时间。默认为不重置。
     * @param {Function} callback 处理此方法执行结果的回调函数。
     * @param {nymph.error.NymphError} callback.err 执行此方法过程中产生的错误。
     * @param {Object} callback.result
     * @param {String} callback.result.signatureData 经过处理后带有交易码水印的签名数据（HEX 字符串）。
     * @param {String} callback.result.picBase64 带有交易码水印的签名图片的 base64 字符串。
     * @member nymph.sys.signaturePad
     */
    startSignature: function (background, options, callback) {
        var self = this, result, errorCode, errCallback,
            actualOptions = {timeout: -1, rotation: self.Rotation.ROTATION_AUTO, reSignTimes: -1, isResetTimeout: false};

        if (!background){
            throw {code: nymphError.PARAM_ERR, message: 'Please at lease pass in transCode and callback!'};
        }

        if (typeof background !== 'string') {
            if (typeof background === 'function') {
                errCallback = background;
            } else if (typeof options === 'function') {
                errCallback = options;
            } else if (typeof callback === 'function'){
                errCallback = callback;
            } else {
                throw {code: nymphError.PARAM_ERR, message: 'Please at lease pass in transCode and callback!'};
            }
            errCallback.call(self, {code:nymphError.PARAM_ERR, message: 'transCode must be a string!'});
            return;
        }

        // 调整参数。
        if (typeof options === 'function') {
            callback = options;
        } else {
            if (options.hasOwnProperty('timeout')){
                actualOptions.timeout = options.timeout;
            }
            if (options.hasOwnProperty('rotation')){
                actualOptions.rotation = options.rotation;
            }
            if (options.hasOwnProperty('reSignTimes')){
                actualOptions.reSignTimes = options.reSignTimes;
            }
            if (options.hasOwnProperty('isResetTimeout')){
                actualOptions.isResetTimeout = options.isResetTimeout;
            }
        }

        hermes.exec(this.PLUGINID, this.instanceId, 'startSignature', [background, actualOptions], function(err, result) {
            if (err) {
                err.code = self.getError(err.innerCode);
                callback.call(self, err);
            } else {
                if (result.signatureData) {
                    result.signatureData = encoding.bufferToHexString(new Buffer(result.signatureData, 'base64'));
                }
                callback.call(self, null, result);
            }
        });
    },

    /**
     * @method close
     * 强制关闭手写签名板。会触发签名板回调。
     * @member nymph.sys.signaturePad
     */
    close: function(){
        var self = this, result, errorCode;

        result = hermes.exec(this.PLUGINID, this.instanceId, 'close');
        errorCode = self.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to close signature pad.', innerCode: result.innerCode};
        }
    },

    getError: function (innerCode) {
        switch (innerCode) {
            case 2:
                return nymphError.CANCELLED;
            case 1:
                return nymphError.TIMEOUT;
            default:
                return nymphError.getError(innerCode);
        }
    }
};

/**
 * 屏幕旋转方向。
 * @class nymph.sys.signaturePad.Rotation
 */
var Rotation = {
    /**
     * 设为此值时，签名板会自动选择能够使其尽可能大的旋转方向。
     */
    ROTATION_AUTO: 'ROTATION_AUTO',

    /**
     * 设为此值时，签名板的旋转方向为横屏。
     */
    ROTATION_LANDSCAPE: 'ROTATION_LANDSCAPE',

    /**
     * 设为此值时，签名板的旋转方向为当前屏幕旋转方向，即不进行旋转。
     */
    ROTATION_NONE: 'ROTATION_NONE',

    /**
     * 设为此值时，签名板的旋转方向为竖屏。
     */
    ROTATION_PORTRAIT: 'ROTATION_PORTRAIT',

    /**
     * 设为此值时，签名板的旋转方向为反向横屏。
     */
    ROTATION_REVERSE_LANDSCAPE: 'ROTATION_REVERSE_LANDSCAPE',

    /**
     * 设为此值时，签名板的旋转方向为反向竖屏。
     */
    ROTATION_REVERSE_PORTRAIT: 'ROTATION_REVERSE_PORTRAIT'
};

/**
 * 旋转方向枚举
 * @class nymph.sys.signaturePad.Rotation
 */
signaturePad.Rotation = Rotation;

hermes.addJsPluginInstance(signaturePad.PLUGINID, signaturePad);
module.exports = signaturePad;

}).call(this,require("buffer").Buffer)
},{"buffer":"buffer","error":"error","hermes":"hermes","nymph-encoding":"nymph-encoding","tools":"tools"}],"socket-io-client":[function(require,module,exports){
'use strict';
var socketIoClient = {};
var socket, io = require('socket.io-client');
socketIoClient.connect = function (ip, port) {
    socket = io.connect('http://'+ip+':'+port);
    socket.on('connect', function(){
        console.log('socket connected.');
    });
    socket.on('disconnect', function () {
        console.log('socket disconnected');
        socket = null;
    });
};
socketIoClient.changePic = function (picName) {
    if (socket) {
        if (picName) {
            socket.emit('change picture', {clientId: 'change', picName: picName});
        } else {
            console.log('changePic...');
            socket.emit('change picture', {clientId: 'change', picName: 'demo2.png'});
        }
    } else {
        throw {code: 'ERROR', message:'Please connect first!'};
    }
};
module.exports = socketIoClient;

},{"socket.io-client":213}],"testlib":[function(require,module,exports){
'use strict';
var testlib = require('./testlib.js');
var hermes = require('hermes');

testlib.getInputs = function (modelId, apiId) {
    var tmp = hermes.exec(this.PLUGINID, hermes.NULL, 'getInputs', [modelId, apiId]);
    return tmp.data;
};


module.exports = testlib;


},{"./testlib.js":61,"hermes":"hermes"}],"tmsStub":[function(require,module,exports){
'use strict';

/**
 * # TMS 桩函数模块（模块名：tmsStub）
 * @class nymph.pay.tmsStub
 * @singleton
 */
// 引用外部模块。
var nymphError = require('error');
var hermes = require('hermes');
var tmsStub = {
    PLUGINID: 'aafa296fc7a5bb788c5383ad91322702',

    instanceId: hermes.NULL,

    /**
     * @method setTimeOut
     * 设置 TMS 测试返回延迟时间
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    setTimeOut: function (timeOut) {
        var result, errorCode;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'setTimeOut', [{timeOut: timeOut}]);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to setTimeOut.', innerCode: result.innerCode};
        }
    },

    /**
     * @method getTimeOut
     * 获取 TMS 测试返回延迟时间
     * @throws {nymph.error.NymphError} 如果出错，将抛出异常。
     */
    getTimeOut: function () {
        var self = this, result, errorCode;
        result = hermes.exec(this.PLUGINID, this.instanceId, 'getTimeOut', []);
        errorCode = this.getError(result.innerCode);
        if (errorCode !== nymphError.SUCCESS) {
            throw {code: errorCode, message: 'Failed to getTimeOut.', innerCode: result.innerCode};
        } else {
            return result.data.timeOut;
        }
    },

    /**
     * @ignore
     * @param {Number} innerCode 底层上传的返回码
     * @returns {String} 返回码对应的字符串
     */
    getError: function (innerCode) {
        switch (innerCode) {
            default:
                return nymphError.getError(innerCode);
        }
    }
};
module.exports = tmsStub;

},{"error":"error","hermes":"hermes"}],"tools":[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
var encoding = require('nymph-encoding');
var nymphErr = require('error');

/**
 * # 工具类（模块名：tools）
 * @class nymph.util.tools
 * @singleton
 * @experimental 规范尚未制定完成！
 */
var tools = {
  /**
   * @method getAmountBuffer
   * 将金额转换成 6 字节 BCD 码。如 123 转换成 [0x00, 0x00, 0x00, 0x00, 0x01, 0x23]
   * @param {Number} amount 要转换的金额
   * @return {Object} 6 字节 BCD 码，数据类型为 [Buffer](https://nodejs.org/api/buffer.html)
   */
  getAmountBuffer: function (amount) {
    if (typeof  amount !== 'number') {
      throw {code: nymphErr.PARAM_ERR, message: 'Amount should be a number!'};
    }

    if (amount.toString().length > 12) {
      return null;
    }

    // 给金额补齐 12 位，左补 0。
    var amountString = this.padZeroLeft(amount, 12);

    // 金额转换成 6 字节 Buffer。
    var amountBuffer = encoding.hexStringToBuffer(amountString);
    console.log('tools amountBuffer:' + encoding.bufferToHexString(amountBuffer));
    return amountBuffer;
  },

  /**
   * @method padZeroLeft
   * 给一个整型数字左补 0
   * @param {Number} num 要进行左补 0 的数字
   * @param {Number} n 进行补 0 操作后的总长度
   * @return {String} 进行左补 0 操作后的字符串
   */
  padZeroLeft: function (num, n) {
    var len = num.toString().length;
    if (len > n) {
      throw {code: nymphErr.PARAM_ERR, message: '数字长度已超出预期长度。'};
    }
    while (len < n) {
      num = '0' + num;
      len++;
    }
    return num.toString();
  },

  /**
   * @method padStr
   * @param str 初始字符串
   * @param length 总长度
   * @param factor 填充字符
   * @param align 填充位置:left,right
   * @return {string}
   */
  padStr: function (str, length, factor, align) {
    if (!str) {
      str = '';
    }
    str = str.toString();
    if (isNaN(length)) {
      length = parseInt(length);
    }
    length = length - str.length + 1;
    var pad = new Array(length).join(factor);
    if (align === 'left') {
      str = pad + str;
    } else {
      str += pad;
    }
    return str;
  },

  /**
   * @method toBase64
   * 将 Buffer、16进制字符串、Array 类型的数据转成 Buffer 的 base64 字符串。
   * @param {Object/String/Array} data
   * @return {String}
   */
  toBase64: function (data) {
    if (data) {
      var tempBuf, result;
      if (Buffer.isBuffer(data)) {
        result = data.toString('base64');
      } else {
        if (data.constructor === Array) {
          tempBuf = new Buffer(data);
        } else {
          try {
            tempBuf = encoding.hexStringToBuffer(data);
          } catch (e) {
            throw {code: nymphErr.PARAM_ERR, message: JSON.stringify(data) + ' is not a hex string!'};
          }
        }

        if (tempBuf === null) {
          throw {code: nymphErr.PARAM_ERR, message: JSON.stringify(data) + ' can not be converted to a buffer!'};
        }
        result = tempBuf.toString('base64');
      }
      return result;
    } else {
      throw {code: nymphErr.PARAM_ERR, message: JSON.stringify(data) + ' can not be converted to a buffer!'};
    }
  }
};

module.exports = tools;

},{"buffer":"buffer","error":"error","nymph-encoding":"nymph-encoding"}]},{},[]);
